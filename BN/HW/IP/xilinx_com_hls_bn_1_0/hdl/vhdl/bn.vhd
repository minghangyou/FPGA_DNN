-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bn is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BETA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BETA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GAMMA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GAMMA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_M_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_M_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BETA_USER_VALUE : INTEGER := 0;
    C_M_AXI_BETA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BETA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GAMMA_USER_VALUE : INTEGER := 0;
    C_M_AXI_GAMMA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GAMMA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_M_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_M_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_M_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IN_r_AWVALID : OUT STD_LOGIC;
    m_axi_IN_r_AWREADY : IN STD_LOGIC;
    m_axi_IN_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_IN_r_WVALID : OUT STD_LOGIC;
    m_axi_IN_r_WREADY : IN STD_LOGIC;
    m_axi_IN_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_IN_r_WLAST : OUT STD_LOGIC;
    m_axi_IN_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_IN_r_ARVALID : OUT STD_LOGIC;
    m_axi_IN_r_ARREADY : IN STD_LOGIC;
    m_axi_IN_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RVALID : IN STD_LOGIC;
    m_axi_IN_r_RREADY : OUT STD_LOGIC;
    m_axi_IN_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_RLAST : IN STD_LOGIC;
    m_axi_IN_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BVALID : IN STD_LOGIC;
    m_axi_IN_r_BREADY : OUT STD_LOGIC;
    m_axi_IN_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_BETA_AWVALID : OUT STD_LOGIC;
    m_axi_BETA_AWREADY : IN STD_LOGIC;
    m_axi_BETA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ADDR_WIDTH-1 downto 0);
    m_axi_BETA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BETA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_AWUSER_WIDTH-1 downto 0);
    m_axi_BETA_WVALID : OUT STD_LOGIC;
    m_axi_BETA_WREADY : IN STD_LOGIC;
    m_axi_BETA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH-1 downto 0);
    m_axi_BETA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH/8-1 downto 0);
    m_axi_BETA_WLAST : OUT STD_LOGIC;
    m_axi_BETA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_WUSER_WIDTH-1 downto 0);
    m_axi_BETA_ARVALID : OUT STD_LOGIC;
    m_axi_BETA_ARREADY : IN STD_LOGIC;
    m_axi_BETA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ADDR_WIDTH-1 downto 0);
    m_axi_BETA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BETA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ARUSER_WIDTH-1 downto 0);
    m_axi_BETA_RVALID : IN STD_LOGIC;
    m_axi_BETA_RREADY : OUT STD_LOGIC;
    m_axi_BETA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH-1 downto 0);
    m_axi_BETA_RLAST : IN STD_LOGIC;
    m_axi_BETA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_RUSER_WIDTH-1 downto 0);
    m_axi_BETA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_BVALID : IN STD_LOGIC;
    m_axi_BETA_BREADY : OUT STD_LOGIC;
    m_axi_BETA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_BUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_AWVALID : OUT STD_LOGIC;
    m_axi_GAMMA_AWREADY : IN STD_LOGIC;
    m_axi_GAMMA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ADDR_WIDTH-1 downto 0);
    m_axi_GAMMA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_GAMMA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_AWUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_WVALID : OUT STD_LOGIC;
    m_axi_GAMMA_WREADY : IN STD_LOGIC;
    m_axi_GAMMA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH-1 downto 0);
    m_axi_GAMMA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH/8-1 downto 0);
    m_axi_GAMMA_WLAST : OUT STD_LOGIC;
    m_axi_GAMMA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_WUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_ARVALID : OUT STD_LOGIC;
    m_axi_GAMMA_ARREADY : IN STD_LOGIC;
    m_axi_GAMMA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ADDR_WIDTH-1 downto 0);
    m_axi_GAMMA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_GAMMA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ARUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_RVALID : IN STD_LOGIC;
    m_axi_GAMMA_RREADY : OUT STD_LOGIC;
    m_axi_GAMMA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH-1 downto 0);
    m_axi_GAMMA_RLAST : IN STD_LOGIC;
    m_axi_GAMMA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_RUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_BVALID : IN STD_LOGIC;
    m_axi_GAMMA_BREADY : OUT STD_LOGIC;
    m_axi_GAMMA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_BUSER_WIDTH-1 downto 0);
    m_axi_M_M_AWVALID : OUT STD_LOGIC;
    m_axi_M_M_AWREADY : IN STD_LOGIC;
    m_axi_M_M_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ADDR_WIDTH-1 downto 0);
    m_axi_M_M_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_M_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_AWUSER_WIDTH-1 downto 0);
    m_axi_M_M_WVALID : OUT STD_LOGIC;
    m_axi_M_M_WREADY : IN STD_LOGIC;
    m_axi_M_M_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH-1 downto 0);
    m_axi_M_M_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH/8-1 downto 0);
    m_axi_M_M_WLAST : OUT STD_LOGIC;
    m_axi_M_M_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_WUSER_WIDTH-1 downto 0);
    m_axi_M_M_ARVALID : OUT STD_LOGIC;
    m_axi_M_M_ARREADY : IN STD_LOGIC;
    m_axi_M_M_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ADDR_WIDTH-1 downto 0);
    m_axi_M_M_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_M_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ARUSER_WIDTH-1 downto 0);
    m_axi_M_M_RVALID : IN STD_LOGIC;
    m_axi_M_M_RREADY : OUT STD_LOGIC;
    m_axi_M_M_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH-1 downto 0);
    m_axi_M_M_RLAST : IN STD_LOGIC;
    m_axi_M_M_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_RUSER_WIDTH-1 downto 0);
    m_axi_M_M_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_BVALID : IN STD_LOGIC;
    m_axi_M_M_BREADY : OUT STD_LOGIC;
    m_axi_M_M_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_BUSER_WIDTH-1 downto 0);
    m_axi_M_V_AWVALID : OUT STD_LOGIC;
    m_axi_M_V_AWREADY : IN STD_LOGIC;
    m_axi_M_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_M_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_M_V_WVALID : OUT STD_LOGIC;
    m_axi_M_V_WREADY : IN STD_LOGIC;
    m_axi_M_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_M_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_M_V_WLAST : OUT STD_LOGIC;
    m_axi_M_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_M_V_ARVALID : OUT STD_LOGIC;
    m_axi_M_V_ARREADY : IN STD_LOGIC;
    m_axi_M_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_M_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_M_V_RVALID : IN STD_LOGIC;
    m_axi_M_V_RREADY : OUT STD_LOGIC;
    m_axi_M_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_M_V_RLAST : IN STD_LOGIC;
    m_axi_M_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_M_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_BVALID : IN STD_LOGIC;
    m_axi_M_V_BREADY : OUT STD_LOGIC;
    m_axi_M_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=184,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=1,HLS_SYN_FF=6281,HLS_SYN_LUT=8486,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_V : STD_LOGIC_VECTOR (31 downto 0);
    signal gamma_V : STD_LOGIC_VECTOR (31 downto 0);
    signal moving_mean_V : STD_LOGIC_VECTOR (31 downto 0);
    signal moving_variance_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IN_r_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln330_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_blk_n_AR : STD_LOGIC;
    signal BETA_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal icmp_ln330_reg_952_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_blk_n_AR : STD_LOGIC;
    signal GAMMA_blk_n_R : STD_LOGIC;
    signal M_M_blk_n_AR : STD_LOGIC;
    signal M_M_blk_n_R : STD_LOGIC;
    signal M_V_blk_n_AR : STD_LOGIC;
    signal M_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal icmp_ln330_reg_952_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal IN_r_AWREADY : STD_LOGIC;
    signal IN_r_WREADY : STD_LOGIC;
    signal IN_r_ARVALID : STD_LOGIC;
    signal IN_r_ARREADY : STD_LOGIC;
    signal IN_r_RVALID : STD_LOGIC;
    signal IN_r_RREADY : STD_LOGIC;
    signal IN_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal IN_r_RLAST : STD_LOGIC;
    signal IN_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BVALID : STD_LOGIC;
    signal IN_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_AWREADY : STD_LOGIC;
    signal BETA_WREADY : STD_LOGIC;
    signal BETA_ARVALID : STD_LOGIC;
    signal BETA_ARREADY : STD_LOGIC;
    signal BETA_RVALID : STD_LOGIC;
    signal BETA_RREADY : STD_LOGIC;
    signal BETA_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal BETA_RLAST : STD_LOGIC;
    signal BETA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BETA_BVALID : STD_LOGIC;
    signal BETA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BETA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_AWREADY : STD_LOGIC;
    signal GAMMA_WREADY : STD_LOGIC;
    signal GAMMA_ARVALID : STD_LOGIC;
    signal GAMMA_ARREADY : STD_LOGIC;
    signal GAMMA_RVALID : STD_LOGIC;
    signal GAMMA_RREADY : STD_LOGIC;
    signal GAMMA_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal GAMMA_RLAST : STD_LOGIC;
    signal GAMMA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal GAMMA_BVALID : STD_LOGIC;
    signal GAMMA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal GAMMA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_AWREADY : STD_LOGIC;
    signal M_M_WREADY : STD_LOGIC;
    signal M_M_ARVALID : STD_LOGIC;
    signal M_M_ARREADY : STD_LOGIC;
    signal M_M_RVALID : STD_LOGIC;
    signal M_M_RREADY : STD_LOGIC;
    signal M_M_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal M_M_RLAST : STD_LOGIC;
    signal M_M_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_M_BVALID : STD_LOGIC;
    signal M_M_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_M_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_AWREADY : STD_LOGIC;
    signal M_V_WREADY : STD_LOGIC;
    signal M_V_ARVALID : STD_LOGIC;
    signal M_V_ARREADY : STD_LOGIC;
    signal M_V_RVALID : STD_LOGIC;
    signal M_V_RREADY : STD_LOGIC;
    signal M_V_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal M_V_RLAST : STD_LOGIC;
    signal M_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_V_BVALID : STD_LOGIC;
    signal M_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal OUT_addr_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_V_addr_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal M_M_addr_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal GAMMA_addr_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal BETA_addr_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_addr_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln330_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state53_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln330_reg_952_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_952_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_434_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Val2_s_reg_961 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_num_V_fu_516_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_num_V_reg_967 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_25_reg_977 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_reg_982 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_3_reg_987 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal p_Result_6_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_17_reg_999 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1009 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_1_reg_1014 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_20_reg_1020 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sqrt_fixed_16_6_s_fu_303_ap_return : STD_LOGIC_VECTOR (12 downto 0);
    signal x_sqrt_V_reg_1025 : STD_LOGIC_VECTOR (12 downto 0);
    signal norm_V_fu_753_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_V_reg_1030 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_23_fu_798_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_23_reg_1045 : STD_LOGIC_VECTOR (15 downto 0);
    signal overflow_1_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_895_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal grp_sqrt_fixed_16_6_s_fu_303_ap_ce : STD_LOGIC;
    signal ap_block_state9_pp0_stage0_iter0_ignore_call20 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1_ignore_call20 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2_ignore_call20 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3_ignore_call20 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4_ignore_call20 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5_ignore_call20 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6_ignore_call20 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7_ignore_call20 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8_ignore_call20 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter9_ignore_call20 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter10_ignore_call20 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter11_ignore_call20 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter12_ignore_call20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter13_ignore_call20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter14_ignore_call20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter15_ignore_call20 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter16_ignore_call20 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter17_ignore_call20 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter18_ignore_call20 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter19_ignore_call20 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter20_ignore_call20 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter21_ignore_call20 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter22_ignore_call20 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter23_ignore_call20 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter24_ignore_call20 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter25_ignore_call20 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter26_ignore_call20 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter27_ignore_call20 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter28_ignore_call20 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter29_ignore_call20 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter30_ignore_call20 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter31_ignore_call20 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter32_ignore_call20 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter33_ignore_call20 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter34_ignore_call20 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter35_ignore_call20 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter36_ignore_call20 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter37_ignore_call20 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter38_ignore_call20 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter39_ignore_call20 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter40_ignore_call20 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter41_ignore_call20 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter42_ignore_call20 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter43_ignore_call20 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter44_ignore_call20 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp159 : BOOLEAN;
    signal empty_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_26_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_27_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_28_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_29_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_30_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal out_V1_fu_308_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal moving_variance_V9_fu_328_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal moving_mean_V7_fu_348_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal gamma_V5_fu_368_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal beta_V3_fu_388_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal in_V1_fu_408_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal lhs_V_fu_440_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_10_fu_443_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_10_fu_457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_449_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_500_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_508_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_581_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_18_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_632_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_737_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_745_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_2_fu_761_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_1_fu_764_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_11_fu_767_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_784_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_784_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_fu_810_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_10_fu_802_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_790_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_882_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_889_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_784_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_784_p10 : STD_LOGIC_VECTOR (26 downto 0);

    component sqrt_fixed_16_6_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (12 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component bn_sdiv_27ns_14nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component bn_am_submul_16s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component bn_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        beta_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        gamma_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        moving_mean_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        moving_variance_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bn_IN_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_BETA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_GAMMA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_M_M_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_M_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bn_CTRL_s_axi_U : component bn_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_V => in_V,
        beta_V => beta_V,
        gamma_V => gamma_V,
        moving_mean_V => moving_mean_V,
        moving_variance_V => moving_variance_V,
        out_V => out_V);

    bn_IN_r_m_axi_U : component bn_IN_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IN_r_AWVALID,
        AWREADY => m_axi_IN_r_AWREADY,
        AWADDR => m_axi_IN_r_AWADDR,
        AWID => m_axi_IN_r_AWID,
        AWLEN => m_axi_IN_r_AWLEN,
        AWSIZE => m_axi_IN_r_AWSIZE,
        AWBURST => m_axi_IN_r_AWBURST,
        AWLOCK => m_axi_IN_r_AWLOCK,
        AWCACHE => m_axi_IN_r_AWCACHE,
        AWPROT => m_axi_IN_r_AWPROT,
        AWQOS => m_axi_IN_r_AWQOS,
        AWREGION => m_axi_IN_r_AWREGION,
        AWUSER => m_axi_IN_r_AWUSER,
        WVALID => m_axi_IN_r_WVALID,
        WREADY => m_axi_IN_r_WREADY,
        WDATA => m_axi_IN_r_WDATA,
        WSTRB => m_axi_IN_r_WSTRB,
        WLAST => m_axi_IN_r_WLAST,
        WID => m_axi_IN_r_WID,
        WUSER => m_axi_IN_r_WUSER,
        ARVALID => m_axi_IN_r_ARVALID,
        ARREADY => m_axi_IN_r_ARREADY,
        ARADDR => m_axi_IN_r_ARADDR,
        ARID => m_axi_IN_r_ARID,
        ARLEN => m_axi_IN_r_ARLEN,
        ARSIZE => m_axi_IN_r_ARSIZE,
        ARBURST => m_axi_IN_r_ARBURST,
        ARLOCK => m_axi_IN_r_ARLOCK,
        ARCACHE => m_axi_IN_r_ARCACHE,
        ARPROT => m_axi_IN_r_ARPROT,
        ARQOS => m_axi_IN_r_ARQOS,
        ARREGION => m_axi_IN_r_ARREGION,
        ARUSER => m_axi_IN_r_ARUSER,
        RVALID => m_axi_IN_r_RVALID,
        RREADY => m_axi_IN_r_RREADY,
        RDATA => m_axi_IN_r_RDATA,
        RLAST => m_axi_IN_r_RLAST,
        RID => m_axi_IN_r_RID,
        RUSER => m_axi_IN_r_RUSER,
        RRESP => m_axi_IN_r_RRESP,
        BVALID => m_axi_IN_r_BVALID,
        BREADY => m_axi_IN_r_BREADY,
        BRESP => m_axi_IN_r_BRESP,
        BID => m_axi_IN_r_BID,
        BUSER => m_axi_IN_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IN_r_ARVALID,
        I_ARREADY => IN_r_ARREADY,
        I_ARADDR => IN_addr_reg_946,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IN_r_RVALID,
        I_RREADY => IN_r_RREADY,
        I_RDATA => IN_r_RDATA,
        I_RID => IN_r_RID,
        I_RUSER => IN_r_RUSER,
        I_RRESP => IN_r_RRESP,
        I_RLAST => IN_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IN_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IN_r_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => IN_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IN_r_BRESP,
        I_BID => IN_r_BID,
        I_BUSER => IN_r_BUSER);

    bn_BETA_m_axi_U : component bn_BETA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BETA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BETA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BETA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BETA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BETA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BETA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BETA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BETA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BETA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BETA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BETA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_BETA_AWVALID,
        AWREADY => m_axi_BETA_AWREADY,
        AWADDR => m_axi_BETA_AWADDR,
        AWID => m_axi_BETA_AWID,
        AWLEN => m_axi_BETA_AWLEN,
        AWSIZE => m_axi_BETA_AWSIZE,
        AWBURST => m_axi_BETA_AWBURST,
        AWLOCK => m_axi_BETA_AWLOCK,
        AWCACHE => m_axi_BETA_AWCACHE,
        AWPROT => m_axi_BETA_AWPROT,
        AWQOS => m_axi_BETA_AWQOS,
        AWREGION => m_axi_BETA_AWREGION,
        AWUSER => m_axi_BETA_AWUSER,
        WVALID => m_axi_BETA_WVALID,
        WREADY => m_axi_BETA_WREADY,
        WDATA => m_axi_BETA_WDATA,
        WSTRB => m_axi_BETA_WSTRB,
        WLAST => m_axi_BETA_WLAST,
        WID => m_axi_BETA_WID,
        WUSER => m_axi_BETA_WUSER,
        ARVALID => m_axi_BETA_ARVALID,
        ARREADY => m_axi_BETA_ARREADY,
        ARADDR => m_axi_BETA_ARADDR,
        ARID => m_axi_BETA_ARID,
        ARLEN => m_axi_BETA_ARLEN,
        ARSIZE => m_axi_BETA_ARSIZE,
        ARBURST => m_axi_BETA_ARBURST,
        ARLOCK => m_axi_BETA_ARLOCK,
        ARCACHE => m_axi_BETA_ARCACHE,
        ARPROT => m_axi_BETA_ARPROT,
        ARQOS => m_axi_BETA_ARQOS,
        ARREGION => m_axi_BETA_ARREGION,
        ARUSER => m_axi_BETA_ARUSER,
        RVALID => m_axi_BETA_RVALID,
        RREADY => m_axi_BETA_RREADY,
        RDATA => m_axi_BETA_RDATA,
        RLAST => m_axi_BETA_RLAST,
        RID => m_axi_BETA_RID,
        RUSER => m_axi_BETA_RUSER,
        RRESP => m_axi_BETA_RRESP,
        BVALID => m_axi_BETA_BVALID,
        BREADY => m_axi_BETA_BREADY,
        BRESP => m_axi_BETA_BRESP,
        BID => m_axi_BETA_BID,
        BUSER => m_axi_BETA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => BETA_ARVALID,
        I_ARREADY => BETA_ARREADY,
        I_ARADDR => BETA_addr_reg_940,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => BETA_RVALID,
        I_RREADY => BETA_RREADY,
        I_RDATA => BETA_RDATA,
        I_RID => BETA_RID,
        I_RUSER => BETA_RUSER,
        I_RRESP => BETA_RRESP,
        I_RLAST => BETA_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BETA_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BETA_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => BETA_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => BETA_BRESP,
        I_BID => BETA_BID,
        I_BUSER => BETA_BUSER);

    bn_GAMMA_m_axi_U : component bn_GAMMA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GAMMA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GAMMA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GAMMA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GAMMA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GAMMA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GAMMA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GAMMA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GAMMA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GAMMA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GAMMA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GAMMA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_GAMMA_AWVALID,
        AWREADY => m_axi_GAMMA_AWREADY,
        AWADDR => m_axi_GAMMA_AWADDR,
        AWID => m_axi_GAMMA_AWID,
        AWLEN => m_axi_GAMMA_AWLEN,
        AWSIZE => m_axi_GAMMA_AWSIZE,
        AWBURST => m_axi_GAMMA_AWBURST,
        AWLOCK => m_axi_GAMMA_AWLOCK,
        AWCACHE => m_axi_GAMMA_AWCACHE,
        AWPROT => m_axi_GAMMA_AWPROT,
        AWQOS => m_axi_GAMMA_AWQOS,
        AWREGION => m_axi_GAMMA_AWREGION,
        AWUSER => m_axi_GAMMA_AWUSER,
        WVALID => m_axi_GAMMA_WVALID,
        WREADY => m_axi_GAMMA_WREADY,
        WDATA => m_axi_GAMMA_WDATA,
        WSTRB => m_axi_GAMMA_WSTRB,
        WLAST => m_axi_GAMMA_WLAST,
        WID => m_axi_GAMMA_WID,
        WUSER => m_axi_GAMMA_WUSER,
        ARVALID => m_axi_GAMMA_ARVALID,
        ARREADY => m_axi_GAMMA_ARREADY,
        ARADDR => m_axi_GAMMA_ARADDR,
        ARID => m_axi_GAMMA_ARID,
        ARLEN => m_axi_GAMMA_ARLEN,
        ARSIZE => m_axi_GAMMA_ARSIZE,
        ARBURST => m_axi_GAMMA_ARBURST,
        ARLOCK => m_axi_GAMMA_ARLOCK,
        ARCACHE => m_axi_GAMMA_ARCACHE,
        ARPROT => m_axi_GAMMA_ARPROT,
        ARQOS => m_axi_GAMMA_ARQOS,
        ARREGION => m_axi_GAMMA_ARREGION,
        ARUSER => m_axi_GAMMA_ARUSER,
        RVALID => m_axi_GAMMA_RVALID,
        RREADY => m_axi_GAMMA_RREADY,
        RDATA => m_axi_GAMMA_RDATA,
        RLAST => m_axi_GAMMA_RLAST,
        RID => m_axi_GAMMA_RID,
        RUSER => m_axi_GAMMA_RUSER,
        RRESP => m_axi_GAMMA_RRESP,
        BVALID => m_axi_GAMMA_BVALID,
        BREADY => m_axi_GAMMA_BREADY,
        BRESP => m_axi_GAMMA_BRESP,
        BID => m_axi_GAMMA_BID,
        BUSER => m_axi_GAMMA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => GAMMA_ARVALID,
        I_ARREADY => GAMMA_ARREADY,
        I_ARADDR => GAMMA_addr_reg_934,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => GAMMA_RVALID,
        I_RREADY => GAMMA_RREADY,
        I_RDATA => GAMMA_RDATA,
        I_RID => GAMMA_RID,
        I_RUSER => GAMMA_RUSER,
        I_RRESP => GAMMA_RRESP,
        I_RLAST => GAMMA_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => GAMMA_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => GAMMA_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => GAMMA_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => GAMMA_BRESP,
        I_BID => GAMMA_BID,
        I_BUSER => GAMMA_BUSER);

    bn_M_M_m_axi_U : component bn_M_M_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_M_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_M_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_M_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_M_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_M_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_M_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_M_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_M_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_M_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_M_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_M_CACHE_VALUE)
    port map (
        AWVALID => m_axi_M_M_AWVALID,
        AWREADY => m_axi_M_M_AWREADY,
        AWADDR => m_axi_M_M_AWADDR,
        AWID => m_axi_M_M_AWID,
        AWLEN => m_axi_M_M_AWLEN,
        AWSIZE => m_axi_M_M_AWSIZE,
        AWBURST => m_axi_M_M_AWBURST,
        AWLOCK => m_axi_M_M_AWLOCK,
        AWCACHE => m_axi_M_M_AWCACHE,
        AWPROT => m_axi_M_M_AWPROT,
        AWQOS => m_axi_M_M_AWQOS,
        AWREGION => m_axi_M_M_AWREGION,
        AWUSER => m_axi_M_M_AWUSER,
        WVALID => m_axi_M_M_WVALID,
        WREADY => m_axi_M_M_WREADY,
        WDATA => m_axi_M_M_WDATA,
        WSTRB => m_axi_M_M_WSTRB,
        WLAST => m_axi_M_M_WLAST,
        WID => m_axi_M_M_WID,
        WUSER => m_axi_M_M_WUSER,
        ARVALID => m_axi_M_M_ARVALID,
        ARREADY => m_axi_M_M_ARREADY,
        ARADDR => m_axi_M_M_ARADDR,
        ARID => m_axi_M_M_ARID,
        ARLEN => m_axi_M_M_ARLEN,
        ARSIZE => m_axi_M_M_ARSIZE,
        ARBURST => m_axi_M_M_ARBURST,
        ARLOCK => m_axi_M_M_ARLOCK,
        ARCACHE => m_axi_M_M_ARCACHE,
        ARPROT => m_axi_M_M_ARPROT,
        ARQOS => m_axi_M_M_ARQOS,
        ARREGION => m_axi_M_M_ARREGION,
        ARUSER => m_axi_M_M_ARUSER,
        RVALID => m_axi_M_M_RVALID,
        RREADY => m_axi_M_M_RREADY,
        RDATA => m_axi_M_M_RDATA,
        RLAST => m_axi_M_M_RLAST,
        RID => m_axi_M_M_RID,
        RUSER => m_axi_M_M_RUSER,
        RRESP => m_axi_M_M_RRESP,
        BVALID => m_axi_M_M_BVALID,
        BREADY => m_axi_M_M_BREADY,
        BRESP => m_axi_M_M_BRESP,
        BID => m_axi_M_M_BID,
        BUSER => m_axi_M_M_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => M_M_ARVALID,
        I_ARREADY => M_M_ARREADY,
        I_ARADDR => M_M_addr_reg_928,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => M_M_RVALID,
        I_RREADY => M_M_RREADY,
        I_RDATA => M_M_RDATA,
        I_RID => M_M_RID,
        I_RUSER => M_M_RUSER,
        I_RRESP => M_M_RRESP,
        I_RLAST => M_M_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => M_M_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => M_M_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => M_M_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => M_M_BRESP,
        I_BID => M_M_BID,
        I_BUSER => M_M_BUSER);

    bn_M_V_m_axi_U : component bn_M_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_M_V_AWVALID,
        AWREADY => m_axi_M_V_AWREADY,
        AWADDR => m_axi_M_V_AWADDR,
        AWID => m_axi_M_V_AWID,
        AWLEN => m_axi_M_V_AWLEN,
        AWSIZE => m_axi_M_V_AWSIZE,
        AWBURST => m_axi_M_V_AWBURST,
        AWLOCK => m_axi_M_V_AWLOCK,
        AWCACHE => m_axi_M_V_AWCACHE,
        AWPROT => m_axi_M_V_AWPROT,
        AWQOS => m_axi_M_V_AWQOS,
        AWREGION => m_axi_M_V_AWREGION,
        AWUSER => m_axi_M_V_AWUSER,
        WVALID => m_axi_M_V_WVALID,
        WREADY => m_axi_M_V_WREADY,
        WDATA => m_axi_M_V_WDATA,
        WSTRB => m_axi_M_V_WSTRB,
        WLAST => m_axi_M_V_WLAST,
        WID => m_axi_M_V_WID,
        WUSER => m_axi_M_V_WUSER,
        ARVALID => m_axi_M_V_ARVALID,
        ARREADY => m_axi_M_V_ARREADY,
        ARADDR => m_axi_M_V_ARADDR,
        ARID => m_axi_M_V_ARID,
        ARLEN => m_axi_M_V_ARLEN,
        ARSIZE => m_axi_M_V_ARSIZE,
        ARBURST => m_axi_M_V_ARBURST,
        ARLOCK => m_axi_M_V_ARLOCK,
        ARCACHE => m_axi_M_V_ARCACHE,
        ARPROT => m_axi_M_V_ARPROT,
        ARQOS => m_axi_M_V_ARQOS,
        ARREGION => m_axi_M_V_ARREGION,
        ARUSER => m_axi_M_V_ARUSER,
        RVALID => m_axi_M_V_RVALID,
        RREADY => m_axi_M_V_RREADY,
        RDATA => m_axi_M_V_RDATA,
        RLAST => m_axi_M_V_RLAST,
        RID => m_axi_M_V_RID,
        RUSER => m_axi_M_V_RUSER,
        RRESP => m_axi_M_V_RRESP,
        BVALID => m_axi_M_V_BVALID,
        BREADY => m_axi_M_V_BREADY,
        BRESP => m_axi_M_V_BRESP,
        BID => m_axi_M_V_BID,
        BUSER => m_axi_M_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => M_V_ARVALID,
        I_ARREADY => M_V_ARREADY,
        I_ARADDR => M_V_addr_reg_922,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => M_V_RVALID,
        I_RREADY => M_V_RREADY,
        I_RDATA => M_V_RDATA,
        I_RID => M_V_RID,
        I_RUSER => M_V_RUSER,
        I_RRESP => M_V_RRESP,
        I_RLAST => M_V_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => M_V_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => M_V_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => M_V_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => M_V_BRESP,
        I_BID => M_V_BID,
        I_BUSER => M_V_BUSER);

    bn_OUT_r_m_axi_U : component bn_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => OUT_addr_reg_916,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_80,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => tmp_V_reg_1064,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    grp_sqrt_fixed_16_6_s_fu_303 : component sqrt_fixed_16_6_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x_V => tmp_num_V_reg_967,
        ap_return => grp_sqrt_fixed_16_6_s_fu_303_ap_return,
        ap_ce => grp_sqrt_fixed_16_6_s_fu_303_ap_ce);

    bn_sdiv_27ns_14nsbkb_U2 : component bn_sdiv_27ns_14nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 27,
        din1_WIDTH => 14,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_784_p0,
        din1 => grp_fu_784_p1,
        ce => grp_fu_784_ce,
        dout => grp_fu_784_p2);

    bn_am_submul_16s_cud_U3 : component bn_am_submul_16s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 33)
    port map (
        din0 => p_Val2_12_reg_972,
        din1 => p_Val2_15_reg_982,
        din2 => p_Val2_25_reg_977,
        dout => grp_fu_903_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                elsif (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_fu_428_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_292 <= i_fu_434_p2;
            elsif (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_reg_292 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    BETA_addr_reg_940(30 downto 0) <= empty_29_fu_398_p1(32 - 1 downto 0)(30 downto 0);
                    GAMMA_addr_reg_934(30 downto 0) <= empty_28_fu_378_p1(32 - 1 downto 0)(30 downto 0);
                    IN_addr_reg_946(30 downto 0) <= empty_30_fu_418_p1(32 - 1 downto 0)(30 downto 0);
                    M_M_addr_reg_928(30 downto 0) <= empty_27_fu_358_p1(32 - 1 downto 0)(30 downto 0);
                    M_V_addr_reg_922(30 downto 0) <= empty_26_fu_338_p1(32 - 1 downto 0)(30 downto 0);
                    OUT_addr_reg_916(30 downto 0) <= empty_fu_318_p1(32 - 1 downto 0)(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln330_reg_952 <= icmp_ln330_fu_428_p2;
                icmp_ln330_reg_952_pp0_iter1_reg <= icmp_ln330_reg_952;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln330_reg_952_pp0_iter10_reg <= icmp_ln330_reg_952_pp0_iter9_reg;
                icmp_ln330_reg_952_pp0_iter11_reg <= icmp_ln330_reg_952_pp0_iter10_reg;
                icmp_ln330_reg_952_pp0_iter12_reg <= icmp_ln330_reg_952_pp0_iter11_reg;
                icmp_ln330_reg_952_pp0_iter13_reg <= icmp_ln330_reg_952_pp0_iter12_reg;
                icmp_ln330_reg_952_pp0_iter14_reg <= icmp_ln330_reg_952_pp0_iter13_reg;
                icmp_ln330_reg_952_pp0_iter15_reg <= icmp_ln330_reg_952_pp0_iter14_reg;
                icmp_ln330_reg_952_pp0_iter16_reg <= icmp_ln330_reg_952_pp0_iter15_reg;
                icmp_ln330_reg_952_pp0_iter17_reg <= icmp_ln330_reg_952_pp0_iter16_reg;
                icmp_ln330_reg_952_pp0_iter18_reg <= icmp_ln330_reg_952_pp0_iter17_reg;
                icmp_ln330_reg_952_pp0_iter19_reg <= icmp_ln330_reg_952_pp0_iter18_reg;
                icmp_ln330_reg_952_pp0_iter20_reg <= icmp_ln330_reg_952_pp0_iter19_reg;
                icmp_ln330_reg_952_pp0_iter21_reg <= icmp_ln330_reg_952_pp0_iter20_reg;
                icmp_ln330_reg_952_pp0_iter22_reg <= icmp_ln330_reg_952_pp0_iter21_reg;
                icmp_ln330_reg_952_pp0_iter23_reg <= icmp_ln330_reg_952_pp0_iter22_reg;
                icmp_ln330_reg_952_pp0_iter24_reg <= icmp_ln330_reg_952_pp0_iter23_reg;
                icmp_ln330_reg_952_pp0_iter25_reg <= icmp_ln330_reg_952_pp0_iter24_reg;
                icmp_ln330_reg_952_pp0_iter26_reg <= icmp_ln330_reg_952_pp0_iter25_reg;
                icmp_ln330_reg_952_pp0_iter27_reg <= icmp_ln330_reg_952_pp0_iter26_reg;
                icmp_ln330_reg_952_pp0_iter28_reg <= icmp_ln330_reg_952_pp0_iter27_reg;
                icmp_ln330_reg_952_pp0_iter29_reg <= icmp_ln330_reg_952_pp0_iter28_reg;
                icmp_ln330_reg_952_pp0_iter2_reg <= icmp_ln330_reg_952_pp0_iter1_reg;
                icmp_ln330_reg_952_pp0_iter30_reg <= icmp_ln330_reg_952_pp0_iter29_reg;
                icmp_ln330_reg_952_pp0_iter31_reg <= icmp_ln330_reg_952_pp0_iter30_reg;
                icmp_ln330_reg_952_pp0_iter32_reg <= icmp_ln330_reg_952_pp0_iter31_reg;
                icmp_ln330_reg_952_pp0_iter33_reg <= icmp_ln330_reg_952_pp0_iter32_reg;
                icmp_ln330_reg_952_pp0_iter34_reg <= icmp_ln330_reg_952_pp0_iter33_reg;
                icmp_ln330_reg_952_pp0_iter35_reg <= icmp_ln330_reg_952_pp0_iter34_reg;
                icmp_ln330_reg_952_pp0_iter36_reg <= icmp_ln330_reg_952_pp0_iter35_reg;
                icmp_ln330_reg_952_pp0_iter37_reg <= icmp_ln330_reg_952_pp0_iter36_reg;
                icmp_ln330_reg_952_pp0_iter38_reg <= icmp_ln330_reg_952_pp0_iter37_reg;
                icmp_ln330_reg_952_pp0_iter39_reg <= icmp_ln330_reg_952_pp0_iter38_reg;
                icmp_ln330_reg_952_pp0_iter3_reg <= icmp_ln330_reg_952_pp0_iter2_reg;
                icmp_ln330_reg_952_pp0_iter40_reg <= icmp_ln330_reg_952_pp0_iter39_reg;
                icmp_ln330_reg_952_pp0_iter41_reg <= icmp_ln330_reg_952_pp0_iter40_reg;
                icmp_ln330_reg_952_pp0_iter42_reg <= icmp_ln330_reg_952_pp0_iter41_reg;
                icmp_ln330_reg_952_pp0_iter43_reg <= icmp_ln330_reg_952_pp0_iter42_reg;
                icmp_ln330_reg_952_pp0_iter4_reg <= icmp_ln330_reg_952_pp0_iter3_reg;
                icmp_ln330_reg_952_pp0_iter5_reg <= icmp_ln330_reg_952_pp0_iter4_reg;
                icmp_ln330_reg_952_pp0_iter6_reg <= icmp_ln330_reg_952_pp0_iter5_reg;
                icmp_ln330_reg_952_pp0_iter7_reg <= icmp_ln330_reg_952_pp0_iter6_reg;
                icmp_ln330_reg_952_pp0_iter8_reg <= icmp_ln330_reg_952_pp0_iter7_reg;
                icmp_ln330_reg_952_pp0_iter9_reg <= icmp_ln330_reg_952_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0))) then
                norm_V_reg_1030 <= norm_V_fu_753_p3;
                p_Val2_20_reg_1020 <= BETA_RDATA;
                x_sqrt_V_reg_1025 <= grp_sqrt_fixed_16_6_s_fu_303_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter41_reg = ap_const_lv1_0))) then
                overflow_1_reg_1051 <= overflow_1_fu_838_p2;
                p_Val2_23_reg_1045 <= p_Val2_23_fu_798_p1;
                underflow_2_reg_1057 <= underflow_2_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter9_reg = ap_const_lv1_0))) then
                p_Result_1_reg_1014 <= grp_fu_903_p3(32 downto 26);
                p_Result_6_reg_993 <= grp_fu_903_p3(31 downto 31);
                p_Result_s_reg_1009 <= grp_fu_903_p3(32 downto 27);
                p_Val2_17_reg_999 <= grp_fu_903_p3(25 downto 10);
                tmp_35_reg_1004 <= grp_fu_903_p3(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0))) then
                p_Val2_12_reg_972 <= IN_r_RDATA;
                p_Val2_15_reg_982 <= M_M_RDATA;
                p_Val2_25_reg_977 <= GAMMA_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_s_reg_961 <= M_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                r_V_3_reg_987 <= grp_fu_903_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter42_reg = ap_const_lv1_0))) then
                tmp_V_reg_1064 <= tmp_V_fu_895_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_num_V_reg_967 <= tmp_num_V_fu_516_p3;
            end if;
        end if;
    end process;
    OUT_addr_reg_916(31) <= '0';
    M_V_addr_reg_922(31) <= '0';
    M_M_addr_reg_928(31) <= '0';
    GAMMA_addr_reg_934(31) <= '0';
    BETA_addr_reg_940(31) <= '0';
    IN_addr_reg_946(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_enable_reg_pp0_iter44, ap_CS_fsm_state58, OUT_r_AWREADY, OUT_r_BVALID, icmp_ln330_fu_428_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter43, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln330_fu_428_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter44 = ap_const_logic_1) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln330_fu_428_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter44 = ap_const_logic_1) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    BETA_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            BETA_ARVALID <= ap_const_logic_1;
        else 
            BETA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    BETA_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln330_reg_952_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            BETA_RREADY <= ap_const_logic_1;
        else 
            BETA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    BETA_blk_n_AR_assign_proc : process(m_axi_BETA_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            BETA_blk_n_AR <= m_axi_BETA_ARREADY;
        else 
            BETA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BETA_blk_n_R_assign_proc : process(m_axi_BETA_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11, icmp_ln330_reg_952_pp0_iter10_reg)
    begin
        if (((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            BETA_blk_n_R <= m_axi_BETA_RVALID;
        else 
            BETA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    GAMMA_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            GAMMA_ARVALID <= ap_const_logic_1;
        else 
            GAMMA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    GAMMA_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            GAMMA_RREADY <= ap_const_logic_1;
        else 
            GAMMA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    GAMMA_blk_n_AR_assign_proc : process(m_axi_GAMMA_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            GAMMA_blk_n_AR <= m_axi_GAMMA_ARREADY;
        else 
            GAMMA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    GAMMA_blk_n_R_assign_proc : process(m_axi_GAMMA_RVALID, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, icmp_ln330_reg_952_pp0_iter8_reg)
    begin
        if (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            GAMMA_blk_n_R <= m_axi_GAMMA_RVALID;
        else 
            GAMMA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            IN_r_ARVALID <= ap_const_logic_1;
        else 
            IN_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            IN_r_RREADY <= ap_const_logic_1;
        else 
            IN_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_blk_n_AR_assign_proc : process(m_axi_IN_r_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IN_r_blk_n_AR <= m_axi_IN_r_ARREADY;
        else 
            IN_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_blk_n_R_assign_proc : process(m_axi_IN_r_RVALID, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, icmp_ln330_reg_952_pp0_iter8_reg)
    begin
        if (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            IN_r_blk_n_R <= m_axi_IN_r_RVALID;
        else 
            IN_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    M_M_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            M_M_ARVALID <= ap_const_logic_1;
        else 
            M_M_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    M_M_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            M_M_RREADY <= ap_const_logic_1;
        else 
            M_M_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    M_M_blk_n_AR_assign_proc : process(m_axi_M_M_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            M_M_blk_n_AR <= m_axi_M_M_ARREADY;
        else 
            M_M_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    M_M_blk_n_R_assign_proc : process(m_axi_M_M_RVALID, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, icmp_ln330_reg_952_pp0_iter8_reg)
    begin
        if (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            M_M_blk_n_R <= m_axi_M_M_RVALID;
        else 
            M_M_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    M_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_io))) then 
            M_V_ARVALID <= ap_const_logic_1;
        else 
            M_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    M_V_RREADY_assign_proc : process(icmp_ln330_reg_952, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_V_RREADY <= ap_const_logic_1;
        else 
            M_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    M_V_blk_n_AR_assign_proc : process(m_axi_M_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            M_V_blk_n_AR <= m_axi_M_V_ARREADY;
        else 
            M_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    M_V_blk_n_R_assign_proc : process(m_axi_M_V_RVALID, ap_block_pp0_stage0, icmp_ln330_reg_952, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            M_V_blk_n_R <= m_axi_M_V_RVALID;
        else 
            M_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state8, OUT_r_AWREADY)
    begin
        if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_CS_fsm_state58, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter44, icmp_ln330_reg_952_pp0_iter43_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln330_reg_952_pp0_iter43_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter44, icmp_ln330_reg_952_pp0_iter43_reg)
    begin
        if (((icmp_ln330_reg_952_pp0_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    Range1_all_ones_fu_622_p2 <= "1" when (p_Result_1_reg_1014 = ap_const_lv7_7F) else "0";
    Range1_all_zeros_fu_627_p2 <= "1" when (p_Result_1_reg_1014 = ap_const_lv7_0) else "0";
    Range2_all_ones_fu_617_p2 <= "1" when (p_Result_s_reg_1009 = ap_const_lv6_3F) else "0";
    and_ln779_fu_653_p2 <= (xor_ln779_fu_647_p2 and Range2_all_ones_fu_617_p2);
    and_ln781_fu_667_p2 <= (carry_1_fu_603_p2 and Range1_all_ones_fu_622_p2);
    and_ln786_fu_696_p2 <= (p_Result_8_fu_609_p3 and deleted_ones_fu_659_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state58 <= ap_CS_fsm(13);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952, icmp_ln330_reg_952_pp0_iter8_reg, ap_enable_reg_pp0_iter11, icmp_ln330_reg_952_pp0_iter10_reg, ap_enable_reg_pp0_iter1, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952, icmp_ln330_reg_952_pp0_iter8_reg, ap_enable_reg_pp0_iter11, icmp_ln330_reg_952_pp0_iter10_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter44, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, ap_block_state53_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1)) or ((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp159_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952, icmp_ln330_reg_952_pp0_iter8_reg, ap_enable_reg_pp0_iter11, icmp_ln330_reg_952_pp0_iter10_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter44, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, ap_block_state53_io)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp159 <= (((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1)) or ((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln330_reg_952, icmp_ln330_reg_952_pp0_iter8_reg, ap_enable_reg_pp0_iter11, icmp_ln330_reg_952_pp0_iter10_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter44, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, ap_block_state53_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1)) or ((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln330_reg_952, M_V_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID));
    end process;


    ap_block_state10_pp0_stage0_iter1_ignore_call20_assign_proc : process(icmp_ln330_reg_952, M_V_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1_ignore_call20 <= ((icmp_ln330_reg_952 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter3_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp0_stage0_iter9_assign_proc : process(icmp_ln330_reg_952_pp0_iter8_reg, IN_r_RVALID, GAMMA_RVALID, M_M_RVALID)
    begin
                ap_block_state18_pp0_stage0_iter9 <= (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state18_pp0_stage0_iter9_ignore_call20_assign_proc : process(icmp_ln330_reg_952_pp0_iter8_reg, IN_r_RVALID, GAMMA_RVALID, M_M_RVALID)
    begin
                ap_block_state18_pp0_stage0_iter9_ignore_call20 <= (((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln330_reg_952_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state19_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter10_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter11_assign_proc : process(icmp_ln330_reg_952_pp0_iter10_reg, BETA_RVALID)
    begin
                ap_block_state20_pp0_stage0_iter11 <= ((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID));
    end process;


    ap_block_state20_pp0_stage0_iter11_ignore_call20_assign_proc : process(icmp_ln330_reg_952_pp0_iter10_reg, BETA_RVALID)
    begin
                ap_block_state20_pp0_stage0_iter11_ignore_call20 <= ((icmp_ln330_reg_952_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID));
    end process;

        ap_block_state21_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter12_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter13_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter14_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter15_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter16_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter17_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter18_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter19_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter20_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(IN_r_ARREADY, BETA_ARREADY, GAMMA_ARREADY, M_M_ARREADY, M_V_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = M_V_ARREADY) or (ap_const_logic_0 = M_M_ARREADY) or (ap_const_logic_0 = GAMMA_ARREADY) or (ap_const_logic_0 = BETA_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;

        ap_block_state30_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter21_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter22_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter23_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter24_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter25_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter26_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter27_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter28_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter29_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter30_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter31_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter32_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter33_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter34_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter35_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter36_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter37_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter38_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter39_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter40_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter41_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter42_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter43_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_io_assign_proc : process(icmp_ln330_reg_952_pp0_iter43_reg, OUT_r_WREADY)
    begin
                ap_block_state53_io <= ((icmp_ln330_reg_952_pp0_iter43_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_WREADY));
    end process;

        ap_block_state53_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter44_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0_ignore_call20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln330_fu_428_p2)
    begin
        if ((icmp_ln330_fu_428_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state58, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state58, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    beta_V3_fu_388_p4 <= beta_V(31 downto 1);
    carry_1_fu_603_p2 <= (xor_ln416_fu_597_p2 and p_Result_7_fu_574_p3);
    deleted_ones_fu_659_p3 <= 
        and_ln779_fu_653_p2 when (carry_1_fu_603_p2(0) = '1') else 
        Range1_all_ones_fu_622_p2;
    deleted_zeros_fu_632_p3 <= 
        Range1_all_ones_fu_622_p2 when (carry_1_fu_603_p2(0) = '1') else 
        Range1_all_zeros_fu_627_p2;
    empty_26_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(moving_variance_V9_fu_328_p4),64));
    empty_27_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(moving_mean_V7_fu_348_p4),64));
    empty_28_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gamma_V5_fu_368_p4),64));
    empty_29_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(beta_V3_fu_388_p4),64));
    empty_30_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_V1_fu_408_p4),64));
    empty_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_V1_fu_308_p4),64));
    gamma_V5_fu_368_p4 <= gamma_V(31 downto 1);

    grp_fu_784_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_784_ce <= ap_const_logic_1;
        else 
            grp_fu_784_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_784_p0 <= (ret_V_11_fu_767_p2 & ap_const_lv10_0);
    grp_fu_784_p1 <= grp_fu_784_p10(14 - 1 downto 0);
    grp_fu_784_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_sqrt_V_reg_1025),27));

    grp_sqrt_fixed_16_6_s_fu_303_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp159)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp159))) then 
            grp_sqrt_fixed_16_6_s_fu_303_ap_ce <= ap_const_logic_1;
        else 
            grp_sqrt_fixed_16_6_s_fu_303_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_434_p2 <= std_logic_vector(unsigned(i_0_reg_292) + unsigned(ap_const_lv8_1));
    icmp_ln330_fu_428_p2 <= "1" when (i_0_reg_292 = ap_const_lv8_80) else "0";
    icmp_ln785_fu_820_p2 <= "0" when (tmp_1_fu_810_p4 = ap_const_lv11_0) else "1";
    icmp_ln786_fu_850_p2 <= "0" when (tmp_1_fu_810_p4 = ap_const_lv11_7FF) else "1";
    in_V1_fu_408_p4 <= in_V(31 downto 1);
        lhs_V_2_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(norm_V_reg_1030),17));

        lhs_V_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_961),17));

    moving_mean_V7_fu_348_p4 <= moving_mean_V(31 downto 1);
    moving_variance_V9_fu_328_p4 <= moving_variance_V(31 downto 1);
    norm_V_fu_753_p3 <= 
        select_ln340_1_fu_737_p3 when (or_ln340_3_fu_731_p2(0) = '1') else 
        select_ln388_1_fu_745_p3;
    or_ln340_1_fu_719_p2 <= (underflow_1_fu_714_p2 or overflow_fu_690_p2);
    or_ln340_2_fu_725_p2 <= (xor_ln785_1_fu_685_p2 or and_ln786_fu_696_p2);
    or_ln340_3_fu_731_p2 <= (or_ln340_2_fu_725_p2 or and_ln781_fu_667_p2);
    or_ln340_4_fu_868_p2 <= (underflow_2_reg_1057 or overflow_1_reg_1051);
    or_ln340_5_fu_877_p2 <= (xor_ln340_2_fu_872_p2 or overflow_1_reg_1051);
    or_ln340_fu_494_p2 <= (xor_ln340_fu_488_p2 or p_Result_5_fu_462_p3);
    or_ln785_1_fu_826_p2 <= (p_Result_10_fu_802_p3 or icmp_ln785_fu_820_p2);
    or_ln785_fu_679_p2 <= (xor_ln785_fu_673_p2 or p_Result_8_fu_609_p3);
    or_ln786_1_fu_702_p2 <= (and_ln786_fu_696_p2 or and_ln781_fu_667_p2);
    or_ln786_fu_856_p2 <= (xor_ln786_2_fu_844_p2 or icmp_ln786_fu_850_p2);
    out_V1_fu_308_p4 <= out_V(31 downto 1);
    overflow_1_fu_838_p2 <= (xor_ln785_2_fu_832_p2 and or_ln785_1_fu_826_p2);
    overflow_fu_690_p2 <= (xor_ln785_1_fu_685_p2 and or_ln785_fu_679_p2);
    p_Result_10_fu_802_p3 <= grp_fu_784_p2(15 downto 15);
    p_Result_4_fu_449_p3 <= ret_V_10_fu_443_p2(16 downto 16);
    p_Result_5_fu_462_p3 <= p_Val2_10_fu_457_p2(15 downto 15);
    p_Result_7_fu_574_p3 <= r_V_3_reg_987(25 downto 25);
    p_Result_8_fu_609_p3 <= p_Val2_18_fu_584_p2(15 downto 15);
    p_Result_9_fu_790_p3 <= grp_fu_784_p2(26 downto 26);
    p_Val2_10_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(p_Val2_s_reg_961));
    p_Val2_18_fu_584_p2 <= std_logic_vector(unsigned(zext_ln415_fu_581_p1) + unsigned(p_Val2_17_reg_999));
    p_Val2_23_fu_798_p1 <= grp_fu_784_p2(16 - 1 downto 0);
    ret_V_10_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(lhs_V_fu_440_p1));
    ret_V_11_fu_767_p2 <= std_logic_vector(signed(lhs_V_2_fu_761_p1) + signed(rhs_V_1_fu_764_p1));
        rhs_V_1_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_reg_1020),17));

    select_ln340_1_fu_737_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_1_fu_719_p2(0) = '1') else 
        p_Val2_18_fu_584_p2;
    select_ln340_2_fu_882_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_4_fu_868_p2(0) = '1') else 
        p_Val2_23_reg_1045;
    select_ln340_fu_500_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_1_fu_482_p2(0) = '1') else 
        p_Val2_10_fu_457_p2;
    select_ln388_1_fu_745_p3 <= 
        ap_const_lv16_8000 when (underflow_1_fu_714_p2(0) = '1') else 
        p_Val2_18_fu_584_p2;
    select_ln388_2_fu_889_p3 <= 
        ap_const_lv16_8000 when (underflow_2_reg_1057(0) = '1') else 
        p_Val2_23_reg_1045;
    select_ln388_fu_508_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_476_p2(0) = '1') else 
        p_Val2_10_fu_457_p2;
    tmp_1_fu_810_p4 <= grp_fu_784_p2(26 downto 16);
    tmp_36_fu_589_p3 <= p_Val2_18_fu_584_p2(15 downto 15);
    tmp_38_fu_640_p3 <= r_V_3_reg_987(26 downto 26);
    tmp_V_fu_895_p3 <= 
        select_ln340_2_fu_882_p3 when (or_ln340_5_fu_877_p2(0) = '1') else 
        select_ln388_2_fu_889_p3;
    tmp_num_V_fu_516_p3 <= 
        select_ln340_fu_500_p3 when (or_ln340_fu_494_p2(0) = '1') else 
        select_ln388_fu_508_p3;
    underflow_1_fu_714_p2 <= (xor_ln786_1_fu_708_p2 and p_Result_6_reg_993);
    underflow_2_fu_862_p2 <= (p_Result_9_fu_790_p3 and or_ln786_fu_856_p2);
    underflow_fu_476_p2 <= (xor_ln786_fu_470_p2 and p_Result_4_fu_449_p3);
    xor_ln340_1_fu_482_p2 <= (p_Result_5_fu_462_p3 xor p_Result_4_fu_449_p3);
    xor_ln340_2_fu_872_p2 <= (underflow_2_reg_1057 xor ap_const_lv1_1);
    xor_ln340_fu_488_p2 <= (p_Result_4_fu_449_p3 xor ap_const_lv1_1);
    xor_ln416_fu_597_p2 <= (tmp_36_fu_589_p3 xor ap_const_lv1_1);
    xor_ln779_fu_647_p2 <= (tmp_38_fu_640_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_685_p2 <= (p_Result_6_reg_993 xor ap_const_lv1_1);
    xor_ln785_2_fu_832_p2 <= (p_Result_9_fu_790_p3 xor ap_const_lv1_1);
    xor_ln785_fu_673_p2 <= (deleted_zeros_fu_632_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_708_p2 <= (or_ln786_1_fu_702_p2 xor ap_const_lv1_1);
    xor_ln786_2_fu_844_p2 <= (p_Result_10_fu_802_p3 xor ap_const_lv1_1);
    xor_ln786_fu_470_p2 <= (p_Result_5_fu_462_p3 xor ap_const_lv1_1);
    zext_ln415_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_reg_1004),16));
end behav;
