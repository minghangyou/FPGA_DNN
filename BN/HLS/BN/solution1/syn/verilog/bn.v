// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=7884,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=1,HLS_SYN_FF=5563,HLS_SYN_LUT=11944,HLS_VERSION=2019_1}" *)

module bn (
        ap_clk,
        ap_rst_n,
        m_axi_IN_r_AWVALID,
        m_axi_IN_r_AWREADY,
        m_axi_IN_r_AWADDR,
        m_axi_IN_r_AWID,
        m_axi_IN_r_AWLEN,
        m_axi_IN_r_AWSIZE,
        m_axi_IN_r_AWBURST,
        m_axi_IN_r_AWLOCK,
        m_axi_IN_r_AWCACHE,
        m_axi_IN_r_AWPROT,
        m_axi_IN_r_AWQOS,
        m_axi_IN_r_AWREGION,
        m_axi_IN_r_AWUSER,
        m_axi_IN_r_WVALID,
        m_axi_IN_r_WREADY,
        m_axi_IN_r_WDATA,
        m_axi_IN_r_WSTRB,
        m_axi_IN_r_WLAST,
        m_axi_IN_r_WID,
        m_axi_IN_r_WUSER,
        m_axi_IN_r_ARVALID,
        m_axi_IN_r_ARREADY,
        m_axi_IN_r_ARADDR,
        m_axi_IN_r_ARID,
        m_axi_IN_r_ARLEN,
        m_axi_IN_r_ARSIZE,
        m_axi_IN_r_ARBURST,
        m_axi_IN_r_ARLOCK,
        m_axi_IN_r_ARCACHE,
        m_axi_IN_r_ARPROT,
        m_axi_IN_r_ARQOS,
        m_axi_IN_r_ARREGION,
        m_axi_IN_r_ARUSER,
        m_axi_IN_r_RVALID,
        m_axi_IN_r_RREADY,
        m_axi_IN_r_RDATA,
        m_axi_IN_r_RLAST,
        m_axi_IN_r_RID,
        m_axi_IN_r_RUSER,
        m_axi_IN_r_RRESP,
        m_axi_IN_r_BVALID,
        m_axi_IN_r_BREADY,
        m_axi_IN_r_BRESP,
        m_axi_IN_r_BID,
        m_axi_IN_r_BUSER,
        m_axi_BETA_AWVALID,
        m_axi_BETA_AWREADY,
        m_axi_BETA_AWADDR,
        m_axi_BETA_AWID,
        m_axi_BETA_AWLEN,
        m_axi_BETA_AWSIZE,
        m_axi_BETA_AWBURST,
        m_axi_BETA_AWLOCK,
        m_axi_BETA_AWCACHE,
        m_axi_BETA_AWPROT,
        m_axi_BETA_AWQOS,
        m_axi_BETA_AWREGION,
        m_axi_BETA_AWUSER,
        m_axi_BETA_WVALID,
        m_axi_BETA_WREADY,
        m_axi_BETA_WDATA,
        m_axi_BETA_WSTRB,
        m_axi_BETA_WLAST,
        m_axi_BETA_WID,
        m_axi_BETA_WUSER,
        m_axi_BETA_ARVALID,
        m_axi_BETA_ARREADY,
        m_axi_BETA_ARADDR,
        m_axi_BETA_ARID,
        m_axi_BETA_ARLEN,
        m_axi_BETA_ARSIZE,
        m_axi_BETA_ARBURST,
        m_axi_BETA_ARLOCK,
        m_axi_BETA_ARCACHE,
        m_axi_BETA_ARPROT,
        m_axi_BETA_ARQOS,
        m_axi_BETA_ARREGION,
        m_axi_BETA_ARUSER,
        m_axi_BETA_RVALID,
        m_axi_BETA_RREADY,
        m_axi_BETA_RDATA,
        m_axi_BETA_RLAST,
        m_axi_BETA_RID,
        m_axi_BETA_RUSER,
        m_axi_BETA_RRESP,
        m_axi_BETA_BVALID,
        m_axi_BETA_BREADY,
        m_axi_BETA_BRESP,
        m_axi_BETA_BID,
        m_axi_BETA_BUSER,
        m_axi_GAMMA_AWVALID,
        m_axi_GAMMA_AWREADY,
        m_axi_GAMMA_AWADDR,
        m_axi_GAMMA_AWID,
        m_axi_GAMMA_AWLEN,
        m_axi_GAMMA_AWSIZE,
        m_axi_GAMMA_AWBURST,
        m_axi_GAMMA_AWLOCK,
        m_axi_GAMMA_AWCACHE,
        m_axi_GAMMA_AWPROT,
        m_axi_GAMMA_AWQOS,
        m_axi_GAMMA_AWREGION,
        m_axi_GAMMA_AWUSER,
        m_axi_GAMMA_WVALID,
        m_axi_GAMMA_WREADY,
        m_axi_GAMMA_WDATA,
        m_axi_GAMMA_WSTRB,
        m_axi_GAMMA_WLAST,
        m_axi_GAMMA_WID,
        m_axi_GAMMA_WUSER,
        m_axi_GAMMA_ARVALID,
        m_axi_GAMMA_ARREADY,
        m_axi_GAMMA_ARADDR,
        m_axi_GAMMA_ARID,
        m_axi_GAMMA_ARLEN,
        m_axi_GAMMA_ARSIZE,
        m_axi_GAMMA_ARBURST,
        m_axi_GAMMA_ARLOCK,
        m_axi_GAMMA_ARCACHE,
        m_axi_GAMMA_ARPROT,
        m_axi_GAMMA_ARQOS,
        m_axi_GAMMA_ARREGION,
        m_axi_GAMMA_ARUSER,
        m_axi_GAMMA_RVALID,
        m_axi_GAMMA_RREADY,
        m_axi_GAMMA_RDATA,
        m_axi_GAMMA_RLAST,
        m_axi_GAMMA_RID,
        m_axi_GAMMA_RUSER,
        m_axi_GAMMA_RRESP,
        m_axi_GAMMA_BVALID,
        m_axi_GAMMA_BREADY,
        m_axi_GAMMA_BRESP,
        m_axi_GAMMA_BID,
        m_axi_GAMMA_BUSER,
        m_axi_M_M_AWVALID,
        m_axi_M_M_AWREADY,
        m_axi_M_M_AWADDR,
        m_axi_M_M_AWID,
        m_axi_M_M_AWLEN,
        m_axi_M_M_AWSIZE,
        m_axi_M_M_AWBURST,
        m_axi_M_M_AWLOCK,
        m_axi_M_M_AWCACHE,
        m_axi_M_M_AWPROT,
        m_axi_M_M_AWQOS,
        m_axi_M_M_AWREGION,
        m_axi_M_M_AWUSER,
        m_axi_M_M_WVALID,
        m_axi_M_M_WREADY,
        m_axi_M_M_WDATA,
        m_axi_M_M_WSTRB,
        m_axi_M_M_WLAST,
        m_axi_M_M_WID,
        m_axi_M_M_WUSER,
        m_axi_M_M_ARVALID,
        m_axi_M_M_ARREADY,
        m_axi_M_M_ARADDR,
        m_axi_M_M_ARID,
        m_axi_M_M_ARLEN,
        m_axi_M_M_ARSIZE,
        m_axi_M_M_ARBURST,
        m_axi_M_M_ARLOCK,
        m_axi_M_M_ARCACHE,
        m_axi_M_M_ARPROT,
        m_axi_M_M_ARQOS,
        m_axi_M_M_ARREGION,
        m_axi_M_M_ARUSER,
        m_axi_M_M_RVALID,
        m_axi_M_M_RREADY,
        m_axi_M_M_RDATA,
        m_axi_M_M_RLAST,
        m_axi_M_M_RID,
        m_axi_M_M_RUSER,
        m_axi_M_M_RRESP,
        m_axi_M_M_BVALID,
        m_axi_M_M_BREADY,
        m_axi_M_M_BRESP,
        m_axi_M_M_BID,
        m_axi_M_M_BUSER,
        m_axi_M_V_AWVALID,
        m_axi_M_V_AWREADY,
        m_axi_M_V_AWADDR,
        m_axi_M_V_AWID,
        m_axi_M_V_AWLEN,
        m_axi_M_V_AWSIZE,
        m_axi_M_V_AWBURST,
        m_axi_M_V_AWLOCK,
        m_axi_M_V_AWCACHE,
        m_axi_M_V_AWPROT,
        m_axi_M_V_AWQOS,
        m_axi_M_V_AWREGION,
        m_axi_M_V_AWUSER,
        m_axi_M_V_WVALID,
        m_axi_M_V_WREADY,
        m_axi_M_V_WDATA,
        m_axi_M_V_WSTRB,
        m_axi_M_V_WLAST,
        m_axi_M_V_WID,
        m_axi_M_V_WUSER,
        m_axi_M_V_ARVALID,
        m_axi_M_V_ARREADY,
        m_axi_M_V_ARADDR,
        m_axi_M_V_ARID,
        m_axi_M_V_ARLEN,
        m_axi_M_V_ARSIZE,
        m_axi_M_V_ARBURST,
        m_axi_M_V_ARLOCK,
        m_axi_M_V_ARCACHE,
        m_axi_M_V_ARPROT,
        m_axi_M_V_ARQOS,
        m_axi_M_V_ARREGION,
        m_axi_M_V_ARUSER,
        m_axi_M_V_RVALID,
        m_axi_M_V_RREADY,
        m_axi_M_V_RDATA,
        m_axi_M_V_RLAST,
        m_axi_M_V_RID,
        m_axi_M_V_RUSER,
        m_axi_M_V_RRESP,
        m_axi_M_V_BVALID,
        m_axi_M_V_BREADY,
        m_axi_M_V_BRESP,
        m_axi_M_V_BID,
        m_axi_M_V_BUSER,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_state3 = 74'd4;
parameter    ap_ST_fsm_state4 = 74'd8;
parameter    ap_ST_fsm_state5 = 74'd16;
parameter    ap_ST_fsm_state6 = 74'd32;
parameter    ap_ST_fsm_state7 = 74'd64;
parameter    ap_ST_fsm_state8 = 74'd128;
parameter    ap_ST_fsm_state9 = 74'd256;
parameter    ap_ST_fsm_state10 = 74'd512;
parameter    ap_ST_fsm_state11 = 74'd1024;
parameter    ap_ST_fsm_state12 = 74'd2048;
parameter    ap_ST_fsm_state13 = 74'd4096;
parameter    ap_ST_fsm_state14 = 74'd8192;
parameter    ap_ST_fsm_state15 = 74'd16384;
parameter    ap_ST_fsm_state16 = 74'd32768;
parameter    ap_ST_fsm_state17 = 74'd65536;
parameter    ap_ST_fsm_state18 = 74'd131072;
parameter    ap_ST_fsm_state19 = 74'd262144;
parameter    ap_ST_fsm_state20 = 74'd524288;
parameter    ap_ST_fsm_state21 = 74'd1048576;
parameter    ap_ST_fsm_state22 = 74'd2097152;
parameter    ap_ST_fsm_state23 = 74'd4194304;
parameter    ap_ST_fsm_state24 = 74'd8388608;
parameter    ap_ST_fsm_state25 = 74'd16777216;
parameter    ap_ST_fsm_state26 = 74'd33554432;
parameter    ap_ST_fsm_state27 = 74'd67108864;
parameter    ap_ST_fsm_state28 = 74'd134217728;
parameter    ap_ST_fsm_state29 = 74'd268435456;
parameter    ap_ST_fsm_state30 = 74'd536870912;
parameter    ap_ST_fsm_state31 = 74'd1073741824;
parameter    ap_ST_fsm_state32 = 74'd2147483648;
parameter    ap_ST_fsm_state33 = 74'd4294967296;
parameter    ap_ST_fsm_state34 = 74'd8589934592;
parameter    ap_ST_fsm_state35 = 74'd17179869184;
parameter    ap_ST_fsm_state36 = 74'd34359738368;
parameter    ap_ST_fsm_state37 = 74'd68719476736;
parameter    ap_ST_fsm_state38 = 74'd137438953472;
parameter    ap_ST_fsm_state39 = 74'd274877906944;
parameter    ap_ST_fsm_state40 = 74'd549755813888;
parameter    ap_ST_fsm_state41 = 74'd1099511627776;
parameter    ap_ST_fsm_state42 = 74'd2199023255552;
parameter    ap_ST_fsm_state43 = 74'd4398046511104;
parameter    ap_ST_fsm_state44 = 74'd8796093022208;
parameter    ap_ST_fsm_state45 = 74'd17592186044416;
parameter    ap_ST_fsm_state46 = 74'd35184372088832;
parameter    ap_ST_fsm_state47 = 74'd70368744177664;
parameter    ap_ST_fsm_state48 = 74'd140737488355328;
parameter    ap_ST_fsm_state49 = 74'd281474976710656;
parameter    ap_ST_fsm_state50 = 74'd562949953421312;
parameter    ap_ST_fsm_state51 = 74'd1125899906842624;
parameter    ap_ST_fsm_state52 = 74'd2251799813685248;
parameter    ap_ST_fsm_state53 = 74'd4503599627370496;
parameter    ap_ST_fsm_state54 = 74'd9007199254740992;
parameter    ap_ST_fsm_state55 = 74'd18014398509481984;
parameter    ap_ST_fsm_state56 = 74'd36028797018963968;
parameter    ap_ST_fsm_state57 = 74'd72057594037927936;
parameter    ap_ST_fsm_state58 = 74'd144115188075855872;
parameter    ap_ST_fsm_state59 = 74'd288230376151711744;
parameter    ap_ST_fsm_state60 = 74'd576460752303423488;
parameter    ap_ST_fsm_state61 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 74'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 74'd9444732965739290427392;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 64;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BETA_ID_WIDTH = 1;
parameter    C_M_AXI_BETA_ADDR_WIDTH = 32;
parameter    C_M_AXI_BETA_DATA_WIDTH = 64;
parameter    C_M_AXI_BETA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_WUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_RUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_BUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_USER_VALUE = 0;
parameter    C_M_AXI_BETA_PROT_VALUE = 0;
parameter    C_M_AXI_BETA_CACHE_VALUE = 3;
parameter    C_M_AXI_GAMMA_ID_WIDTH = 1;
parameter    C_M_AXI_GAMMA_ADDR_WIDTH = 32;
parameter    C_M_AXI_GAMMA_DATA_WIDTH = 64;
parameter    C_M_AXI_GAMMA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_WUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_RUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_BUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_USER_VALUE = 0;
parameter    C_M_AXI_GAMMA_PROT_VALUE = 0;
parameter    C_M_AXI_GAMMA_CACHE_VALUE = 3;
parameter    C_M_AXI_M_M_ID_WIDTH = 1;
parameter    C_M_AXI_M_M_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_M_DATA_WIDTH = 64;
parameter    C_M_AXI_M_M_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_USER_VALUE = 0;
parameter    C_M_AXI_M_M_PROT_VALUE = 0;
parameter    C_M_AXI_M_M_CACHE_VALUE = 3;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 64;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 64;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BETA_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_GAMMA_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_M_M_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IN_r_AWVALID;
input   m_axi_IN_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_AWID;
output  [7:0] m_axi_IN_r_AWLEN;
output  [2:0] m_axi_IN_r_AWSIZE;
output  [1:0] m_axi_IN_r_AWBURST;
output  [1:0] m_axi_IN_r_AWLOCK;
output  [3:0] m_axi_IN_r_AWCACHE;
output  [2:0] m_axi_IN_r_AWPROT;
output  [3:0] m_axi_IN_r_AWQOS;
output  [3:0] m_axi_IN_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_IN_r_AWUSER;
output   m_axi_IN_r_WVALID;
input   m_axi_IN_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_IN_r_WSTRB;
output   m_axi_IN_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_IN_r_WUSER;
output   m_axi_IN_r_ARVALID;
input   m_axi_IN_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_ARID;
output  [7:0] m_axi_IN_r_ARLEN;
output  [2:0] m_axi_IN_r_ARSIZE;
output  [1:0] m_axi_IN_r_ARBURST;
output  [1:0] m_axi_IN_r_ARLOCK;
output  [3:0] m_axi_IN_r_ARCACHE;
output  [2:0] m_axi_IN_r_ARPROT;
output  [3:0] m_axi_IN_r_ARQOS;
output  [3:0] m_axi_IN_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_IN_r_ARUSER;
input   m_axi_IN_r_RVALID;
output   m_axi_IN_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_RDATA;
input   m_axi_IN_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_IN_r_RUSER;
input  [1:0] m_axi_IN_r_RRESP;
input   m_axi_IN_r_BVALID;
output   m_axi_IN_r_BREADY;
input  [1:0] m_axi_IN_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_IN_r_BUSER;
output   m_axi_BETA_AWVALID;
input   m_axi_BETA_AWREADY;
output  [C_M_AXI_BETA_ADDR_WIDTH - 1:0] m_axi_BETA_AWADDR;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_AWID;
output  [7:0] m_axi_BETA_AWLEN;
output  [2:0] m_axi_BETA_AWSIZE;
output  [1:0] m_axi_BETA_AWBURST;
output  [1:0] m_axi_BETA_AWLOCK;
output  [3:0] m_axi_BETA_AWCACHE;
output  [2:0] m_axi_BETA_AWPROT;
output  [3:0] m_axi_BETA_AWQOS;
output  [3:0] m_axi_BETA_AWREGION;
output  [C_M_AXI_BETA_AWUSER_WIDTH - 1:0] m_axi_BETA_AWUSER;
output   m_axi_BETA_WVALID;
input   m_axi_BETA_WREADY;
output  [C_M_AXI_BETA_DATA_WIDTH - 1:0] m_axi_BETA_WDATA;
output  [C_M_AXI_BETA_WSTRB_WIDTH - 1:0] m_axi_BETA_WSTRB;
output   m_axi_BETA_WLAST;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_WID;
output  [C_M_AXI_BETA_WUSER_WIDTH - 1:0] m_axi_BETA_WUSER;
output   m_axi_BETA_ARVALID;
input   m_axi_BETA_ARREADY;
output  [C_M_AXI_BETA_ADDR_WIDTH - 1:0] m_axi_BETA_ARADDR;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_ARID;
output  [7:0] m_axi_BETA_ARLEN;
output  [2:0] m_axi_BETA_ARSIZE;
output  [1:0] m_axi_BETA_ARBURST;
output  [1:0] m_axi_BETA_ARLOCK;
output  [3:0] m_axi_BETA_ARCACHE;
output  [2:0] m_axi_BETA_ARPROT;
output  [3:0] m_axi_BETA_ARQOS;
output  [3:0] m_axi_BETA_ARREGION;
output  [C_M_AXI_BETA_ARUSER_WIDTH - 1:0] m_axi_BETA_ARUSER;
input   m_axi_BETA_RVALID;
output   m_axi_BETA_RREADY;
input  [C_M_AXI_BETA_DATA_WIDTH - 1:0] m_axi_BETA_RDATA;
input   m_axi_BETA_RLAST;
input  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_RID;
input  [C_M_AXI_BETA_RUSER_WIDTH - 1:0] m_axi_BETA_RUSER;
input  [1:0] m_axi_BETA_RRESP;
input   m_axi_BETA_BVALID;
output   m_axi_BETA_BREADY;
input  [1:0] m_axi_BETA_BRESP;
input  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_BID;
input  [C_M_AXI_BETA_BUSER_WIDTH - 1:0] m_axi_BETA_BUSER;
output   m_axi_GAMMA_AWVALID;
input   m_axi_GAMMA_AWREADY;
output  [C_M_AXI_GAMMA_ADDR_WIDTH - 1:0] m_axi_GAMMA_AWADDR;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_AWID;
output  [7:0] m_axi_GAMMA_AWLEN;
output  [2:0] m_axi_GAMMA_AWSIZE;
output  [1:0] m_axi_GAMMA_AWBURST;
output  [1:0] m_axi_GAMMA_AWLOCK;
output  [3:0] m_axi_GAMMA_AWCACHE;
output  [2:0] m_axi_GAMMA_AWPROT;
output  [3:0] m_axi_GAMMA_AWQOS;
output  [3:0] m_axi_GAMMA_AWREGION;
output  [C_M_AXI_GAMMA_AWUSER_WIDTH - 1:0] m_axi_GAMMA_AWUSER;
output   m_axi_GAMMA_WVALID;
input   m_axi_GAMMA_WREADY;
output  [C_M_AXI_GAMMA_DATA_WIDTH - 1:0] m_axi_GAMMA_WDATA;
output  [C_M_AXI_GAMMA_WSTRB_WIDTH - 1:0] m_axi_GAMMA_WSTRB;
output   m_axi_GAMMA_WLAST;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_WID;
output  [C_M_AXI_GAMMA_WUSER_WIDTH - 1:0] m_axi_GAMMA_WUSER;
output   m_axi_GAMMA_ARVALID;
input   m_axi_GAMMA_ARREADY;
output  [C_M_AXI_GAMMA_ADDR_WIDTH - 1:0] m_axi_GAMMA_ARADDR;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_ARID;
output  [7:0] m_axi_GAMMA_ARLEN;
output  [2:0] m_axi_GAMMA_ARSIZE;
output  [1:0] m_axi_GAMMA_ARBURST;
output  [1:0] m_axi_GAMMA_ARLOCK;
output  [3:0] m_axi_GAMMA_ARCACHE;
output  [2:0] m_axi_GAMMA_ARPROT;
output  [3:0] m_axi_GAMMA_ARQOS;
output  [3:0] m_axi_GAMMA_ARREGION;
output  [C_M_AXI_GAMMA_ARUSER_WIDTH - 1:0] m_axi_GAMMA_ARUSER;
input   m_axi_GAMMA_RVALID;
output   m_axi_GAMMA_RREADY;
input  [C_M_AXI_GAMMA_DATA_WIDTH - 1:0] m_axi_GAMMA_RDATA;
input   m_axi_GAMMA_RLAST;
input  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_RID;
input  [C_M_AXI_GAMMA_RUSER_WIDTH - 1:0] m_axi_GAMMA_RUSER;
input  [1:0] m_axi_GAMMA_RRESP;
input   m_axi_GAMMA_BVALID;
output   m_axi_GAMMA_BREADY;
input  [1:0] m_axi_GAMMA_BRESP;
input  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_BID;
input  [C_M_AXI_GAMMA_BUSER_WIDTH - 1:0] m_axi_GAMMA_BUSER;
output   m_axi_M_M_AWVALID;
input   m_axi_M_M_AWREADY;
output  [C_M_AXI_M_M_ADDR_WIDTH - 1:0] m_axi_M_M_AWADDR;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_AWID;
output  [7:0] m_axi_M_M_AWLEN;
output  [2:0] m_axi_M_M_AWSIZE;
output  [1:0] m_axi_M_M_AWBURST;
output  [1:0] m_axi_M_M_AWLOCK;
output  [3:0] m_axi_M_M_AWCACHE;
output  [2:0] m_axi_M_M_AWPROT;
output  [3:0] m_axi_M_M_AWQOS;
output  [3:0] m_axi_M_M_AWREGION;
output  [C_M_AXI_M_M_AWUSER_WIDTH - 1:0] m_axi_M_M_AWUSER;
output   m_axi_M_M_WVALID;
input   m_axi_M_M_WREADY;
output  [C_M_AXI_M_M_DATA_WIDTH - 1:0] m_axi_M_M_WDATA;
output  [C_M_AXI_M_M_WSTRB_WIDTH - 1:0] m_axi_M_M_WSTRB;
output   m_axi_M_M_WLAST;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_WID;
output  [C_M_AXI_M_M_WUSER_WIDTH - 1:0] m_axi_M_M_WUSER;
output   m_axi_M_M_ARVALID;
input   m_axi_M_M_ARREADY;
output  [C_M_AXI_M_M_ADDR_WIDTH - 1:0] m_axi_M_M_ARADDR;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_ARID;
output  [7:0] m_axi_M_M_ARLEN;
output  [2:0] m_axi_M_M_ARSIZE;
output  [1:0] m_axi_M_M_ARBURST;
output  [1:0] m_axi_M_M_ARLOCK;
output  [3:0] m_axi_M_M_ARCACHE;
output  [2:0] m_axi_M_M_ARPROT;
output  [3:0] m_axi_M_M_ARQOS;
output  [3:0] m_axi_M_M_ARREGION;
output  [C_M_AXI_M_M_ARUSER_WIDTH - 1:0] m_axi_M_M_ARUSER;
input   m_axi_M_M_RVALID;
output   m_axi_M_M_RREADY;
input  [C_M_AXI_M_M_DATA_WIDTH - 1:0] m_axi_M_M_RDATA;
input   m_axi_M_M_RLAST;
input  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_RID;
input  [C_M_AXI_M_M_RUSER_WIDTH - 1:0] m_axi_M_M_RUSER;
input  [1:0] m_axi_M_M_RRESP;
input   m_axi_M_M_BVALID;
output   m_axi_M_M_BREADY;
input  [1:0] m_axi_M_M_BRESP;
input  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_BID;
input  [C_M_AXI_M_M_BUSER_WIDTH - 1:0] m_axi_M_M_BUSER;
output   m_axi_M_V_AWVALID;
input   m_axi_M_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_M_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_AWID;
output  [7:0] m_axi_M_V_AWLEN;
output  [2:0] m_axi_M_V_AWSIZE;
output  [1:0] m_axi_M_V_AWBURST;
output  [1:0] m_axi_M_V_AWLOCK;
output  [3:0] m_axi_M_V_AWCACHE;
output  [2:0] m_axi_M_V_AWPROT;
output  [3:0] m_axi_M_V_AWQOS;
output  [3:0] m_axi_M_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_M_V_AWUSER;
output   m_axi_M_V_WVALID;
input   m_axi_M_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_M_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_M_V_WSTRB;
output   m_axi_M_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_M_V_WUSER;
output   m_axi_M_V_ARVALID;
input   m_axi_M_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_M_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_ARID;
output  [7:0] m_axi_M_V_ARLEN;
output  [2:0] m_axi_M_V_ARSIZE;
output  [1:0] m_axi_M_V_ARBURST;
output  [1:0] m_axi_M_V_ARLOCK;
output  [3:0] m_axi_M_V_ARCACHE;
output  [2:0] m_axi_M_V_ARPROT;
output  [3:0] m_axi_M_V_ARQOS;
output  [3:0] m_axi_M_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_M_V_ARUSER;
input   m_axi_M_V_RVALID;
output   m_axi_M_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_M_V_RDATA;
input   m_axi_M_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_M_V_RUSER;
input  [1:0] m_axi_M_V_RRESP;
input   m_axi_M_V_BVALID;
output   m_axi_M_V_BREADY;
input  [1:0] m_axi_M_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_M_V_BUSER;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_V;
wire   [31:0] beta_V;
wire   [31:0] gamma_V;
wire   [31:0] moving_mean_V;
wire   [31:0] moving_variance_V;
wire   [31:0] out_V;
reg    IN_r_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    IN_r_blk_n_R;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln33_fu_461_p2;
reg    BETA_blk_n_AR;
reg    BETA_blk_n_R;
reg    GAMMA_blk_n_AR;
reg    GAMMA_blk_n_R;
reg    M_M_blk_n_AR;
reg    M_M_blk_n_R;
reg    M_V_blk_n_AR;
reg    M_V_blk_n_R;
reg    OUT_r_blk_n_AW;
wire    ap_CS_fsm_state8;
reg    OUT_r_blk_n_W;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln40_fu_473_p2;
reg    OUT_r_blk_n_B;
wire    ap_CS_fsm_state74;
wire    IN_r_AWREADY;
wire    IN_r_WREADY;
reg    IN_r_ARVALID;
wire    IN_r_ARREADY;
wire   [31:0] IN_r_ARADDR;
wire    IN_r_RVALID;
reg    IN_r_RREADY;
wire   [63:0] IN_r_RDATA;
wire    IN_r_RLAST;
wire   [0:0] IN_r_RID;
wire   [0:0] IN_r_RUSER;
wire   [1:0] IN_r_RRESP;
wire    IN_r_BVALID;
wire   [1:0] IN_r_BRESP;
wire   [0:0] IN_r_BID;
wire   [0:0] IN_r_BUSER;
wire    BETA_AWREADY;
wire    BETA_WREADY;
reg    BETA_ARVALID;
wire    BETA_ARREADY;
wire   [31:0] BETA_ARADDR;
wire    BETA_RVALID;
reg    BETA_RREADY;
wire   [63:0] BETA_RDATA;
wire    BETA_RLAST;
wire   [0:0] BETA_RID;
wire   [0:0] BETA_RUSER;
wire   [1:0] BETA_RRESP;
wire    BETA_BVALID;
wire   [1:0] BETA_BRESP;
wire   [0:0] BETA_BID;
wire   [0:0] BETA_BUSER;
wire    GAMMA_AWREADY;
wire    GAMMA_WREADY;
reg    GAMMA_ARVALID;
wire    GAMMA_ARREADY;
wire   [31:0] GAMMA_ARADDR;
wire    GAMMA_RVALID;
reg    GAMMA_RREADY;
wire   [63:0] GAMMA_RDATA;
wire    GAMMA_RLAST;
wire   [0:0] GAMMA_RID;
wire   [0:0] GAMMA_RUSER;
wire   [1:0] GAMMA_RRESP;
wire    GAMMA_BVALID;
wire   [1:0] GAMMA_BRESP;
wire   [0:0] GAMMA_BID;
wire   [0:0] GAMMA_BUSER;
wire    M_M_AWREADY;
wire    M_M_WREADY;
reg    M_M_ARVALID;
wire    M_M_ARREADY;
wire   [31:0] M_M_ARADDR;
wire    M_M_RVALID;
reg    M_M_RREADY;
wire   [63:0] M_M_RDATA;
wire    M_M_RLAST;
wire   [0:0] M_M_RID;
wire   [0:0] M_M_RUSER;
wire   [1:0] M_M_RRESP;
wire    M_M_BVALID;
wire   [1:0] M_M_BRESP;
wire   [0:0] M_M_BID;
wire   [0:0] M_M_BUSER;
wire    M_V_AWREADY;
wire    M_V_WREADY;
reg    M_V_ARVALID;
wire    M_V_ARREADY;
wire   [31:0] M_V_ARADDR;
wire    M_V_RVALID;
reg    M_V_RREADY;
wire   [63:0] M_V_RDATA;
wire    M_V_RLAST;
wire   [0:0] M_V_RID;
wire   [0:0] M_V_RUSER;
wire   [1:0] M_V_RRESP;
wire    M_V_BVALID;
wire   [1:0] M_V_BRESP;
wire   [0:0] M_V_BID;
wire   [0:0] M_V_BUSER;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
wire   [31:0] OUT_r_AWADDR;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [63:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
reg   [28:0] out_V1_reg_1477;
reg   [28:0] moving_variance_V9_reg_1482;
reg   [28:0] moving_mean_V7_reg_1487;
reg   [28:0] gamma_V5_reg_1492;
reg   [28:0] beta_V3_reg_1497;
reg   [28:0] in_V1_reg_1502;
reg    ap_block_state2_io;
wire   [5:0] i_fu_467_p2;
reg   [5:0] i_reg_1546;
reg    ap_block_state9;
reg   [63:0] in_pack_V_reg_1551;
reg   [63:0] beta_pack_V_reg_1557;
reg   [63:0] gamma_pack_V_reg_1563;
reg   [63:0] moving_mean_pack_V_reg_1569;
reg   [63:0] moving_variance_pack_reg_1575;
wire   [2:0] k_fu_479_p2;
reg   [2:0] k_reg_1584;
reg    ap_block_state10_io;
wire   [5:0] Lo_assign_fu_489_p3;
reg   [5:0] Lo_assign_reg_1589;
wire   [5:0] or_ln41_fu_498_p2;
reg   [5:0] or_ln41_reg_1599;
wire   [0:0] grp_fu_333_p2;
reg   [0:0] icmp_ln647_reg_1609;
wire   [0:0] icmp_ln647_1_fu_505_p2;
reg   [0:0] icmp_ln647_1_reg_1616;
wire   [0:0] icmp_ln647_2_fu_511_p2;
reg   [0:0] icmp_ln647_2_reg_1623;
wire   [0:0] icmp_ln647_3_fu_517_p2;
reg   [0:0] icmp_ln647_3_reg_1630;
wire   [6:0] sub_ln647_14_fu_587_p2;
reg   [6:0] sub_ln647_14_reg_1637;
wire   [63:0] lshr_ln647_8_fu_597_p2;
reg   [63:0] lshr_ln647_8_reg_1642;
wire   [15:0] in_m_3_V_fu_688_p1;
reg  signed [15:0] in_m_3_V_reg_1647;
wire    ap_CS_fsm_state11;
wire   [15:0] gamma_m_3_V_fu_862_p1;
reg  signed [15:0] gamma_m_3_V_reg_1652;
wire   [15:0] moving_mean_m_3_V_fu_951_p1;
reg  signed [15:0] moving_mean_m_3_V_reg_1657;
wire   [15:0] x_V_fu_1051_p3;
reg   [15:0] x_V_reg_1662;
wire   [15:0] trunc_ln728_fu_1059_p1;
reg   [15:0] trunc_ln728_reg_1667;
wire  signed [32:0] grp_fu_1461_p4;
reg  signed [32:0] ret_V_11_reg_1672;
wire    ap_CS_fsm_state12;
wire   [12:0] grp_sqrt_fixed_16_6_s_fu_328_ap_return;
reg   [12:0] x_sqrt_V_reg_1677;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
reg   [0:0] p_Result_22_reg_1692;
wire    ap_CS_fsm_state68;
wire   [15:0] tmp_V_7_fu_1141_p2;
reg   [15:0] tmp_V_7_reg_1698;
wire   [0:0] carry_1_fu_1161_p2;
reg   [0:0] carry_1_reg_1704;
wire   [0:0] p_Result_24_fu_1167_p3;
reg   [0:0] p_Result_24_reg_1710;
wire   [0:0] Range1_all_ones_fu_1201_p2;
reg   [0:0] Range1_all_ones_reg_1715;
wire   [0:0] Range1_all_zeros_fu_1207_p2;
reg   [0:0] Range1_all_zeros_reg_1721;
wire   [0:0] and_ln786_fu_1241_p2;
reg   [0:0] and_ln786_reg_1726;
wire   [15:0] p_Val2_21_fu_1325_p3;
reg   [15:0] p_Val2_21_reg_1732;
wire    ap_CS_fsm_state69;
reg   [5:0] i_0_reg_306;
reg   [2:0] k_0_reg_317;
wire    ap_CS_fsm_state70;
wire   [63:0] empty_27_fu_401_p1;
wire   [63:0] empty_28_fu_411_p1;
wire   [63:0] empty_29_fu_421_p1;
wire   [63:0] empty_30_fu_431_p1;
wire   [63:0] empty_31_fu_441_p1;
wire   [63:0] empty_fu_451_p1;
reg   [63:0] p_Val2_s_fu_190;
wire   [63:0] p_Result_25_fu_1450_p2;
reg   [5:0] grp_fu_333_p0;
reg   [5:0] grp_fu_333_p1;
wire   [1:0] trunc_ln41_fu_485_p1;
wire   [6:0] zext_ln647_16_fu_529_p1;
wire   [6:0] zext_ln647_17_fu_533_p1;
wire   [0:0] icmp_ln647_4_fu_523_p2;
wire   [6:0] sub_ln647_12_fu_546_p2;
wire   [6:0] sub_ln647_13_fu_558_p2;
reg   [63:0] tmp_35_fu_537_p4;
wire   [6:0] xor_ln647_4_fu_552_p2;
wire   [6:0] select_ln647_12_fu_564_p3;
wire   [6:0] select_ln647_14_fu_579_p3;
wire   [63:0] select_ln647_13_fu_572_p3;
wire   [63:0] zext_ln647_18_fu_593_p1;
wire   [6:0] zext_ln647_fu_603_p1;
wire   [6:0] zext_ln647_1_fu_606_p1;
wire   [6:0] sub_ln647_fu_618_p2;
wire   [6:0] sub_ln647_1_fu_630_p2;
reg   [63:0] tmp_31_fu_609_p4;
wire   [6:0] xor_ln647_fu_624_p2;
wire   [6:0] select_ln647_fu_636_p3;
wire   [6:0] select_ln647_2_fu_649_p3;
wire   [6:0] sub_ln647_2_fu_656_p2;
wire   [63:0] select_ln647_1_fu_643_p3;
wire   [63:0] zext_ln647_2_fu_662_p1;
wire   [63:0] zext_ln647_3_fu_666_p1;
wire   [63:0] lshr_ln647_fu_670_p2;
wire   [63:0] lshr_ln647_1_fu_676_p2;
wire   [63:0] p_Result_s_fu_682_p2;
wire   [6:0] zext_ln647_4_fu_692_p1;
wire   [6:0] zext_ln647_5_fu_695_p1;
wire   [6:0] sub_ln647_3_fu_707_p2;
wire   [6:0] sub_ln647_4_fu_719_p2;
reg   [63:0] tmp_32_fu_698_p4;
wire   [6:0] xor_ln647_1_fu_713_p2;
wire   [6:0] select_ln647_3_fu_725_p3;
wire   [6:0] select_ln647_5_fu_738_p3;
wire   [6:0] sub_ln647_5_fu_745_p2;
wire   [63:0] select_ln647_4_fu_732_p3;
wire   [63:0] zext_ln647_6_fu_751_p1;
wire   [63:0] zext_ln647_7_fu_755_p1;
wire   [63:0] lshr_ln647_2_fu_759_p2;
wire   [63:0] lshr_ln647_3_fu_765_p2;
wire   [6:0] zext_ln647_8_fu_777_p1;
wire   [6:0] zext_ln647_9_fu_780_p1;
wire   [6:0] sub_ln647_6_fu_792_p2;
wire   [6:0] sub_ln647_7_fu_804_p2;
reg   [63:0] tmp_33_fu_783_p4;
wire   [6:0] xor_ln647_2_fu_798_p2;
wire   [6:0] select_ln647_6_fu_810_p3;
wire   [6:0] select_ln647_8_fu_823_p3;
wire   [6:0] sub_ln647_8_fu_830_p2;
wire   [63:0] select_ln647_7_fu_817_p3;
wire   [63:0] zext_ln647_10_fu_836_p1;
wire   [63:0] zext_ln647_11_fu_840_p1;
wire   [63:0] lshr_ln647_4_fu_844_p2;
wire   [63:0] lshr_ln647_5_fu_850_p2;
wire   [63:0] p_Result_17_fu_856_p2;
wire   [6:0] zext_ln647_12_fu_866_p1;
wire   [6:0] zext_ln647_13_fu_869_p1;
wire   [6:0] sub_ln647_9_fu_881_p2;
wire   [6:0] sub_ln647_10_fu_893_p2;
reg   [63:0] tmp_34_fu_872_p4;
wire   [6:0] xor_ln647_3_fu_887_p2;
wire   [6:0] select_ln647_9_fu_899_p3;
wire   [6:0] select_ln647_11_fu_912_p3;
wire   [6:0] sub_ln647_11_fu_919_p2;
wire   [63:0] select_ln647_10_fu_906_p3;
wire   [63:0] zext_ln647_14_fu_925_p1;
wire   [63:0] zext_ln647_15_fu_929_p1;
wire   [63:0] lshr_ln647_6_fu_933_p2;
wire   [63:0] lshr_ln647_7_fu_939_p2;
wire   [63:0] p_Result_18_fu_945_p2;
wire   [63:0] zext_ln647_19_fu_955_p1;
wire   [63:0] lshr_ln647_9_fu_958_p2;
wire   [63:0] p_Result_19_fu_964_p2;
wire  signed [15:0] moving_variance_m_3_fu_969_p1;
wire  signed [16:0] lhs_V_fu_973_p1;
wire   [16:0] ret_V_10_fu_977_p2;
wire   [15:0] tmp_num_V_fu_991_p2;
wire   [0:0] p_Result_21_fu_997_p3;
wire   [0:0] p_Result_20_fu_983_p3;
wire   [0:0] xor_ln786_fu_1005_p2;
wire   [0:0] xor_ln340_1_fu_1023_p2;
wire   [0:0] xor_ln340_fu_1017_p2;
wire   [0:0] underflow_fu_1011_p2;
wire   [0:0] or_ln340_fu_1029_p2;
wire   [15:0] select_ln340_1_fu_1035_p3;
wire   [15:0] select_ln388_1_fu_1043_p3;
wire   [63:0] p_Result_16_fu_771_p2;
wire  signed [25:0] rhs_V_1_fu_1072_p3;
wire   [42:0] tmp_s_fu_1083_p3;
wire  signed [43:0] grp_fu_1097_p0;
wire   [13:0] grp_fu_1097_p1;
wire   [43:0] grp_fu_1097_p2;
wire   [0:0] tmp_40_fu_1129_p3;
wire   [15:0] tmp_V_fu_1111_p4;
wire   [15:0] zext_ln415_fu_1137_p1;
wire   [0:0] tmp_41_fu_1147_p3;
wire   [0:0] p_Result_23_fu_1121_p3;
wire   [0:0] xor_ln416_fu_1155_p2;
wire   [16:0] tmp_fu_1175_p4;
wire   [17:0] tmp_7_fu_1191_p4;
wire   [0:0] tmp_43_fu_1213_p3;
wire   [0:0] Range2_all_ones_fu_1185_p2;
wire   [0:0] xor_ln779_fu_1221_p2;
wire   [0:0] and_ln779_fu_1227_p2;
wire   [0:0] deleted_ones_fu_1233_p3;
wire   [0:0] deleted_zeros_fu_1247_p3;
wire   [0:0] xor_ln785_fu_1256_p2;
wire   [0:0] or_ln785_fu_1262_p2;
wire   [0:0] xor_ln785_1_fu_1267_p2;
wire   [0:0] and_ln781_fu_1252_p2;
wire   [0:0] or_ln786_fu_1278_p2;
wire   [0:0] xor_ln786_1_fu_1283_p2;
wire   [0:0] underflow_1_fu_1289_p2;
wire   [0:0] overflow_fu_1272_p2;
wire   [0:0] or_ln340_3_fu_1300_p2;
wire   [0:0] or_ln340_1_fu_1294_p2;
wire   [0:0] or_ln340_2_fu_1305_p2;
wire   [15:0] select_ln340_fu_1311_p3;
wire   [15:0] select_ln388_fu_1318_p3;
wire   [6:0] zext_ln414_fu_1336_p1;
wire   [6:0] zext_ln414_1_fu_1339_p1;
wire   [6:0] xor_ln414_fu_1342_p2;
wire   [6:0] select_ln414_fu_1348_p3;
wire   [6:0] select_ln414_2_fu_1364_p3;
wire   [6:0] select_ln414_1_fu_1356_p3;
wire   [6:0] xor_ln414_1_fu_1372_p2;
wire   [63:0] tmp_V_8_fu_1333_p1;
wire   [63:0] zext_ln414_2_fu_1378_p1;
wire   [63:0] shl_ln414_fu_1390_p2;
reg   [63:0] tmp_44_fu_1396_p4;
wire   [63:0] zext_ln414_3_fu_1382_p1;
wire   [63:0] zext_ln414_4_fu_1386_p1;
wire   [63:0] shl_ln414_1_fu_1414_p2;
wire   [63:0] lshr_ln414_fu_1420_p2;
wire   [63:0] and_ln414_fu_1426_p2;
wire   [63:0] xor_ln414_2_fu_1432_p2;
wire   [63:0] select_ln414_3_fu_1406_p3;
wire   [63:0] and_ln414_1_fu_1438_p2;
wire   [63:0] and_ln414_2_fu_1444_p2;
reg    grp_fu_1097_ap_start;
wire    grp_fu_1097_ap_done;
reg   [73:0] ap_NS_fsm;
wire   [43:0] grp_fu_1097_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 74'd1;
end

bn_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
bn_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_V(in_V),
    .beta_V(beta_V),
    .gamma_V(gamma_V),
    .moving_mean_V(moving_mean_V),
    .moving_variance_V(moving_variance_V),
    .out_V(out_V)
);

bn_IN_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
bn_IN_r_m_axi_U(
    .AWVALID(m_axi_IN_r_AWVALID),
    .AWREADY(m_axi_IN_r_AWREADY),
    .AWADDR(m_axi_IN_r_AWADDR),
    .AWID(m_axi_IN_r_AWID),
    .AWLEN(m_axi_IN_r_AWLEN),
    .AWSIZE(m_axi_IN_r_AWSIZE),
    .AWBURST(m_axi_IN_r_AWBURST),
    .AWLOCK(m_axi_IN_r_AWLOCK),
    .AWCACHE(m_axi_IN_r_AWCACHE),
    .AWPROT(m_axi_IN_r_AWPROT),
    .AWQOS(m_axi_IN_r_AWQOS),
    .AWREGION(m_axi_IN_r_AWREGION),
    .AWUSER(m_axi_IN_r_AWUSER),
    .WVALID(m_axi_IN_r_WVALID),
    .WREADY(m_axi_IN_r_WREADY),
    .WDATA(m_axi_IN_r_WDATA),
    .WSTRB(m_axi_IN_r_WSTRB),
    .WLAST(m_axi_IN_r_WLAST),
    .WID(m_axi_IN_r_WID),
    .WUSER(m_axi_IN_r_WUSER),
    .ARVALID(m_axi_IN_r_ARVALID),
    .ARREADY(m_axi_IN_r_ARREADY),
    .ARADDR(m_axi_IN_r_ARADDR),
    .ARID(m_axi_IN_r_ARID),
    .ARLEN(m_axi_IN_r_ARLEN),
    .ARSIZE(m_axi_IN_r_ARSIZE),
    .ARBURST(m_axi_IN_r_ARBURST),
    .ARLOCK(m_axi_IN_r_ARLOCK),
    .ARCACHE(m_axi_IN_r_ARCACHE),
    .ARPROT(m_axi_IN_r_ARPROT),
    .ARQOS(m_axi_IN_r_ARQOS),
    .ARREGION(m_axi_IN_r_ARREGION),
    .ARUSER(m_axi_IN_r_ARUSER),
    .RVALID(m_axi_IN_r_RVALID),
    .RREADY(m_axi_IN_r_RREADY),
    .RDATA(m_axi_IN_r_RDATA),
    .RLAST(m_axi_IN_r_RLAST),
    .RID(m_axi_IN_r_RID),
    .RUSER(m_axi_IN_r_RUSER),
    .RRESP(m_axi_IN_r_RRESP),
    .BVALID(m_axi_IN_r_BVALID),
    .BREADY(m_axi_IN_r_BREADY),
    .BRESP(m_axi_IN_r_BRESP),
    .BID(m_axi_IN_r_BID),
    .BUSER(m_axi_IN_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IN_r_ARVALID),
    .I_ARREADY(IN_r_ARREADY),
    .I_ARADDR(IN_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd32),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IN_r_RVALID),
    .I_RREADY(IN_r_RREADY),
    .I_RDATA(IN_r_RDATA),
    .I_RID(IN_r_RID),
    .I_RUSER(IN_r_RUSER),
    .I_RRESP(IN_r_RRESP),
    .I_RLAST(IN_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IN_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IN_r_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(IN_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IN_r_BRESP),
    .I_BID(IN_r_BID),
    .I_BUSER(IN_r_BUSER)
);

bn_BETA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BETA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BETA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BETA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BETA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BETA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BETA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BETA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BETA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BETA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BETA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BETA_CACHE_VALUE ))
bn_BETA_m_axi_U(
    .AWVALID(m_axi_BETA_AWVALID),
    .AWREADY(m_axi_BETA_AWREADY),
    .AWADDR(m_axi_BETA_AWADDR),
    .AWID(m_axi_BETA_AWID),
    .AWLEN(m_axi_BETA_AWLEN),
    .AWSIZE(m_axi_BETA_AWSIZE),
    .AWBURST(m_axi_BETA_AWBURST),
    .AWLOCK(m_axi_BETA_AWLOCK),
    .AWCACHE(m_axi_BETA_AWCACHE),
    .AWPROT(m_axi_BETA_AWPROT),
    .AWQOS(m_axi_BETA_AWQOS),
    .AWREGION(m_axi_BETA_AWREGION),
    .AWUSER(m_axi_BETA_AWUSER),
    .WVALID(m_axi_BETA_WVALID),
    .WREADY(m_axi_BETA_WREADY),
    .WDATA(m_axi_BETA_WDATA),
    .WSTRB(m_axi_BETA_WSTRB),
    .WLAST(m_axi_BETA_WLAST),
    .WID(m_axi_BETA_WID),
    .WUSER(m_axi_BETA_WUSER),
    .ARVALID(m_axi_BETA_ARVALID),
    .ARREADY(m_axi_BETA_ARREADY),
    .ARADDR(m_axi_BETA_ARADDR),
    .ARID(m_axi_BETA_ARID),
    .ARLEN(m_axi_BETA_ARLEN),
    .ARSIZE(m_axi_BETA_ARSIZE),
    .ARBURST(m_axi_BETA_ARBURST),
    .ARLOCK(m_axi_BETA_ARLOCK),
    .ARCACHE(m_axi_BETA_ARCACHE),
    .ARPROT(m_axi_BETA_ARPROT),
    .ARQOS(m_axi_BETA_ARQOS),
    .ARREGION(m_axi_BETA_ARREGION),
    .ARUSER(m_axi_BETA_ARUSER),
    .RVALID(m_axi_BETA_RVALID),
    .RREADY(m_axi_BETA_RREADY),
    .RDATA(m_axi_BETA_RDATA),
    .RLAST(m_axi_BETA_RLAST),
    .RID(m_axi_BETA_RID),
    .RUSER(m_axi_BETA_RUSER),
    .RRESP(m_axi_BETA_RRESP),
    .BVALID(m_axi_BETA_BVALID),
    .BREADY(m_axi_BETA_BREADY),
    .BRESP(m_axi_BETA_BRESP),
    .BID(m_axi_BETA_BID),
    .BUSER(m_axi_BETA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(BETA_ARVALID),
    .I_ARREADY(BETA_ARREADY),
    .I_ARADDR(BETA_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd32),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(BETA_RVALID),
    .I_RREADY(BETA_RREADY),
    .I_RDATA(BETA_RDATA),
    .I_RID(BETA_RID),
    .I_RUSER(BETA_RUSER),
    .I_RRESP(BETA_RRESP),
    .I_RLAST(BETA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(BETA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(BETA_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(BETA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(BETA_BRESP),
    .I_BID(BETA_BID),
    .I_BUSER(BETA_BUSER)
);

bn_GAMMA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GAMMA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GAMMA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GAMMA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GAMMA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GAMMA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GAMMA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GAMMA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GAMMA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GAMMA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GAMMA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GAMMA_CACHE_VALUE ))
bn_GAMMA_m_axi_U(
    .AWVALID(m_axi_GAMMA_AWVALID),
    .AWREADY(m_axi_GAMMA_AWREADY),
    .AWADDR(m_axi_GAMMA_AWADDR),
    .AWID(m_axi_GAMMA_AWID),
    .AWLEN(m_axi_GAMMA_AWLEN),
    .AWSIZE(m_axi_GAMMA_AWSIZE),
    .AWBURST(m_axi_GAMMA_AWBURST),
    .AWLOCK(m_axi_GAMMA_AWLOCK),
    .AWCACHE(m_axi_GAMMA_AWCACHE),
    .AWPROT(m_axi_GAMMA_AWPROT),
    .AWQOS(m_axi_GAMMA_AWQOS),
    .AWREGION(m_axi_GAMMA_AWREGION),
    .AWUSER(m_axi_GAMMA_AWUSER),
    .WVALID(m_axi_GAMMA_WVALID),
    .WREADY(m_axi_GAMMA_WREADY),
    .WDATA(m_axi_GAMMA_WDATA),
    .WSTRB(m_axi_GAMMA_WSTRB),
    .WLAST(m_axi_GAMMA_WLAST),
    .WID(m_axi_GAMMA_WID),
    .WUSER(m_axi_GAMMA_WUSER),
    .ARVALID(m_axi_GAMMA_ARVALID),
    .ARREADY(m_axi_GAMMA_ARREADY),
    .ARADDR(m_axi_GAMMA_ARADDR),
    .ARID(m_axi_GAMMA_ARID),
    .ARLEN(m_axi_GAMMA_ARLEN),
    .ARSIZE(m_axi_GAMMA_ARSIZE),
    .ARBURST(m_axi_GAMMA_ARBURST),
    .ARLOCK(m_axi_GAMMA_ARLOCK),
    .ARCACHE(m_axi_GAMMA_ARCACHE),
    .ARPROT(m_axi_GAMMA_ARPROT),
    .ARQOS(m_axi_GAMMA_ARQOS),
    .ARREGION(m_axi_GAMMA_ARREGION),
    .ARUSER(m_axi_GAMMA_ARUSER),
    .RVALID(m_axi_GAMMA_RVALID),
    .RREADY(m_axi_GAMMA_RREADY),
    .RDATA(m_axi_GAMMA_RDATA),
    .RLAST(m_axi_GAMMA_RLAST),
    .RID(m_axi_GAMMA_RID),
    .RUSER(m_axi_GAMMA_RUSER),
    .RRESP(m_axi_GAMMA_RRESP),
    .BVALID(m_axi_GAMMA_BVALID),
    .BREADY(m_axi_GAMMA_BREADY),
    .BRESP(m_axi_GAMMA_BRESP),
    .BID(m_axi_GAMMA_BID),
    .BUSER(m_axi_GAMMA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(GAMMA_ARVALID),
    .I_ARREADY(GAMMA_ARREADY),
    .I_ARADDR(GAMMA_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd32),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(GAMMA_RVALID),
    .I_RREADY(GAMMA_RREADY),
    .I_RDATA(GAMMA_RDATA),
    .I_RID(GAMMA_RID),
    .I_RUSER(GAMMA_RUSER),
    .I_RRESP(GAMMA_RRESP),
    .I_RLAST(GAMMA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(GAMMA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(GAMMA_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(GAMMA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(GAMMA_BRESP),
    .I_BID(GAMMA_BID),
    .I_BUSER(GAMMA_BUSER)
);

bn_M_M_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_M_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_M_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_M_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_M_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_M_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_M_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_M_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_M_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_M_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_M_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_M_CACHE_VALUE ))
bn_M_M_m_axi_U(
    .AWVALID(m_axi_M_M_AWVALID),
    .AWREADY(m_axi_M_M_AWREADY),
    .AWADDR(m_axi_M_M_AWADDR),
    .AWID(m_axi_M_M_AWID),
    .AWLEN(m_axi_M_M_AWLEN),
    .AWSIZE(m_axi_M_M_AWSIZE),
    .AWBURST(m_axi_M_M_AWBURST),
    .AWLOCK(m_axi_M_M_AWLOCK),
    .AWCACHE(m_axi_M_M_AWCACHE),
    .AWPROT(m_axi_M_M_AWPROT),
    .AWQOS(m_axi_M_M_AWQOS),
    .AWREGION(m_axi_M_M_AWREGION),
    .AWUSER(m_axi_M_M_AWUSER),
    .WVALID(m_axi_M_M_WVALID),
    .WREADY(m_axi_M_M_WREADY),
    .WDATA(m_axi_M_M_WDATA),
    .WSTRB(m_axi_M_M_WSTRB),
    .WLAST(m_axi_M_M_WLAST),
    .WID(m_axi_M_M_WID),
    .WUSER(m_axi_M_M_WUSER),
    .ARVALID(m_axi_M_M_ARVALID),
    .ARREADY(m_axi_M_M_ARREADY),
    .ARADDR(m_axi_M_M_ARADDR),
    .ARID(m_axi_M_M_ARID),
    .ARLEN(m_axi_M_M_ARLEN),
    .ARSIZE(m_axi_M_M_ARSIZE),
    .ARBURST(m_axi_M_M_ARBURST),
    .ARLOCK(m_axi_M_M_ARLOCK),
    .ARCACHE(m_axi_M_M_ARCACHE),
    .ARPROT(m_axi_M_M_ARPROT),
    .ARQOS(m_axi_M_M_ARQOS),
    .ARREGION(m_axi_M_M_ARREGION),
    .ARUSER(m_axi_M_M_ARUSER),
    .RVALID(m_axi_M_M_RVALID),
    .RREADY(m_axi_M_M_RREADY),
    .RDATA(m_axi_M_M_RDATA),
    .RLAST(m_axi_M_M_RLAST),
    .RID(m_axi_M_M_RID),
    .RUSER(m_axi_M_M_RUSER),
    .RRESP(m_axi_M_M_RRESP),
    .BVALID(m_axi_M_M_BVALID),
    .BREADY(m_axi_M_M_BREADY),
    .BRESP(m_axi_M_M_BRESP),
    .BID(m_axi_M_M_BID),
    .BUSER(m_axi_M_M_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(M_M_ARVALID),
    .I_ARREADY(M_M_ARREADY),
    .I_ARADDR(M_M_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd32),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(M_M_RVALID),
    .I_RREADY(M_M_RREADY),
    .I_RDATA(M_M_RDATA),
    .I_RID(M_M_RID),
    .I_RUSER(M_M_RUSER),
    .I_RRESP(M_M_RRESP),
    .I_RLAST(M_M_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(M_M_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(M_M_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(M_M_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(M_M_BRESP),
    .I_BID(M_M_BID),
    .I_BUSER(M_M_BUSER)
);

bn_M_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
bn_M_V_m_axi_U(
    .AWVALID(m_axi_M_V_AWVALID),
    .AWREADY(m_axi_M_V_AWREADY),
    .AWADDR(m_axi_M_V_AWADDR),
    .AWID(m_axi_M_V_AWID),
    .AWLEN(m_axi_M_V_AWLEN),
    .AWSIZE(m_axi_M_V_AWSIZE),
    .AWBURST(m_axi_M_V_AWBURST),
    .AWLOCK(m_axi_M_V_AWLOCK),
    .AWCACHE(m_axi_M_V_AWCACHE),
    .AWPROT(m_axi_M_V_AWPROT),
    .AWQOS(m_axi_M_V_AWQOS),
    .AWREGION(m_axi_M_V_AWREGION),
    .AWUSER(m_axi_M_V_AWUSER),
    .WVALID(m_axi_M_V_WVALID),
    .WREADY(m_axi_M_V_WREADY),
    .WDATA(m_axi_M_V_WDATA),
    .WSTRB(m_axi_M_V_WSTRB),
    .WLAST(m_axi_M_V_WLAST),
    .WID(m_axi_M_V_WID),
    .WUSER(m_axi_M_V_WUSER),
    .ARVALID(m_axi_M_V_ARVALID),
    .ARREADY(m_axi_M_V_ARREADY),
    .ARADDR(m_axi_M_V_ARADDR),
    .ARID(m_axi_M_V_ARID),
    .ARLEN(m_axi_M_V_ARLEN),
    .ARSIZE(m_axi_M_V_ARSIZE),
    .ARBURST(m_axi_M_V_ARBURST),
    .ARLOCK(m_axi_M_V_ARLOCK),
    .ARCACHE(m_axi_M_V_ARCACHE),
    .ARPROT(m_axi_M_V_ARPROT),
    .ARQOS(m_axi_M_V_ARQOS),
    .ARREGION(m_axi_M_V_ARREGION),
    .ARUSER(m_axi_M_V_ARUSER),
    .RVALID(m_axi_M_V_RVALID),
    .RREADY(m_axi_M_V_RREADY),
    .RDATA(m_axi_M_V_RDATA),
    .RLAST(m_axi_M_V_RLAST),
    .RID(m_axi_M_V_RID),
    .RUSER(m_axi_M_V_RUSER),
    .RRESP(m_axi_M_V_RRESP),
    .BVALID(m_axi_M_V_BVALID),
    .BREADY(m_axi_M_V_BREADY),
    .BRESP(m_axi_M_V_BRESP),
    .BID(m_axi_M_V_BID),
    .BUSER(m_axi_M_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(M_V_ARVALID),
    .I_ARREADY(M_V_ARREADY),
    .I_ARADDR(M_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd32),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(M_V_RVALID),
    .I_RREADY(M_V_RREADY),
    .I_RDATA(M_V_RDATA),
    .I_RID(M_V_RID),
    .I_RUSER(M_V_RUSER),
    .I_RRESP(M_V_RRESP),
    .I_RLAST(M_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(M_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(M_V_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(M_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(M_V_BRESP),
    .I_BID(M_V_BID),
    .I_BUSER(M_V_BUSER)
);

bn_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
bn_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(OUT_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd32),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(p_Val2_s_fu_190),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

sqrt_fixed_16_6_s grp_sqrt_fixed_16_6_s_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(x_V_reg_1662),
    .ap_return(grp_sqrt_fixed_16_6_s_fu_328_ap_return)
);

bn_sdiv_44s_14ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 48 ),
    .din0_WIDTH( 44 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 44 ))
bn_sdiv_44s_14ns_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_1097_ap_start),
    .done(grp_fu_1097_ap_done),
    .din0(grp_fu_1097_p0),
    .din1(grp_fu_1097_p1),
    .ce(1'b1),
    .dout(grp_fu_1097_p2)
);

bn_ama_submuladd_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 26 ),
    .dout_WIDTH( 33 ))
bn_ama_submuladd_cud_U3(
    .din0(in_m_3_V_reg_1647),
    .din1(moving_mean_m_3_V_reg_1657),
    .din2(gamma_m_3_V_reg_1652),
    .din3(rhs_V_1_fu_1072_p3),
    .dout(grp_fu_1461_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (icmp_ln40_fu_473_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_0_reg_306 <= i_reg_1546;
    end else if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_reg_306 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        k_0_reg_317 <= k_reg_1584;
    end else if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        k_0_reg_317 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (icmp_ln40_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        Lo_assign_reg_1589[5 : 4] <= Lo_assign_fu_489_p3[5 : 4];
        icmp_ln647_1_reg_1616 <= icmp_ln647_1_fu_505_p2;
        icmp_ln647_2_reg_1623 <= icmp_ln647_2_fu_511_p2;
        icmp_ln647_3_reg_1630 <= icmp_ln647_3_fu_517_p2;
        icmp_ln647_reg_1609 <= grp_fu_333_p2;
        lshr_ln647_8_reg_1642 <= lshr_ln647_8_fu_597_p2;
        or_ln41_reg_1599[5 : 4] <= or_ln41_fu_498_p2[5 : 4];
        sub_ln647_14_reg_1637[6 : 1] <= sub_ln647_14_fu_587_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        Range1_all_ones_reg_1715 <= Range1_all_ones_fu_1201_p2;
        Range1_all_zeros_reg_1721 <= Range1_all_zeros_fu_1207_p2;
        and_ln786_reg_1726 <= and_ln786_fu_1241_p2;
        carry_1_reg_1704 <= carry_1_fu_1161_p2;
        p_Result_22_reg_1692 <= grp_fu_1097_p2[32'd43];
        p_Result_24_reg_1710 <= tmp_V_7_fu_1141_p2[32'd15];
        tmp_V_7_reg_1698 <= tmp_V_7_fu_1141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        beta_V3_reg_1497 <= {{beta_V[31:3]}};
        gamma_V5_reg_1492 <= {{gamma_V[31:3]}};
        in_V1_reg_1502 <= {{in_V[31:3]}};
        moving_mean_V7_reg_1487 <= {{moving_mean_V[31:3]}};
        moving_variance_V9_reg_1482 <= {{moving_variance_V[31:3]}};
        out_V1_reg_1477 <= {{out_V[31:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        beta_pack_V_reg_1557 <= BETA_RDATA;
        gamma_pack_V_reg_1563 <= GAMMA_RDATA;
        in_pack_V_reg_1551 <= IN_r_RDATA;
        moving_mean_pack_V_reg_1569 <= M_M_RDATA;
        moving_variance_pack_reg_1575 <= M_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        gamma_m_3_V_reg_1652 <= gamma_m_3_V_fu_862_p1;
        in_m_3_V_reg_1647 <= in_m_3_V_fu_688_p1;
        moving_mean_m_3_V_reg_1657 <= moving_mean_m_3_V_fu_951_p1;
        trunc_ln728_reg_1667 <= trunc_ln728_fu_1059_p1;
        x_V_reg_1662 <= x_V_fu_1051_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (1'b1 == ap_CS_fsm_state9))) begin
        i_reg_1546 <= i_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        k_reg_1584 <= k_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        p_Val2_21_reg_1732 <= p_Val2_21_fu_1325_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        p_Val2_s_fu_190 <= p_Result_25_fu_1450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ret_V_11_reg_1672 <= grp_fu_1461_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        x_sqrt_V_reg_1677 <= grp_sqrt_fixed_16_6_s_fu_328_ap_return;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        BETA_ARVALID = 1'b1;
    end else begin
        BETA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        BETA_RREADY = 1'b1;
    end else begin
        BETA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        BETA_blk_n_AR = m_axi_BETA_ARREADY;
    end else begin
        BETA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        BETA_blk_n_R = m_axi_BETA_RVALID;
    end else begin
        BETA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        GAMMA_ARVALID = 1'b1;
    end else begin
        GAMMA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        GAMMA_RREADY = 1'b1;
    end else begin
        GAMMA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        GAMMA_blk_n_AR = m_axi_GAMMA_ARREADY;
    end else begin
        GAMMA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        GAMMA_blk_n_R = m_axi_GAMMA_RVALID;
    end else begin
        GAMMA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_r_ARVALID = 1'b1;
    end else begin
        IN_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        IN_r_RREADY = 1'b1;
    end else begin
        IN_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IN_r_blk_n_AR = m_axi_IN_r_ARREADY;
    end else begin
        IN_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        IN_r_blk_n_R = m_axi_IN_r_RVALID;
    end else begin
        IN_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        M_M_ARVALID = 1'b1;
    end else begin
        M_M_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        M_M_RREADY = 1'b1;
    end else begin
        M_M_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        M_M_blk_n_AR = m_axi_M_M_ARREADY;
    end else begin
        M_M_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        M_M_blk_n_R = m_axi_M_M_RVALID;
    end else begin
        M_M_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        M_V_ARVALID = 1'b1;
    end else begin
        M_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        M_V_RREADY = 1'b1;
    end else begin
        M_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        M_V_blk_n_AR = m_axi_M_V_ARREADY;
    end else begin
        M_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        M_V_blk_n_R = m_axi_M_V_RVALID;
    end else begin
        M_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state74))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_io) & (icmp_ln40_fu_473_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_473_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state74))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state74))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_1097_ap_start = 1'b1;
    end else begin
        grp_fu_1097_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_333_p0 = Lo_assign_reg_1589;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_333_p0 = Lo_assign_fu_489_p3;
    end else begin
        grp_fu_333_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_333_p1 = or_ln41_reg_1599;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_333_p1 = or_ln41_fu_498_p2;
    end else begin
        grp_fu_333_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if ((~(((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID))) & (icmp_ln33_fu_461_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_io) & (icmp_ln40_fu_473_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b0 == ap_block_state10_io) & (icmp_ln40_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BETA_ARADDR = empty_30_fu_431_p1;

assign GAMMA_ARADDR = empty_29_fu_421_p1;

assign IN_r_ARADDR = empty_31_fu_441_p1;

assign Lo_assign_fu_489_p3 = {{trunc_ln41_fu_485_p1}, {4'd0}};

assign M_M_ARADDR = empty_28_fu_411_p1;

assign M_V_ARADDR = empty_27_fu_401_p1;

assign OUT_r_AWADDR = empty_fu_451_p1;

assign Range1_all_ones_fu_1201_p2 = ((tmp_7_fu_1191_p4 == 18'd262143) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1207_p2 = ((tmp_7_fu_1191_p4 == 18'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_1185_p2 = ((tmp_fu_1175_p4 == 17'd131071) ? 1'b1 : 1'b0);

assign and_ln414_1_fu_1438_p2 = (xor_ln414_2_fu_1432_p2 & p_Val2_s_fu_190);

assign and_ln414_2_fu_1444_p2 = (select_ln414_3_fu_1406_p3 & and_ln414_fu_1426_p2);

assign and_ln414_fu_1426_p2 = (shl_ln414_1_fu_1414_p2 & lshr_ln414_fu_1420_p2);

assign and_ln779_fu_1227_p2 = (xor_ln779_fu_1221_p2 & Range2_all_ones_fu_1185_p2);

assign and_ln781_fu_1252_p2 = (carry_1_reg_1704 & Range1_all_ones_reg_1715);

assign and_ln786_fu_1241_p2 = (p_Result_24_fu_1167_p3 & deleted_ones_fu_1233_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_io = ((icmp_ln40_fu_473_p2 == 1'd1) & (1'b0 == OUT_r_WREADY));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == M_V_ARREADY) | (1'b0 == M_M_ARREADY) | (1'b0 == GAMMA_ARREADY) | (1'b0 == BETA_ARREADY) | (1'b0 == IN_r_ARREADY));
end

always @ (*) begin
    ap_block_state9 = (((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_V_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == BETA_RVALID)) | ((icmp_ln33_fu_461_p2 == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign carry_1_fu_1161_p2 = (xor_ln416_fu_1155_p2 & p_Result_23_fu_1121_p3);

assign deleted_ones_fu_1233_p3 = ((carry_1_fu_1161_p2[0:0] === 1'b1) ? and_ln779_fu_1227_p2 : Range1_all_ones_fu_1201_p2);

assign deleted_zeros_fu_1247_p3 = ((carry_1_reg_1704[0:0] === 1'b1) ? Range1_all_ones_reg_1715 : Range1_all_zeros_reg_1721);

assign empty_27_fu_401_p1 = moving_variance_V9_reg_1482;

assign empty_28_fu_411_p1 = moving_mean_V7_reg_1487;

assign empty_29_fu_421_p1 = gamma_V5_reg_1492;

assign empty_30_fu_431_p1 = beta_V3_reg_1497;

assign empty_31_fu_441_p1 = in_V1_reg_1502;

assign empty_fu_451_p1 = out_V1_reg_1477;

assign gamma_m_3_V_fu_862_p1 = p_Result_17_fu_856_p2[15:0];

assign grp_fu_1097_p0 = $signed(tmp_s_fu_1083_p3);

assign grp_fu_1097_p1 = grp_fu_1097_p10;

assign grp_fu_1097_p10 = x_sqrt_V_reg_1677;

assign grp_fu_333_p2 = ((grp_fu_333_p0 > grp_fu_333_p1) ? 1'b1 : 1'b0);

assign i_fu_467_p2 = (i_0_reg_306 + 6'd1);

assign icmp_ln33_fu_461_p2 = ((i_0_reg_306 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_473_p2 = ((k_0_reg_317 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln647_1_fu_505_p2 = ((Lo_assign_fu_489_p3 > or_ln41_fu_498_p2) ? 1'b1 : 1'b0);

assign icmp_ln647_2_fu_511_p2 = ((Lo_assign_fu_489_p3 > or_ln41_fu_498_p2) ? 1'b1 : 1'b0);

assign icmp_ln647_3_fu_517_p2 = ((Lo_assign_fu_489_p3 > or_ln41_fu_498_p2) ? 1'b1 : 1'b0);

assign icmp_ln647_4_fu_523_p2 = ((Lo_assign_fu_489_p3 > or_ln41_fu_498_p2) ? 1'b1 : 1'b0);

assign in_m_3_V_fu_688_p1 = p_Result_s_fu_682_p2[15:0];

assign k_fu_479_p2 = (k_0_reg_317 + 3'd1);

assign lhs_V_fu_973_p1 = moving_variance_m_3_fu_969_p1;

assign lshr_ln414_fu_1420_p2 = 64'd18446744073709551615 >> zext_ln414_4_fu_1386_p1;

assign lshr_ln647_1_fu_676_p2 = 64'd18446744073709551615 >> zext_ln647_3_fu_666_p1;

assign lshr_ln647_2_fu_759_p2 = select_ln647_4_fu_732_p3 >> zext_ln647_6_fu_751_p1;

assign lshr_ln647_3_fu_765_p2 = 64'd18446744073709551615 >> zext_ln647_7_fu_755_p1;

assign lshr_ln647_4_fu_844_p2 = select_ln647_7_fu_817_p3 >> zext_ln647_10_fu_836_p1;

assign lshr_ln647_5_fu_850_p2 = 64'd18446744073709551615 >> zext_ln647_11_fu_840_p1;

assign lshr_ln647_6_fu_933_p2 = select_ln647_10_fu_906_p3 >> zext_ln647_14_fu_925_p1;

assign lshr_ln647_7_fu_939_p2 = 64'd18446744073709551615 >> zext_ln647_15_fu_929_p1;

assign lshr_ln647_8_fu_597_p2 = select_ln647_13_fu_572_p3 >> zext_ln647_18_fu_593_p1;

assign lshr_ln647_9_fu_958_p2 = 64'd18446744073709551615 >> zext_ln647_19_fu_955_p1;

assign lshr_ln647_fu_670_p2 = select_ln647_1_fu_643_p3 >> zext_ln647_2_fu_662_p1;

assign moving_mean_m_3_V_fu_951_p1 = p_Result_18_fu_945_p2[15:0];

assign moving_variance_m_3_fu_969_p1 = p_Result_19_fu_964_p2[15:0];

assign or_ln340_1_fu_1294_p2 = (underflow_1_fu_1289_p2 | overflow_fu_1272_p2);

assign or_ln340_2_fu_1305_p2 = (or_ln340_3_fu_1300_p2 | and_ln781_fu_1252_p2);

assign or_ln340_3_fu_1300_p2 = (xor_ln785_1_fu_1267_p2 | and_ln786_reg_1726);

assign or_ln340_fu_1029_p2 = (xor_ln340_1_fu_1023_p2 | p_Result_21_fu_997_p3);

assign or_ln41_fu_498_p2 = (6'd15 | Lo_assign_fu_489_p3);

assign or_ln785_fu_1262_p2 = (xor_ln785_fu_1256_p2 | p_Result_24_reg_1710);

assign or_ln786_fu_1278_p2 = (and_ln786_reg_1726 | and_ln781_fu_1252_p2);

assign overflow_fu_1272_p2 = (xor_ln785_1_fu_1267_p2 & or_ln785_fu_1262_p2);

assign p_Result_16_fu_771_p2 = (lshr_ln647_3_fu_765_p2 & lshr_ln647_2_fu_759_p2);

assign p_Result_17_fu_856_p2 = (lshr_ln647_5_fu_850_p2 & lshr_ln647_4_fu_844_p2);

assign p_Result_18_fu_945_p2 = (lshr_ln647_7_fu_939_p2 & lshr_ln647_6_fu_933_p2);

assign p_Result_19_fu_964_p2 = (lshr_ln647_9_fu_958_p2 & lshr_ln647_8_reg_1642);

assign p_Result_20_fu_983_p3 = ret_V_10_fu_977_p2[32'd16];

assign p_Result_21_fu_997_p3 = tmp_num_V_fu_991_p2[32'd15];

assign p_Result_23_fu_1121_p3 = grp_fu_1097_p2[32'd25];

assign p_Result_24_fu_1167_p3 = tmp_V_7_fu_1141_p2[32'd15];

assign p_Result_25_fu_1450_p2 = (and_ln414_2_fu_1444_p2 | and_ln414_1_fu_1438_p2);

assign p_Result_s_fu_682_p2 = (lshr_ln647_fu_670_p2 & lshr_ln647_1_fu_676_p2);

assign p_Val2_21_fu_1325_p3 = ((or_ln340_2_fu_1305_p2[0:0] === 1'b1) ? select_ln340_fu_1311_p3 : select_ln388_fu_1318_p3);

assign ret_V_10_fu_977_p2 = ($signed(17'd1) + $signed(lhs_V_fu_973_p1));

assign rhs_V_1_fu_1072_p3 = {{trunc_ln728_reg_1667}, {10'd0}};

assign select_ln340_1_fu_1035_p3 = ((xor_ln340_fu_1017_p2[0:0] === 1'b1) ? 16'd32767 : tmp_num_V_fu_991_p2);

assign select_ln340_fu_1311_p3 = ((or_ln340_1_fu_1294_p2[0:0] === 1'b1) ? 16'd32767 : tmp_V_7_reg_1698);

assign select_ln388_1_fu_1043_p3 = ((underflow_fu_1011_p2[0:0] === 1'b1) ? 16'd32768 : tmp_num_V_fu_991_p2);

assign select_ln388_fu_1318_p3 = ((underflow_1_fu_1289_p2[0:0] === 1'b1) ? 16'd32768 : tmp_V_7_reg_1698);

assign select_ln414_1_fu_1356_p3 = ((grp_fu_333_p2[0:0] === 1'b1) ? zext_ln414_1_fu_1339_p1 : zext_ln414_fu_1336_p1);

assign select_ln414_2_fu_1364_p3 = ((grp_fu_333_p2[0:0] === 1'b1) ? xor_ln414_fu_1342_p2 : zext_ln414_fu_1336_p1);

assign select_ln414_3_fu_1406_p3 = ((grp_fu_333_p2[0:0] === 1'b1) ? tmp_44_fu_1396_p4 : shl_ln414_fu_1390_p2);

assign select_ln414_fu_1348_p3 = ((grp_fu_333_p2[0:0] === 1'b1) ? zext_ln414_fu_1336_p1 : zext_ln414_1_fu_1339_p1);

assign select_ln647_10_fu_906_p3 = ((icmp_ln647_3_reg_1630[0:0] === 1'b1) ? tmp_34_fu_872_p4 : moving_mean_pack_V_reg_1569);

assign select_ln647_11_fu_912_p3 = ((icmp_ln647_3_reg_1630[0:0] === 1'b1) ? xor_ln647_3_fu_887_p2 : zext_ln647_12_fu_866_p1);

assign select_ln647_12_fu_564_p3 = ((icmp_ln647_4_fu_523_p2[0:0] === 1'b1) ? sub_ln647_12_fu_546_p2 : sub_ln647_13_fu_558_p2);

assign select_ln647_13_fu_572_p3 = ((icmp_ln647_4_fu_523_p2[0:0] === 1'b1) ? tmp_35_fu_537_p4 : moving_variance_pack_reg_1575);

assign select_ln647_14_fu_579_p3 = ((icmp_ln647_4_fu_523_p2[0:0] === 1'b1) ? xor_ln647_4_fu_552_p2 : zext_ln647_16_fu_529_p1);

assign select_ln647_1_fu_643_p3 = ((icmp_ln647_reg_1609[0:0] === 1'b1) ? tmp_31_fu_609_p4 : in_pack_V_reg_1551);

assign select_ln647_2_fu_649_p3 = ((icmp_ln647_reg_1609[0:0] === 1'b1) ? xor_ln647_fu_624_p2 : zext_ln647_fu_603_p1);

assign select_ln647_3_fu_725_p3 = ((icmp_ln647_1_reg_1616[0:0] === 1'b1) ? sub_ln647_3_fu_707_p2 : sub_ln647_4_fu_719_p2);

assign select_ln647_4_fu_732_p3 = ((icmp_ln647_1_reg_1616[0:0] === 1'b1) ? tmp_32_fu_698_p4 : beta_pack_V_reg_1557);

assign select_ln647_5_fu_738_p3 = ((icmp_ln647_1_reg_1616[0:0] === 1'b1) ? xor_ln647_1_fu_713_p2 : zext_ln647_4_fu_692_p1);

assign select_ln647_6_fu_810_p3 = ((icmp_ln647_2_reg_1623[0:0] === 1'b1) ? sub_ln647_6_fu_792_p2 : sub_ln647_7_fu_804_p2);

assign select_ln647_7_fu_817_p3 = ((icmp_ln647_2_reg_1623[0:0] === 1'b1) ? tmp_33_fu_783_p4 : gamma_pack_V_reg_1563);

assign select_ln647_8_fu_823_p3 = ((icmp_ln647_2_reg_1623[0:0] === 1'b1) ? xor_ln647_2_fu_798_p2 : zext_ln647_8_fu_777_p1);

assign select_ln647_9_fu_899_p3 = ((icmp_ln647_3_reg_1630[0:0] === 1'b1) ? sub_ln647_9_fu_881_p2 : sub_ln647_10_fu_893_p2);

assign select_ln647_fu_636_p3 = ((icmp_ln647_reg_1609[0:0] === 1'b1) ? sub_ln647_fu_618_p2 : sub_ln647_1_fu_630_p2);

assign shl_ln414_1_fu_1414_p2 = 64'd18446744073709551615 << zext_ln414_3_fu_1382_p1;

assign shl_ln414_fu_1390_p2 = tmp_V_8_fu_1333_p1 << zext_ln414_2_fu_1378_p1;

assign sub_ln647_10_fu_893_p2 = (zext_ln647_13_fu_869_p1 - zext_ln647_12_fu_866_p1);

assign sub_ln647_11_fu_919_p2 = (7'd63 - select_ln647_9_fu_899_p3);

assign sub_ln647_12_fu_546_p2 = (zext_ln647_16_fu_529_p1 - zext_ln647_17_fu_533_p1);

assign sub_ln647_13_fu_558_p2 = (zext_ln647_17_fu_533_p1 - zext_ln647_16_fu_529_p1);

assign sub_ln647_14_fu_587_p2 = (7'd63 - select_ln647_12_fu_564_p3);

assign sub_ln647_1_fu_630_p2 = (zext_ln647_1_fu_606_p1 - zext_ln647_fu_603_p1);

assign sub_ln647_2_fu_656_p2 = (7'd63 - select_ln647_fu_636_p3);

assign sub_ln647_3_fu_707_p2 = (zext_ln647_4_fu_692_p1 - zext_ln647_5_fu_695_p1);

assign sub_ln647_4_fu_719_p2 = (zext_ln647_5_fu_695_p1 - zext_ln647_4_fu_692_p1);

assign sub_ln647_5_fu_745_p2 = (7'd63 - select_ln647_3_fu_725_p3);

assign sub_ln647_6_fu_792_p2 = (zext_ln647_8_fu_777_p1 - zext_ln647_9_fu_780_p1);

assign sub_ln647_7_fu_804_p2 = (zext_ln647_9_fu_780_p1 - zext_ln647_8_fu_777_p1);

assign sub_ln647_8_fu_830_p2 = (7'd63 - select_ln647_6_fu_810_p3);

assign sub_ln647_9_fu_881_p2 = (zext_ln647_12_fu_866_p1 - zext_ln647_13_fu_869_p1);

assign sub_ln647_fu_618_p2 = (zext_ln647_fu_603_p1 - zext_ln647_1_fu_606_p1);

integer ap_tvar_int_0;

always @ (in_pack_V_reg_1551) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_31_fu_609_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_31_fu_609_p4[ap_tvar_int_0] = in_pack_V_reg_1551[63 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (beta_pack_V_reg_1557) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_32_fu_698_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_32_fu_698_p4[ap_tvar_int_1] = beta_pack_V_reg_1557[63 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (gamma_pack_V_reg_1563) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            tmp_33_fu_783_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_33_fu_783_p4[ap_tvar_int_2] = gamma_pack_V_reg_1563[63 - ap_tvar_int_2];
        end
    end
end

integer ap_tvar_int_3;

always @ (moving_mean_pack_V_reg_1569) begin
    for (ap_tvar_int_3 = 64 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 63 - 0) begin
            tmp_34_fu_872_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_34_fu_872_p4[ap_tvar_int_3] = moving_mean_pack_V_reg_1569[63 - ap_tvar_int_3];
        end
    end
end

integer ap_tvar_int_4;

always @ (moving_variance_pack_reg_1575) begin
    for (ap_tvar_int_4 = 64 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 63 - 0) begin
            tmp_35_fu_537_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_35_fu_537_p4[ap_tvar_int_4] = moving_variance_pack_reg_1575[63 - ap_tvar_int_4];
        end
    end
end

assign tmp_40_fu_1129_p3 = grp_fu_1097_p2[32'd9];

assign tmp_41_fu_1147_p3 = tmp_V_7_fu_1141_p2[32'd15];

assign tmp_43_fu_1213_p3 = grp_fu_1097_p2[32'd26];

integer ap_tvar_int_5;

always @ (shl_ln414_fu_1390_p2) begin
    for (ap_tvar_int_5 = 64 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 63 - 0) begin
            tmp_44_fu_1396_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_44_fu_1396_p4[ap_tvar_int_5] = shl_ln414_fu_1390_p2[63 - ap_tvar_int_5];
        end
    end
end

assign tmp_7_fu_1191_p4 = {{grp_fu_1097_p2[43:26]}};

assign tmp_V_7_fu_1141_p2 = (tmp_V_fu_1111_p4 + zext_ln415_fu_1137_p1);

assign tmp_V_8_fu_1333_p1 = p_Val2_21_reg_1732;

assign tmp_V_fu_1111_p4 = {{grp_fu_1097_p2[25:10]}};

assign tmp_fu_1175_p4 = {{grp_fu_1097_p2[43:27]}};

assign tmp_num_V_fu_991_p2 = ($signed(16'd1) + $signed(moving_variance_m_3_fu_969_p1));

assign tmp_s_fu_1083_p3 = {{ret_V_11_reg_1672}, {10'd0}};

assign trunc_ln41_fu_485_p1 = k_0_reg_317[1:0];

assign trunc_ln728_fu_1059_p1 = p_Result_16_fu_771_p2[15:0];

assign underflow_1_fu_1289_p2 = (xor_ln786_1_fu_1283_p2 & p_Result_22_reg_1692);

assign underflow_fu_1011_p2 = (xor_ln786_fu_1005_p2 & p_Result_20_fu_983_p3);

assign x_V_fu_1051_p3 = ((or_ln340_fu_1029_p2[0:0] === 1'b1) ? select_ln340_1_fu_1035_p3 : select_ln388_1_fu_1043_p3);

assign xor_ln340_1_fu_1023_p2 = (p_Result_20_fu_983_p3 ^ 1'd1);

assign xor_ln340_fu_1017_p2 = (p_Result_21_fu_997_p3 ^ p_Result_20_fu_983_p3);

assign xor_ln414_1_fu_1372_p2 = (select_ln414_fu_1348_p3 ^ 7'd63);

assign xor_ln414_2_fu_1432_p2 = (64'd18446744073709551615 ^ and_ln414_fu_1426_p2);

assign xor_ln414_fu_1342_p2 = (zext_ln414_fu_1336_p1 ^ 7'd63);

assign xor_ln416_fu_1155_p2 = (tmp_41_fu_1147_p3 ^ 1'd1);

assign xor_ln647_1_fu_713_p2 = (zext_ln647_4_fu_692_p1 ^ 7'd63);

assign xor_ln647_2_fu_798_p2 = (zext_ln647_8_fu_777_p1 ^ 7'd63);

assign xor_ln647_3_fu_887_p2 = (zext_ln647_12_fu_866_p1 ^ 7'd63);

assign xor_ln647_4_fu_552_p2 = (zext_ln647_16_fu_529_p1 ^ 7'd63);

assign xor_ln647_fu_624_p2 = (zext_ln647_fu_603_p1 ^ 7'd63);

assign xor_ln779_fu_1221_p2 = (tmp_43_fu_1213_p3 ^ 1'd1);

assign xor_ln785_1_fu_1267_p2 = (p_Result_22_reg_1692 ^ 1'd1);

assign xor_ln785_fu_1256_p2 = (deleted_zeros_fu_1247_p3 ^ 1'd1);

assign xor_ln786_1_fu_1283_p2 = (or_ln786_fu_1278_p2 ^ 1'd1);

assign xor_ln786_fu_1005_p2 = (p_Result_21_fu_997_p3 ^ 1'd1);

assign zext_ln414_1_fu_1339_p1 = or_ln41_reg_1599;

assign zext_ln414_2_fu_1378_p1 = select_ln414_2_fu_1364_p3;

assign zext_ln414_3_fu_1382_p1 = select_ln414_1_fu_1356_p3;

assign zext_ln414_4_fu_1386_p1 = xor_ln414_1_fu_1372_p2;

assign zext_ln414_fu_1336_p1 = Lo_assign_reg_1589;

assign zext_ln415_fu_1137_p1 = tmp_40_fu_1129_p3;

assign zext_ln647_10_fu_836_p1 = select_ln647_8_fu_823_p3;

assign zext_ln647_11_fu_840_p1 = sub_ln647_8_fu_830_p2;

assign zext_ln647_12_fu_866_p1 = Lo_assign_reg_1589;

assign zext_ln647_13_fu_869_p1 = or_ln41_reg_1599;

assign zext_ln647_14_fu_925_p1 = select_ln647_11_fu_912_p3;

assign zext_ln647_15_fu_929_p1 = sub_ln647_11_fu_919_p2;

assign zext_ln647_16_fu_529_p1 = Lo_assign_fu_489_p3;

assign zext_ln647_17_fu_533_p1 = or_ln41_fu_498_p2;

assign zext_ln647_18_fu_593_p1 = select_ln647_14_fu_579_p3;

assign zext_ln647_19_fu_955_p1 = sub_ln647_14_reg_1637;

assign zext_ln647_1_fu_606_p1 = or_ln41_reg_1599;

assign zext_ln647_2_fu_662_p1 = select_ln647_2_fu_649_p3;

assign zext_ln647_3_fu_666_p1 = sub_ln647_2_fu_656_p2;

assign zext_ln647_4_fu_692_p1 = Lo_assign_reg_1589;

assign zext_ln647_5_fu_695_p1 = or_ln41_reg_1599;

assign zext_ln647_6_fu_751_p1 = select_ln647_5_fu_738_p3;

assign zext_ln647_7_fu_755_p1 = sub_ln647_5_fu_745_p2;

assign zext_ln647_8_fu_777_p1 = Lo_assign_reg_1589;

assign zext_ln647_9_fu_780_p1 = or_ln41_reg_1599;

assign zext_ln647_fu_603_p1 = Lo_assign_reg_1589;

always @ (posedge ap_clk) begin
    Lo_assign_reg_1589[3:0] <= 4'b0000;
    or_ln41_reg_1599[3:0] <= 4'b1111;
    sub_ln647_14_reg_1637[0] <= 1'b0;
end

endmodule //bn
