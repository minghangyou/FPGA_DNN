-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bn is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BETA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BETA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GAMMA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GAMMA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_M_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_M_M_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BETA_USER_VALUE : INTEGER := 0;
    C_M_AXI_BETA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BETA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GAMMA_USER_VALUE : INTEGER := 0;
    C_M_AXI_GAMMA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GAMMA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_M_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_M_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_M_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IN_r_AWVALID : OUT STD_LOGIC;
    m_axi_IN_r_AWREADY : IN STD_LOGIC;
    m_axi_IN_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_IN_r_WVALID : OUT STD_LOGIC;
    m_axi_IN_r_WREADY : IN STD_LOGIC;
    m_axi_IN_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_IN_r_WLAST : OUT STD_LOGIC;
    m_axi_IN_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_IN_r_ARVALID : OUT STD_LOGIC;
    m_axi_IN_r_ARREADY : IN STD_LOGIC;
    m_axi_IN_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RVALID : IN STD_LOGIC;
    m_axi_IN_r_RREADY : OUT STD_LOGIC;
    m_axi_IN_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_RLAST : IN STD_LOGIC;
    m_axi_IN_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BVALID : IN STD_LOGIC;
    m_axi_IN_r_BREADY : OUT STD_LOGIC;
    m_axi_IN_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_BETA_AWVALID : OUT STD_LOGIC;
    m_axi_BETA_AWREADY : IN STD_LOGIC;
    m_axi_BETA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ADDR_WIDTH-1 downto 0);
    m_axi_BETA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BETA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_AWUSER_WIDTH-1 downto 0);
    m_axi_BETA_WVALID : OUT STD_LOGIC;
    m_axi_BETA_WREADY : IN STD_LOGIC;
    m_axi_BETA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH-1 downto 0);
    m_axi_BETA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH/8-1 downto 0);
    m_axi_BETA_WLAST : OUT STD_LOGIC;
    m_axi_BETA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_WUSER_WIDTH-1 downto 0);
    m_axi_BETA_ARVALID : OUT STD_LOGIC;
    m_axi_BETA_ARREADY : IN STD_LOGIC;
    m_axi_BETA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ADDR_WIDTH-1 downto 0);
    m_axi_BETA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BETA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ARUSER_WIDTH-1 downto 0);
    m_axi_BETA_RVALID : IN STD_LOGIC;
    m_axi_BETA_RREADY : OUT STD_LOGIC;
    m_axi_BETA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH-1 downto 0);
    m_axi_BETA_RLAST : IN STD_LOGIC;
    m_axi_BETA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_RUSER_WIDTH-1 downto 0);
    m_axi_BETA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_BVALID : IN STD_LOGIC;
    m_axi_BETA_BREADY : OUT STD_LOGIC;
    m_axi_BETA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_BUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_AWVALID : OUT STD_LOGIC;
    m_axi_GAMMA_AWREADY : IN STD_LOGIC;
    m_axi_GAMMA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ADDR_WIDTH-1 downto 0);
    m_axi_GAMMA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_GAMMA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_AWUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_WVALID : OUT STD_LOGIC;
    m_axi_GAMMA_WREADY : IN STD_LOGIC;
    m_axi_GAMMA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH-1 downto 0);
    m_axi_GAMMA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH/8-1 downto 0);
    m_axi_GAMMA_WLAST : OUT STD_LOGIC;
    m_axi_GAMMA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_WUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_ARVALID : OUT STD_LOGIC;
    m_axi_GAMMA_ARREADY : IN STD_LOGIC;
    m_axi_GAMMA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ADDR_WIDTH-1 downto 0);
    m_axi_GAMMA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_GAMMA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ARUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_RVALID : IN STD_LOGIC;
    m_axi_GAMMA_RREADY : OUT STD_LOGIC;
    m_axi_GAMMA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH-1 downto 0);
    m_axi_GAMMA_RLAST : IN STD_LOGIC;
    m_axi_GAMMA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_RUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_BVALID : IN STD_LOGIC;
    m_axi_GAMMA_BREADY : OUT STD_LOGIC;
    m_axi_GAMMA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_BUSER_WIDTH-1 downto 0);
    m_axi_M_M_AWVALID : OUT STD_LOGIC;
    m_axi_M_M_AWREADY : IN STD_LOGIC;
    m_axi_M_M_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ADDR_WIDTH-1 downto 0);
    m_axi_M_M_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_M_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_AWUSER_WIDTH-1 downto 0);
    m_axi_M_M_WVALID : OUT STD_LOGIC;
    m_axi_M_M_WREADY : IN STD_LOGIC;
    m_axi_M_M_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH-1 downto 0);
    m_axi_M_M_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH/8-1 downto 0);
    m_axi_M_M_WLAST : OUT STD_LOGIC;
    m_axi_M_M_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_WUSER_WIDTH-1 downto 0);
    m_axi_M_M_ARVALID : OUT STD_LOGIC;
    m_axi_M_M_ARREADY : IN STD_LOGIC;
    m_axi_M_M_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ADDR_WIDTH-1 downto 0);
    m_axi_M_M_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_M_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ARUSER_WIDTH-1 downto 0);
    m_axi_M_M_RVALID : IN STD_LOGIC;
    m_axi_M_M_RREADY : OUT STD_LOGIC;
    m_axi_M_M_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH-1 downto 0);
    m_axi_M_M_RLAST : IN STD_LOGIC;
    m_axi_M_M_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_RUSER_WIDTH-1 downto 0);
    m_axi_M_M_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_BVALID : IN STD_LOGIC;
    m_axi_M_M_BREADY : OUT STD_LOGIC;
    m_axi_M_M_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_BUSER_WIDTH-1 downto 0);
    m_axi_M_V_AWVALID : OUT STD_LOGIC;
    m_axi_M_V_AWREADY : IN STD_LOGIC;
    m_axi_M_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_M_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_M_V_WVALID : OUT STD_LOGIC;
    m_axi_M_V_WREADY : IN STD_LOGIC;
    m_axi_M_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_M_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_M_V_WLAST : OUT STD_LOGIC;
    m_axi_M_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_M_V_ARVALID : OUT STD_LOGIC;
    m_axi_M_V_ARREADY : IN STD_LOGIC;
    m_axi_M_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_M_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_M_V_RVALID : IN STD_LOGIC;
    m_axi_M_V_RREADY : OUT STD_LOGIC;
    m_axi_M_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_M_V_RLAST : IN STD_LOGIC;
    m_axi_M_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_M_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_BVALID : IN STD_LOGIC;
    m_axi_M_V_BREADY : OUT STD_LOGIC;
    m_axi_M_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=7884,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=1,HLS_SYN_FF=5563,HLS_SYN_LUT=11944,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (73 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (73 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (73 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (73 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (73 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (73 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (73 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (73 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (73 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (73 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (73 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_V : STD_LOGIC_VECTOR (31 downto 0);
    signal gamma_V : STD_LOGIC_VECTOR (31 downto 0);
    signal moving_mean_V : STD_LOGIC_VECTOR (31 downto 0);
    signal moving_variance_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal IN_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln281_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_blk_n_AR : STD_LOGIC;
    signal BETA_blk_n_R : STD_LOGIC;
    signal GAMMA_blk_n_AR : STD_LOGIC;
    signal GAMMA_blk_n_R : STD_LOGIC;
    signal M_M_blk_n_AR : STD_LOGIC;
    signal M_M_blk_n_R : STD_LOGIC;
    signal M_V_blk_n_AR : STD_LOGIC;
    signal M_V_blk_n_R : STD_LOGIC;
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln288_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal IN_r_AWREADY : STD_LOGIC;
    signal IN_r_WREADY : STD_LOGIC;
    signal IN_r_ARVALID : STD_LOGIC;
    signal IN_r_ARREADY : STD_LOGIC;
    signal IN_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_RVALID : STD_LOGIC;
    signal IN_r_RREADY : STD_LOGIC;
    signal IN_r_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal IN_r_RLAST : STD_LOGIC;
    signal IN_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BVALID : STD_LOGIC;
    signal IN_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_AWREADY : STD_LOGIC;
    signal BETA_WREADY : STD_LOGIC;
    signal BETA_ARVALID : STD_LOGIC;
    signal BETA_ARREADY : STD_LOGIC;
    signal BETA_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal BETA_RVALID : STD_LOGIC;
    signal BETA_RREADY : STD_LOGIC;
    signal BETA_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal BETA_RLAST : STD_LOGIC;
    signal BETA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BETA_BVALID : STD_LOGIC;
    signal BETA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BETA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_AWREADY : STD_LOGIC;
    signal GAMMA_WREADY : STD_LOGIC;
    signal GAMMA_ARVALID : STD_LOGIC;
    signal GAMMA_ARREADY : STD_LOGIC;
    signal GAMMA_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal GAMMA_RVALID : STD_LOGIC;
    signal GAMMA_RREADY : STD_LOGIC;
    signal GAMMA_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal GAMMA_RLAST : STD_LOGIC;
    signal GAMMA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal GAMMA_BVALID : STD_LOGIC;
    signal GAMMA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal GAMMA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_AWREADY : STD_LOGIC;
    signal M_M_WREADY : STD_LOGIC;
    signal M_M_ARVALID : STD_LOGIC;
    signal M_M_ARREADY : STD_LOGIC;
    signal M_M_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal M_M_RVALID : STD_LOGIC;
    signal M_M_RREADY : STD_LOGIC;
    signal M_M_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal M_M_RLAST : STD_LOGIC;
    signal M_M_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_M_BVALID : STD_LOGIC;
    signal M_M_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_M_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_AWREADY : STD_LOGIC;
    signal M_V_WREADY : STD_LOGIC;
    signal M_V_ARVALID : STD_LOGIC;
    signal M_V_ARREADY : STD_LOGIC;
    signal M_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal M_V_RVALID : STD_LOGIC;
    signal M_V_RREADY : STD_LOGIC;
    signal M_V_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal M_V_RLAST : STD_LOGIC;
    signal M_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_V_BVALID : STD_LOGIC;
    signal M_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V1_reg_1477 : STD_LOGIC_VECTOR (28 downto 0);
    signal moving_variance_V9_reg_1482 : STD_LOGIC_VECTOR (28 downto 0);
    signal moving_mean_V7_reg_1487 : STD_LOGIC_VECTOR (28 downto 0);
    signal gamma_V5_reg_1492 : STD_LOGIC_VECTOR (28 downto 0);
    signal beta_V3_reg_1497 : STD_LOGIC_VECTOR (28 downto 0);
    signal in_V1_reg_1502 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal i_fu_467_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1546 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal in_pack_V_reg_1551 : STD_LOGIC_VECTOR (63 downto 0);
    signal beta_pack_V_reg_1557 : STD_LOGIC_VECTOR (63 downto 0);
    signal gamma_pack_V_reg_1563 : STD_LOGIC_VECTOR (63 downto 0);
    signal moving_mean_pack_V_reg_1569 : STD_LOGIC_VECTOR (63 downto 0);
    signal moving_variance_pack_reg_1575 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_479_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_1584 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state10_io : BOOLEAN;
    signal index2_fu_489_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal index2_reg_1589 : STD_LOGIC_VECTOR (5 downto 0);
    signal index1_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal index1_reg_1599 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_1_reg_1616 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_2_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_2_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_3_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln647_3_reg_1630 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_14_fu_587_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_14_reg_1637 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln647_8_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_8_reg_1642 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_m_3_V_fu_688_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_3_V_reg_1647 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal gamma_m_3_V_fu_862_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal gamma_m_3_V_reg_1652 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_3_V_fu_951_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_3_V_reg_1657 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_fu_1051_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_reg_1662 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_fu_1059_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_1667 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1461_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_11_reg_1672 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_sqrt_fixed_16_6_s_fu_328_ap_return : STD_LOGIC_VECTOR (12 downto 0);
    signal x_sqrt_V_reg_1677 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_Result_22_reg_1692 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_V_7_fu_1141_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_7_reg_1698 : STD_LOGIC_VECTOR (15 downto 0);
    signal carry_1_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_1704 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_1167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1710 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_1715 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_1721 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_reg_1726 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_21_fu_1325_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_21_reg_1732 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal i_0_reg_306 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_0_reg_317 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal empty_27_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_28_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_29_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_30_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_31_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_190 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_25_fu_1450_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln289_fu_485_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln647_16_fu_529_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln647_17_fu_533_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln647_4_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_12_fu_546_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_13_fu_558_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_fu_537_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln647_4_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_12_fu_564_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_14_fu_579_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_13_fu_572_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_18_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_fu_603_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln647_1_fu_606_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_fu_618_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_1_fu_630_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_609_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln647_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_fu_636_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_2_fu_649_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_2_fu_656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_1_fu_643_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_2_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_3_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_1_fu_676_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_682_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_4_fu_692_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln647_5_fu_695_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_3_fu_707_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_4_fu_719_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_698_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln647_1_fu_713_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_3_fu_725_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_5_fu_738_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_5_fu_745_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_4_fu_732_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_6_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_7_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_2_fu_759_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_3_fu_765_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_8_fu_777_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln647_9_fu_780_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_6_fu_792_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_7_fu_804_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_783_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln647_2_fu_798_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_6_fu_810_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_8_fu_823_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_8_fu_830_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_7_fu_817_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_10_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_11_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_4_fu_844_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_5_fu_850_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_17_fu_856_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_12_fu_866_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln647_13_fu_869_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_9_fu_881_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_10_fu_893_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_872_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln647_3_fu_887_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_9_fu_899_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_11_fu_912_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln647_11_fu_919_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln647_10_fu_906_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_14_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_15_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_6_fu_933_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_7_fu_939_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_18_fu_945_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_19_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln647_9_fu_958_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_19_fu_964_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal moving_variance_m_3_fu_969_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_973_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_10_fu_977_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_num_V_fu_991_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_21_fu_997_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_983_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_1035_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_1043_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_fu_771_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_1_fu_1072_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_s_fu_1083_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_1097_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal grp_fu_1097_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1097_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_40_fu_1129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_1111_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_1137_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_1147_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_23_fu_1121_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1175_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_1191_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_43_fu_1213_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_1278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1311_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_1318_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln414_fu_1336_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln414_1_fu_1339_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln414_fu_1342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_fu_1348_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_2_fu_1364_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln414_1_fu_1356_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln414_1_fu_1372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_8_fu_1333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_2_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_fu_1390_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_1396_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_3_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_4_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln414_1_fu_1414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln414_fu_1420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln414_fu_1426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln414_2_fu_1432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln414_3_fu_1406_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln414_1_fu_1438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln414_2_fu_1444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1097_ap_start : STD_LOGIC;
    signal grp_fu_1097_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (73 downto 0);
    signal grp_fu_1097_p10 : STD_LOGIC_VECTOR (43 downto 0);

    component sqrt_fixed_16_6_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component bn_sdiv_44s_14ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component bn_ama_submuladd_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component bn_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        beta_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        gamma_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        moving_mean_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        moving_variance_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bn_IN_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_BETA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_GAMMA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_M_M_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_M_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bn_CTRL_s_axi_U : component bn_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_V => in_V,
        beta_V => beta_V,
        gamma_V => gamma_V,
        moving_mean_V => moving_mean_V,
        moving_variance_V => moving_variance_V,
        out_V => out_V);

    bn_IN_r_m_axi_U : component bn_IN_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IN_r_AWVALID,
        AWREADY => m_axi_IN_r_AWREADY,
        AWADDR => m_axi_IN_r_AWADDR,
        AWID => m_axi_IN_r_AWID,
        AWLEN => m_axi_IN_r_AWLEN,
        AWSIZE => m_axi_IN_r_AWSIZE,
        AWBURST => m_axi_IN_r_AWBURST,
        AWLOCK => m_axi_IN_r_AWLOCK,
        AWCACHE => m_axi_IN_r_AWCACHE,
        AWPROT => m_axi_IN_r_AWPROT,
        AWQOS => m_axi_IN_r_AWQOS,
        AWREGION => m_axi_IN_r_AWREGION,
        AWUSER => m_axi_IN_r_AWUSER,
        WVALID => m_axi_IN_r_WVALID,
        WREADY => m_axi_IN_r_WREADY,
        WDATA => m_axi_IN_r_WDATA,
        WSTRB => m_axi_IN_r_WSTRB,
        WLAST => m_axi_IN_r_WLAST,
        WID => m_axi_IN_r_WID,
        WUSER => m_axi_IN_r_WUSER,
        ARVALID => m_axi_IN_r_ARVALID,
        ARREADY => m_axi_IN_r_ARREADY,
        ARADDR => m_axi_IN_r_ARADDR,
        ARID => m_axi_IN_r_ARID,
        ARLEN => m_axi_IN_r_ARLEN,
        ARSIZE => m_axi_IN_r_ARSIZE,
        ARBURST => m_axi_IN_r_ARBURST,
        ARLOCK => m_axi_IN_r_ARLOCK,
        ARCACHE => m_axi_IN_r_ARCACHE,
        ARPROT => m_axi_IN_r_ARPROT,
        ARQOS => m_axi_IN_r_ARQOS,
        ARREGION => m_axi_IN_r_ARREGION,
        ARUSER => m_axi_IN_r_ARUSER,
        RVALID => m_axi_IN_r_RVALID,
        RREADY => m_axi_IN_r_RREADY,
        RDATA => m_axi_IN_r_RDATA,
        RLAST => m_axi_IN_r_RLAST,
        RID => m_axi_IN_r_RID,
        RUSER => m_axi_IN_r_RUSER,
        RRESP => m_axi_IN_r_RRESP,
        BVALID => m_axi_IN_r_BVALID,
        BREADY => m_axi_IN_r_BREADY,
        BRESP => m_axi_IN_r_BRESP,
        BID => m_axi_IN_r_BID,
        BUSER => m_axi_IN_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IN_r_ARVALID,
        I_ARREADY => IN_r_ARREADY,
        I_ARADDR => IN_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IN_r_RVALID,
        I_RREADY => IN_r_RREADY,
        I_RDATA => IN_r_RDATA,
        I_RID => IN_r_RID,
        I_RUSER => IN_r_RUSER,
        I_RRESP => IN_r_RRESP,
        I_RLAST => IN_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IN_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IN_r_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => IN_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IN_r_BRESP,
        I_BID => IN_r_BID,
        I_BUSER => IN_r_BUSER);

    bn_BETA_m_axi_U : component bn_BETA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BETA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BETA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BETA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BETA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BETA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BETA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BETA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BETA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BETA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BETA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BETA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_BETA_AWVALID,
        AWREADY => m_axi_BETA_AWREADY,
        AWADDR => m_axi_BETA_AWADDR,
        AWID => m_axi_BETA_AWID,
        AWLEN => m_axi_BETA_AWLEN,
        AWSIZE => m_axi_BETA_AWSIZE,
        AWBURST => m_axi_BETA_AWBURST,
        AWLOCK => m_axi_BETA_AWLOCK,
        AWCACHE => m_axi_BETA_AWCACHE,
        AWPROT => m_axi_BETA_AWPROT,
        AWQOS => m_axi_BETA_AWQOS,
        AWREGION => m_axi_BETA_AWREGION,
        AWUSER => m_axi_BETA_AWUSER,
        WVALID => m_axi_BETA_WVALID,
        WREADY => m_axi_BETA_WREADY,
        WDATA => m_axi_BETA_WDATA,
        WSTRB => m_axi_BETA_WSTRB,
        WLAST => m_axi_BETA_WLAST,
        WID => m_axi_BETA_WID,
        WUSER => m_axi_BETA_WUSER,
        ARVALID => m_axi_BETA_ARVALID,
        ARREADY => m_axi_BETA_ARREADY,
        ARADDR => m_axi_BETA_ARADDR,
        ARID => m_axi_BETA_ARID,
        ARLEN => m_axi_BETA_ARLEN,
        ARSIZE => m_axi_BETA_ARSIZE,
        ARBURST => m_axi_BETA_ARBURST,
        ARLOCK => m_axi_BETA_ARLOCK,
        ARCACHE => m_axi_BETA_ARCACHE,
        ARPROT => m_axi_BETA_ARPROT,
        ARQOS => m_axi_BETA_ARQOS,
        ARREGION => m_axi_BETA_ARREGION,
        ARUSER => m_axi_BETA_ARUSER,
        RVALID => m_axi_BETA_RVALID,
        RREADY => m_axi_BETA_RREADY,
        RDATA => m_axi_BETA_RDATA,
        RLAST => m_axi_BETA_RLAST,
        RID => m_axi_BETA_RID,
        RUSER => m_axi_BETA_RUSER,
        RRESP => m_axi_BETA_RRESP,
        BVALID => m_axi_BETA_BVALID,
        BREADY => m_axi_BETA_BREADY,
        BRESP => m_axi_BETA_BRESP,
        BID => m_axi_BETA_BID,
        BUSER => m_axi_BETA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => BETA_ARVALID,
        I_ARREADY => BETA_ARREADY,
        I_ARADDR => BETA_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => BETA_RVALID,
        I_RREADY => BETA_RREADY,
        I_RDATA => BETA_RDATA,
        I_RID => BETA_RID,
        I_RUSER => BETA_RUSER,
        I_RRESP => BETA_RRESP,
        I_RLAST => BETA_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BETA_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BETA_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => BETA_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => BETA_BRESP,
        I_BID => BETA_BID,
        I_BUSER => BETA_BUSER);

    bn_GAMMA_m_axi_U : component bn_GAMMA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GAMMA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GAMMA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GAMMA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GAMMA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GAMMA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GAMMA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GAMMA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GAMMA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GAMMA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GAMMA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GAMMA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_GAMMA_AWVALID,
        AWREADY => m_axi_GAMMA_AWREADY,
        AWADDR => m_axi_GAMMA_AWADDR,
        AWID => m_axi_GAMMA_AWID,
        AWLEN => m_axi_GAMMA_AWLEN,
        AWSIZE => m_axi_GAMMA_AWSIZE,
        AWBURST => m_axi_GAMMA_AWBURST,
        AWLOCK => m_axi_GAMMA_AWLOCK,
        AWCACHE => m_axi_GAMMA_AWCACHE,
        AWPROT => m_axi_GAMMA_AWPROT,
        AWQOS => m_axi_GAMMA_AWQOS,
        AWREGION => m_axi_GAMMA_AWREGION,
        AWUSER => m_axi_GAMMA_AWUSER,
        WVALID => m_axi_GAMMA_WVALID,
        WREADY => m_axi_GAMMA_WREADY,
        WDATA => m_axi_GAMMA_WDATA,
        WSTRB => m_axi_GAMMA_WSTRB,
        WLAST => m_axi_GAMMA_WLAST,
        WID => m_axi_GAMMA_WID,
        WUSER => m_axi_GAMMA_WUSER,
        ARVALID => m_axi_GAMMA_ARVALID,
        ARREADY => m_axi_GAMMA_ARREADY,
        ARADDR => m_axi_GAMMA_ARADDR,
        ARID => m_axi_GAMMA_ARID,
        ARLEN => m_axi_GAMMA_ARLEN,
        ARSIZE => m_axi_GAMMA_ARSIZE,
        ARBURST => m_axi_GAMMA_ARBURST,
        ARLOCK => m_axi_GAMMA_ARLOCK,
        ARCACHE => m_axi_GAMMA_ARCACHE,
        ARPROT => m_axi_GAMMA_ARPROT,
        ARQOS => m_axi_GAMMA_ARQOS,
        ARREGION => m_axi_GAMMA_ARREGION,
        ARUSER => m_axi_GAMMA_ARUSER,
        RVALID => m_axi_GAMMA_RVALID,
        RREADY => m_axi_GAMMA_RREADY,
        RDATA => m_axi_GAMMA_RDATA,
        RLAST => m_axi_GAMMA_RLAST,
        RID => m_axi_GAMMA_RID,
        RUSER => m_axi_GAMMA_RUSER,
        RRESP => m_axi_GAMMA_RRESP,
        BVALID => m_axi_GAMMA_BVALID,
        BREADY => m_axi_GAMMA_BREADY,
        BRESP => m_axi_GAMMA_BRESP,
        BID => m_axi_GAMMA_BID,
        BUSER => m_axi_GAMMA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => GAMMA_ARVALID,
        I_ARREADY => GAMMA_ARREADY,
        I_ARADDR => GAMMA_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => GAMMA_RVALID,
        I_RREADY => GAMMA_RREADY,
        I_RDATA => GAMMA_RDATA,
        I_RID => GAMMA_RID,
        I_RUSER => GAMMA_RUSER,
        I_RRESP => GAMMA_RRESP,
        I_RLAST => GAMMA_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => GAMMA_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => GAMMA_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => GAMMA_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => GAMMA_BRESP,
        I_BID => GAMMA_BID,
        I_BUSER => GAMMA_BUSER);

    bn_M_M_m_axi_U : component bn_M_M_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_M_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_M_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_M_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_M_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_M_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_M_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_M_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_M_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_M_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_M_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_M_CACHE_VALUE)
    port map (
        AWVALID => m_axi_M_M_AWVALID,
        AWREADY => m_axi_M_M_AWREADY,
        AWADDR => m_axi_M_M_AWADDR,
        AWID => m_axi_M_M_AWID,
        AWLEN => m_axi_M_M_AWLEN,
        AWSIZE => m_axi_M_M_AWSIZE,
        AWBURST => m_axi_M_M_AWBURST,
        AWLOCK => m_axi_M_M_AWLOCK,
        AWCACHE => m_axi_M_M_AWCACHE,
        AWPROT => m_axi_M_M_AWPROT,
        AWQOS => m_axi_M_M_AWQOS,
        AWREGION => m_axi_M_M_AWREGION,
        AWUSER => m_axi_M_M_AWUSER,
        WVALID => m_axi_M_M_WVALID,
        WREADY => m_axi_M_M_WREADY,
        WDATA => m_axi_M_M_WDATA,
        WSTRB => m_axi_M_M_WSTRB,
        WLAST => m_axi_M_M_WLAST,
        WID => m_axi_M_M_WID,
        WUSER => m_axi_M_M_WUSER,
        ARVALID => m_axi_M_M_ARVALID,
        ARREADY => m_axi_M_M_ARREADY,
        ARADDR => m_axi_M_M_ARADDR,
        ARID => m_axi_M_M_ARID,
        ARLEN => m_axi_M_M_ARLEN,
        ARSIZE => m_axi_M_M_ARSIZE,
        ARBURST => m_axi_M_M_ARBURST,
        ARLOCK => m_axi_M_M_ARLOCK,
        ARCACHE => m_axi_M_M_ARCACHE,
        ARPROT => m_axi_M_M_ARPROT,
        ARQOS => m_axi_M_M_ARQOS,
        ARREGION => m_axi_M_M_ARREGION,
        ARUSER => m_axi_M_M_ARUSER,
        RVALID => m_axi_M_M_RVALID,
        RREADY => m_axi_M_M_RREADY,
        RDATA => m_axi_M_M_RDATA,
        RLAST => m_axi_M_M_RLAST,
        RID => m_axi_M_M_RID,
        RUSER => m_axi_M_M_RUSER,
        RRESP => m_axi_M_M_RRESP,
        BVALID => m_axi_M_M_BVALID,
        BREADY => m_axi_M_M_BREADY,
        BRESP => m_axi_M_M_BRESP,
        BID => m_axi_M_M_BID,
        BUSER => m_axi_M_M_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => M_M_ARVALID,
        I_ARREADY => M_M_ARREADY,
        I_ARADDR => M_M_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => M_M_RVALID,
        I_RREADY => M_M_RREADY,
        I_RDATA => M_M_RDATA,
        I_RID => M_M_RID,
        I_RUSER => M_M_RUSER,
        I_RRESP => M_M_RRESP,
        I_RLAST => M_M_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => M_M_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => M_M_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => M_M_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => M_M_BRESP,
        I_BID => M_M_BID,
        I_BUSER => M_M_BUSER);

    bn_M_V_m_axi_U : component bn_M_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_M_V_AWVALID,
        AWREADY => m_axi_M_V_AWREADY,
        AWADDR => m_axi_M_V_AWADDR,
        AWID => m_axi_M_V_AWID,
        AWLEN => m_axi_M_V_AWLEN,
        AWSIZE => m_axi_M_V_AWSIZE,
        AWBURST => m_axi_M_V_AWBURST,
        AWLOCK => m_axi_M_V_AWLOCK,
        AWCACHE => m_axi_M_V_AWCACHE,
        AWPROT => m_axi_M_V_AWPROT,
        AWQOS => m_axi_M_V_AWQOS,
        AWREGION => m_axi_M_V_AWREGION,
        AWUSER => m_axi_M_V_AWUSER,
        WVALID => m_axi_M_V_WVALID,
        WREADY => m_axi_M_V_WREADY,
        WDATA => m_axi_M_V_WDATA,
        WSTRB => m_axi_M_V_WSTRB,
        WLAST => m_axi_M_V_WLAST,
        WID => m_axi_M_V_WID,
        WUSER => m_axi_M_V_WUSER,
        ARVALID => m_axi_M_V_ARVALID,
        ARREADY => m_axi_M_V_ARREADY,
        ARADDR => m_axi_M_V_ARADDR,
        ARID => m_axi_M_V_ARID,
        ARLEN => m_axi_M_V_ARLEN,
        ARSIZE => m_axi_M_V_ARSIZE,
        ARBURST => m_axi_M_V_ARBURST,
        ARLOCK => m_axi_M_V_ARLOCK,
        ARCACHE => m_axi_M_V_ARCACHE,
        ARPROT => m_axi_M_V_ARPROT,
        ARQOS => m_axi_M_V_ARQOS,
        ARREGION => m_axi_M_V_ARREGION,
        ARUSER => m_axi_M_V_ARUSER,
        RVALID => m_axi_M_V_RVALID,
        RREADY => m_axi_M_V_RREADY,
        RDATA => m_axi_M_V_RDATA,
        RLAST => m_axi_M_V_RLAST,
        RID => m_axi_M_V_RID,
        RUSER => m_axi_M_V_RUSER,
        RRESP => m_axi_M_V_RRESP,
        BVALID => m_axi_M_V_BVALID,
        BREADY => m_axi_M_V_BREADY,
        BRESP => m_axi_M_V_BRESP,
        BID => m_axi_M_V_BID,
        BUSER => m_axi_M_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => M_V_ARVALID,
        I_ARREADY => M_V_ARREADY,
        I_ARADDR => M_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => M_V_RVALID,
        I_RREADY => M_V_RREADY,
        I_RDATA => M_V_RDATA,
        I_RID => M_V_RID,
        I_RUSER => M_V_RUSER,
        I_RRESP => M_V_RRESP,
        I_RLAST => M_V_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => M_V_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => M_V_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => M_V_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => M_V_BRESP,
        I_BID => M_V_BID,
        I_BUSER => M_V_BUSER);

    bn_OUT_r_m_axi_U : component bn_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => OUT_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_20,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => p_Val2_s_fu_190,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    grp_sqrt_fixed_16_6_s_fu_328 : component sqrt_fixed_16_6_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x_V => x_V_reg_1662,
        ap_return => grp_sqrt_fixed_16_6_s_fu_328_ap_return);

    bn_sdiv_44s_14ns_bkb_U2 : component bn_sdiv_44s_14ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 48,
        din0_WIDTH => 44,
        din1_WIDTH => 14,
        dout_WIDTH => 44)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1097_ap_start,
        done => grp_fu_1097_ap_done,
        din0 => grp_fu_1097_p0,
        din1 => grp_fu_1097_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1097_p2);

    bn_ama_submuladd_cud_U3 : component bn_ama_submuladd_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 26,
        dout_WIDTH => 33)
    port map (
        din0 => in_m_3_V_reg_1647,
        din1 => moving_mean_m_3_V_reg_1657,
        din2 => gamma_m_3_V_reg_1652,
        din3 => rhs_V_1_fu_1072_p3,
        dout => grp_fu_1461_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (icmp_ln288_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_reg_306 <= i_reg_1546;
            elsif (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_0_reg_306 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_0_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                k_0_reg_317 <= k_reg_1584;
            elsif ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                k_0_reg_317 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                Range1_all_ones_reg_1715 <= Range1_all_ones_fu_1201_p2;
                Range1_all_zeros_reg_1721 <= Range1_all_zeros_fu_1207_p2;
                and_ln786_reg_1726 <= and_ln786_fu_1241_p2;
                carry_1_reg_1704 <= carry_1_fu_1161_p2;
                p_Result_22_reg_1692 <= grp_fu_1097_p2(43 downto 43);
                p_Result_24_reg_1710 <= tmp_V_7_fu_1141_p2(15 downto 15);
                tmp_V_7_reg_1698 <= tmp_V_7_fu_1141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                beta_V3_reg_1497 <= beta_V(31 downto 3);
                gamma_V5_reg_1492 <= gamma_V(31 downto 3);
                in_V1_reg_1502 <= in_V(31 downto 3);
                moving_mean_V7_reg_1487 <= moving_mean_V(31 downto 3);
                moving_variance_V9_reg_1482 <= moving_variance_V(31 downto 3);
                out_V1_reg_1477 <= out_V(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                beta_pack_V_reg_1557 <= BETA_RDATA;
                gamma_pack_V_reg_1563 <= GAMMA_RDATA;
                in_pack_V_reg_1551 <= IN_r_RDATA;
                moving_mean_pack_V_reg_1569 <= M_M_RDATA;
                moving_variance_pack_reg_1575 <= M_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                gamma_m_3_V_reg_1652 <= gamma_m_3_V_fu_862_p1;
                in_m_3_V_reg_1647 <= in_m_3_V_fu_688_p1;
                moving_mean_m_3_V_reg_1657 <= moving_mean_m_3_V_fu_951_p1;
                trunc_ln728_reg_1667 <= trunc_ln728_fu_1059_p1;
                x_V_reg_1662 <= x_V_fu_1051_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                i_reg_1546 <= i_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (icmp_ln288_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln647_1_reg_1616 <= icmp_ln647_1_fu_505_p2;
                icmp_ln647_2_reg_1623 <= icmp_ln647_2_fu_511_p2;
                icmp_ln647_3_reg_1630 <= icmp_ln647_3_fu_517_p2;
                icmp_ln647_reg_1609 <= grp_fu_333_p2;
                    index1_reg_1599(5 downto 4) <= index1_fu_498_p2(5 downto 4);
                    index2_reg_1589(5 downto 4) <= index2_fu_489_p3(5 downto 4);
                lshr_ln647_8_reg_1642 <= lshr_ln647_8_fu_597_p2;
                    sub_ln647_14_reg_1637(6 downto 1) <= sub_ln647_14_fu_587_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_io) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                k_reg_1584 <= k_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                p_Val2_21_reg_1732 <= p_Val2_21_fu_1325_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                p_Val2_s_fu_190 <= p_Result_25_fu_1450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ret_V_11_reg_1672 <= grp_fu_1461_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                x_sqrt_V_reg_1677 <= grp_sqrt_fixed_16_6_s_fu_328_ap_return;
            end if;
        end if;
    end process;
    index2_reg_1589(3 downto 0) <= "0000";
    index1_reg_1599(3 downto 0) <= "1111";
    sub_ln647_14_reg_1637(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln281_fu_461_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, icmp_ln288_fu_473_p2, ap_CS_fsm_state74, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_AWREADY, OUT_r_BVALID, ap_block_state2_io, ap_block_state10_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_io) and (icmp_ln288_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_boolean_0 = ap_block_state10_io) and (icmp_ln288_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    BETA_ARADDR <= empty_30_fu_431_p1(32 - 1 downto 0);

    BETA_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            BETA_ARVALID <= ap_const_logic_1;
        else 
            BETA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    BETA_RREADY_assign_proc : process(ap_CS_fsm_state9, icmp_ln281_fu_461_p2, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
        if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            BETA_RREADY <= ap_const_logic_1;
        else 
            BETA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    BETA_blk_n_AR_assign_proc : process(m_axi_BETA_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            BETA_blk_n_AR <= m_axi_BETA_ARREADY;
        else 
            BETA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BETA_blk_n_R_assign_proc : process(m_axi_BETA_RVALID, ap_CS_fsm_state9, icmp_ln281_fu_461_p2)
    begin
        if (((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            BETA_blk_n_R <= m_axi_BETA_RVALID;
        else 
            BETA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    GAMMA_ARADDR <= empty_29_fu_421_p1(32 - 1 downto 0);

    GAMMA_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            GAMMA_ARVALID <= ap_const_logic_1;
        else 
            GAMMA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    GAMMA_RREADY_assign_proc : process(ap_CS_fsm_state9, icmp_ln281_fu_461_p2, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
        if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            GAMMA_RREADY <= ap_const_logic_1;
        else 
            GAMMA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    GAMMA_blk_n_AR_assign_proc : process(m_axi_GAMMA_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            GAMMA_blk_n_AR <= m_axi_GAMMA_ARREADY;
        else 
            GAMMA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    GAMMA_blk_n_R_assign_proc : process(m_axi_GAMMA_RVALID, ap_CS_fsm_state9, icmp_ln281_fu_461_p2)
    begin
        if (((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            GAMMA_blk_n_R <= m_axi_GAMMA_RVALID;
        else 
            GAMMA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    IN_r_ARADDR <= empty_31_fu_441_p1(32 - 1 downto 0);

    IN_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_r_ARVALID <= ap_const_logic_1;
        else 
            IN_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_RREADY_assign_proc : process(ap_CS_fsm_state9, icmp_ln281_fu_461_p2, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
        if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            IN_r_RREADY <= ap_const_logic_1;
        else 
            IN_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_blk_n_AR_assign_proc : process(m_axi_IN_r_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IN_r_blk_n_AR <= m_axi_IN_r_ARREADY;
        else 
            IN_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_blk_n_R_assign_proc : process(m_axi_IN_r_RVALID, ap_CS_fsm_state9, icmp_ln281_fu_461_p2)
    begin
        if (((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            IN_r_blk_n_R <= m_axi_IN_r_RVALID;
        else 
            IN_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    M_M_ARADDR <= empty_28_fu_411_p1(32 - 1 downto 0);

    M_M_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            M_M_ARVALID <= ap_const_logic_1;
        else 
            M_M_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    M_M_RREADY_assign_proc : process(ap_CS_fsm_state9, icmp_ln281_fu_461_p2, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
        if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            M_M_RREADY <= ap_const_logic_1;
        else 
            M_M_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    M_M_blk_n_AR_assign_proc : process(m_axi_M_M_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            M_M_blk_n_AR <= m_axi_M_M_ARREADY;
        else 
            M_M_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    M_M_blk_n_R_assign_proc : process(m_axi_M_M_RVALID, ap_CS_fsm_state9, icmp_ln281_fu_461_p2)
    begin
        if (((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            M_M_blk_n_R <= m_axi_M_M_RVALID;
        else 
            M_M_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    M_V_ARADDR <= empty_27_fu_401_p1(32 - 1 downto 0);

    M_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            M_V_ARVALID <= ap_const_logic_1;
        else 
            M_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    M_V_RREADY_assign_proc : process(ap_CS_fsm_state9, icmp_ln281_fu_461_p2, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
        if ((not((((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) and (icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            M_V_RREADY <= ap_const_logic_1;
        else 
            M_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    M_V_blk_n_AR_assign_proc : process(m_axi_M_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            M_V_blk_n_AR <= m_axi_M_V_ARREADY;
        else 
            M_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    M_V_blk_n_R_assign_proc : process(m_axi_M_V_RVALID, ap_CS_fsm_state9, icmp_ln281_fu_461_p2)
    begin
        if (((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            M_V_blk_n_R <= m_axi_M_V_RVALID;
        else 
            M_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    OUT_r_AWADDR <= empty_fu_451_p1(32 - 1 downto 0);

    OUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state8, OUT_r_AWREADY)
    begin
        if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_CS_fsm_state74, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_CS_fsm_state10, icmp_ln288_fu_473_p2, ap_block_state10_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_io) and (icmp_ln288_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_CS_fsm_state10, icmp_ln288_fu_473_p2)
    begin
        if (((icmp_ln288_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    Range1_all_ones_fu_1201_p2 <= "1" when (tmp_7_fu_1191_p4 = ap_const_lv18_3FFFF) else "0";
    Range1_all_zeros_fu_1207_p2 <= "1" when (tmp_7_fu_1191_p4 = ap_const_lv18_0) else "0";
    Range2_all_ones_fu_1185_p2 <= "1" when (tmp_fu_1175_p4 = ap_const_lv17_1FFFF) else "0";
    and_ln414_1_fu_1438_p2 <= (xor_ln414_2_fu_1432_p2 and p_Val2_s_fu_190);
    and_ln414_2_fu_1444_p2 <= (select_ln414_3_fu_1406_p3 and and_ln414_fu_1426_p2);
    and_ln414_fu_1426_p2 <= (shl_ln414_1_fu_1414_p2 and lshr_ln414_fu_1420_p2);
    and_ln779_fu_1227_p2 <= (xor_ln779_fu_1221_p2 and Range2_all_ones_fu_1185_p2);
    and_ln781_fu_1252_p2 <= (carry_1_reg_1704 and Range1_all_ones_reg_1715);
    and_ln786_fu_1241_p2 <= (p_Result_24_fu_1167_p3 and deleted_ones_fu_1233_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_io_assign_proc : process(icmp_ln288_fu_473_p2, OUT_r_WREADY)
    begin
                ap_block_state10_io <= ((icmp_ln288_fu_473_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_r_WREADY));
    end process;


    ap_block_state2_io_assign_proc : process(IN_r_ARREADY, BETA_ARREADY, GAMMA_ARREADY, M_M_ARREADY, M_V_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = M_V_ARREADY) or (ap_const_logic_0 = M_M_ARREADY) or (ap_const_logic_0 = GAMMA_ARREADY) or (ap_const_logic_0 = BETA_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;


    ap_block_state9_assign_proc : process(icmp_ln281_fu_461_p2, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state9 <= (((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((icmp_ln281_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state74, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state74, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    carry_1_fu_1161_p2 <= (xor_ln416_fu_1155_p2 and p_Result_23_fu_1121_p3);
    deleted_ones_fu_1233_p3 <= 
        and_ln779_fu_1227_p2 when (carry_1_fu_1161_p2(0) = '1') else 
        Range1_all_ones_fu_1201_p2;
    deleted_zeros_fu_1247_p3 <= 
        Range1_all_ones_reg_1715 when (carry_1_reg_1704(0) = '1') else 
        Range1_all_zeros_reg_1721;
    empty_27_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(moving_variance_V9_reg_1482),64));
    empty_28_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(moving_mean_V7_reg_1487),64));
    empty_29_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gamma_V5_reg_1492),64));
    empty_30_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(beta_V3_reg_1497),64));
    empty_31_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_V1_reg_1502),64));
    empty_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_V1_reg_1477),64));
    gamma_m_3_V_fu_862_p1 <= p_Result_17_fu_856_p2(16 - 1 downto 0);

    grp_fu_1097_ap_start_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1097_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1097_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_1097_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_1083_p3),44));

    grp_fu_1097_p1 <= grp_fu_1097_p10(14 - 1 downto 0);
    grp_fu_1097_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_sqrt_V_reg_1677),44));

    grp_fu_333_p0_assign_proc : process(ap_CS_fsm_state10, index2_fu_489_p3, index2_reg_1589, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_333_p0 <= index2_reg_1589;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_333_p0 <= index2_fu_489_p3;
        else 
            grp_fu_333_p0 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_333_p1_assign_proc : process(ap_CS_fsm_state10, index1_fu_498_p2, index1_reg_1599, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            grp_fu_333_p1 <= index1_reg_1599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_333_p1 <= index1_fu_498_p2;
        else 
            grp_fu_333_p1 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_333_p2 <= "1" when (unsigned(grp_fu_333_p0) > unsigned(grp_fu_333_p1)) else "0";
    i_fu_467_p2 <= std_logic_vector(unsigned(i_0_reg_306) + unsigned(ap_const_lv6_1));
    icmp_ln281_fu_461_p2 <= "1" when (i_0_reg_306 = ap_const_lv6_20) else "0";
    icmp_ln288_fu_473_p2 <= "1" when (k_0_reg_317 = ap_const_lv3_4) else "0";
    icmp_ln647_1_fu_505_p2 <= "1" when (unsigned(index2_fu_489_p3) > unsigned(index1_fu_498_p2)) else "0";
    icmp_ln647_2_fu_511_p2 <= "1" when (unsigned(index2_fu_489_p3) > unsigned(index1_fu_498_p2)) else "0";
    icmp_ln647_3_fu_517_p2 <= "1" when (unsigned(index2_fu_489_p3) > unsigned(index1_fu_498_p2)) else "0";
    icmp_ln647_4_fu_523_p2 <= "1" when (unsigned(index2_fu_489_p3) > unsigned(index1_fu_498_p2)) else "0";
    in_m_3_V_fu_688_p1 <= p_Result_s_fu_682_p2(16 - 1 downto 0);
    index1_fu_498_p2 <= (index2_fu_489_p3 or ap_const_lv6_F);
    index2_fu_489_p3 <= (trunc_ln289_fu_485_p1 & ap_const_lv4_0);
    k_fu_479_p2 <= std_logic_vector(unsigned(k_0_reg_317) + unsigned(ap_const_lv3_1));
        lhs_V_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_variance_m_3_fu_969_p1),17));

    lshr_ln414_fu_1420_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln414_4_fu_1386_p1(31-1 downto 0)))));
    lshr_ln647_1_fu_676_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln647_3_fu_666_p1(31-1 downto 0)))));
    lshr_ln647_2_fu_759_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_4_fu_732_p3),to_integer(unsigned('0' & zext_ln647_6_fu_751_p1(31-1 downto 0)))));
    lshr_ln647_3_fu_765_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln647_7_fu_755_p1(31-1 downto 0)))));
    lshr_ln647_4_fu_844_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_7_fu_817_p3),to_integer(unsigned('0' & zext_ln647_10_fu_836_p1(31-1 downto 0)))));
    lshr_ln647_5_fu_850_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln647_11_fu_840_p1(31-1 downto 0)))));
    lshr_ln647_6_fu_933_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_10_fu_906_p3),to_integer(unsigned('0' & zext_ln647_14_fu_925_p1(31-1 downto 0)))));
    lshr_ln647_7_fu_939_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln647_15_fu_929_p1(31-1 downto 0)))));
    lshr_ln647_8_fu_597_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_13_fu_572_p3),to_integer(unsigned('0' & zext_ln647_18_fu_593_p1(31-1 downto 0)))));
    lshr_ln647_9_fu_958_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln647_19_fu_955_p1(31-1 downto 0)))));
    lshr_ln647_fu_670_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_643_p3),to_integer(unsigned('0' & zext_ln647_2_fu_662_p1(31-1 downto 0)))));
    moving_mean_m_3_V_fu_951_p1 <= p_Result_18_fu_945_p2(16 - 1 downto 0);
    moving_variance_m_3_fu_969_p1 <= p_Result_19_fu_964_p2(16 - 1 downto 0);
    or_ln340_1_fu_1294_p2 <= (underflow_1_fu_1289_p2 or overflow_fu_1272_p2);
    or_ln340_2_fu_1305_p2 <= (or_ln340_3_fu_1300_p2 or and_ln781_fu_1252_p2);
    or_ln340_3_fu_1300_p2 <= (xor_ln785_1_fu_1267_p2 or and_ln786_reg_1726);
    or_ln340_fu_1029_p2 <= (xor_ln340_1_fu_1023_p2 or p_Result_21_fu_997_p3);
    or_ln785_fu_1262_p2 <= (xor_ln785_fu_1256_p2 or p_Result_24_reg_1710);
    or_ln786_fu_1278_p2 <= (and_ln786_reg_1726 or and_ln781_fu_1252_p2);
    overflow_fu_1272_p2 <= (xor_ln785_1_fu_1267_p2 and or_ln785_fu_1262_p2);
    p_Result_16_fu_771_p2 <= (lshr_ln647_3_fu_765_p2 and lshr_ln647_2_fu_759_p2);
    p_Result_17_fu_856_p2 <= (lshr_ln647_5_fu_850_p2 and lshr_ln647_4_fu_844_p2);
    p_Result_18_fu_945_p2 <= (lshr_ln647_7_fu_939_p2 and lshr_ln647_6_fu_933_p2);
    p_Result_19_fu_964_p2 <= (lshr_ln647_9_fu_958_p2 and lshr_ln647_8_reg_1642);
    p_Result_20_fu_983_p3 <= ret_V_10_fu_977_p2(16 downto 16);
    p_Result_21_fu_997_p3 <= tmp_num_V_fu_991_p2(15 downto 15);
    p_Result_23_fu_1121_p3 <= grp_fu_1097_p2(25 downto 25);
    p_Result_24_fu_1167_p3 <= tmp_V_7_fu_1141_p2(15 downto 15);
    p_Result_25_fu_1450_p2 <= (and_ln414_2_fu_1444_p2 or and_ln414_1_fu_1438_p2);
    p_Result_s_fu_682_p2 <= (lshr_ln647_fu_670_p2 and lshr_ln647_1_fu_676_p2);
    p_Val2_21_fu_1325_p3 <= 
        select_ln340_fu_1311_p3 when (or_ln340_2_fu_1305_p2(0) = '1') else 
        select_ln388_fu_1318_p3;
    ret_V_10_fu_977_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(lhs_V_fu_973_p1));
    rhs_V_1_fu_1072_p3 <= (trunc_ln728_reg_1667 & ap_const_lv10_0);
    select_ln340_1_fu_1035_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_fu_1017_p2(0) = '1') else 
        tmp_num_V_fu_991_p2;
    select_ln340_fu_1311_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_1_fu_1294_p2(0) = '1') else 
        tmp_V_7_reg_1698;
    select_ln388_1_fu_1043_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_1011_p2(0) = '1') else 
        tmp_num_V_fu_991_p2;
    select_ln388_fu_1318_p3 <= 
        ap_const_lv16_8000 when (underflow_1_fu_1289_p2(0) = '1') else 
        tmp_V_7_reg_1698;
    select_ln414_1_fu_1356_p3 <= 
        zext_ln414_1_fu_1339_p1 when (grp_fu_333_p2(0) = '1') else 
        zext_ln414_fu_1336_p1;
    select_ln414_2_fu_1364_p3 <= 
        xor_ln414_fu_1342_p2 when (grp_fu_333_p2(0) = '1') else 
        zext_ln414_fu_1336_p1;
    select_ln414_3_fu_1406_p3 <= 
        tmp_44_fu_1396_p4 when (grp_fu_333_p2(0) = '1') else 
        shl_ln414_fu_1390_p2;
    select_ln414_fu_1348_p3 <= 
        zext_ln414_fu_1336_p1 when (grp_fu_333_p2(0) = '1') else 
        zext_ln414_1_fu_1339_p1;
    select_ln647_10_fu_906_p3 <= 
        tmp_34_fu_872_p4 when (icmp_ln647_3_reg_1630(0) = '1') else 
        moving_mean_pack_V_reg_1569;
    select_ln647_11_fu_912_p3 <= 
        xor_ln647_3_fu_887_p2 when (icmp_ln647_3_reg_1630(0) = '1') else 
        zext_ln647_12_fu_866_p1;
    select_ln647_12_fu_564_p3 <= 
        sub_ln647_12_fu_546_p2 when (icmp_ln647_4_fu_523_p2(0) = '1') else 
        sub_ln647_13_fu_558_p2;
    select_ln647_13_fu_572_p3 <= 
        tmp_35_fu_537_p4 when (icmp_ln647_4_fu_523_p2(0) = '1') else 
        moving_variance_pack_reg_1575;
    select_ln647_14_fu_579_p3 <= 
        xor_ln647_4_fu_552_p2 when (icmp_ln647_4_fu_523_p2(0) = '1') else 
        zext_ln647_16_fu_529_p1;
    select_ln647_1_fu_643_p3 <= 
        tmp_31_fu_609_p4 when (icmp_ln647_reg_1609(0) = '1') else 
        in_pack_V_reg_1551;
    select_ln647_2_fu_649_p3 <= 
        xor_ln647_fu_624_p2 when (icmp_ln647_reg_1609(0) = '1') else 
        zext_ln647_fu_603_p1;
    select_ln647_3_fu_725_p3 <= 
        sub_ln647_3_fu_707_p2 when (icmp_ln647_1_reg_1616(0) = '1') else 
        sub_ln647_4_fu_719_p2;
    select_ln647_4_fu_732_p3 <= 
        tmp_32_fu_698_p4 when (icmp_ln647_1_reg_1616(0) = '1') else 
        beta_pack_V_reg_1557;
    select_ln647_5_fu_738_p3 <= 
        xor_ln647_1_fu_713_p2 when (icmp_ln647_1_reg_1616(0) = '1') else 
        zext_ln647_4_fu_692_p1;
    select_ln647_6_fu_810_p3 <= 
        sub_ln647_6_fu_792_p2 when (icmp_ln647_2_reg_1623(0) = '1') else 
        sub_ln647_7_fu_804_p2;
    select_ln647_7_fu_817_p3 <= 
        tmp_33_fu_783_p4 when (icmp_ln647_2_reg_1623(0) = '1') else 
        gamma_pack_V_reg_1563;
    select_ln647_8_fu_823_p3 <= 
        xor_ln647_2_fu_798_p2 when (icmp_ln647_2_reg_1623(0) = '1') else 
        zext_ln647_8_fu_777_p1;
    select_ln647_9_fu_899_p3 <= 
        sub_ln647_9_fu_881_p2 when (icmp_ln647_3_reg_1630(0) = '1') else 
        sub_ln647_10_fu_893_p2;
    select_ln647_fu_636_p3 <= 
        sub_ln647_fu_618_p2 when (icmp_ln647_reg_1609(0) = '1') else 
        sub_ln647_1_fu_630_p2;
    shl_ln414_1_fu_1414_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln414_3_fu_1382_p1(31-1 downto 0)))));
    shl_ln414_fu_1390_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_8_fu_1333_p1),to_integer(unsigned('0' & zext_ln414_2_fu_1378_p1(31-1 downto 0)))));
    sub_ln647_10_fu_893_p2 <= std_logic_vector(unsigned(zext_ln647_13_fu_869_p1) - unsigned(zext_ln647_12_fu_866_p1));
    sub_ln647_11_fu_919_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln647_9_fu_899_p3));
    sub_ln647_12_fu_546_p2 <= std_logic_vector(unsigned(zext_ln647_16_fu_529_p1) - unsigned(zext_ln647_17_fu_533_p1));
    sub_ln647_13_fu_558_p2 <= std_logic_vector(unsigned(zext_ln647_17_fu_533_p1) - unsigned(zext_ln647_16_fu_529_p1));
    sub_ln647_14_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln647_12_fu_564_p3));
    sub_ln647_1_fu_630_p2 <= std_logic_vector(unsigned(zext_ln647_1_fu_606_p1) - unsigned(zext_ln647_fu_603_p1));
    sub_ln647_2_fu_656_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln647_fu_636_p3));
    sub_ln647_3_fu_707_p2 <= std_logic_vector(unsigned(zext_ln647_4_fu_692_p1) - unsigned(zext_ln647_5_fu_695_p1));
    sub_ln647_4_fu_719_p2 <= std_logic_vector(unsigned(zext_ln647_5_fu_695_p1) - unsigned(zext_ln647_4_fu_692_p1));
    sub_ln647_5_fu_745_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln647_3_fu_725_p3));
    sub_ln647_6_fu_792_p2 <= std_logic_vector(unsigned(zext_ln647_8_fu_777_p1) - unsigned(zext_ln647_9_fu_780_p1));
    sub_ln647_7_fu_804_p2 <= std_logic_vector(unsigned(zext_ln647_9_fu_780_p1) - unsigned(zext_ln647_8_fu_777_p1));
    sub_ln647_8_fu_830_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln647_6_fu_810_p3));
    sub_ln647_9_fu_881_p2 <= std_logic_vector(unsigned(zext_ln647_12_fu_866_p1) - unsigned(zext_ln647_13_fu_869_p1));
    sub_ln647_fu_618_p2 <= std_logic_vector(unsigned(zext_ln647_fu_603_p1) - unsigned(zext_ln647_1_fu_606_p1));
    
    tmp_31_fu_609_p4_proc : process(in_pack_V_reg_1551)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_31_fu_609_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := in_pack_V_reg_1551;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_31_fu_609_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_31_fu_609_p4_i) := in_pack_V_reg_1551(64-1-tmp_31_fu_609_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_31_fu_609_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_32_fu_698_p4_proc : process(beta_pack_V_reg_1557)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_32_fu_698_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := beta_pack_V_reg_1557;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_32_fu_698_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_32_fu_698_p4_i) := beta_pack_V_reg_1557(64-1-tmp_32_fu_698_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_32_fu_698_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_33_fu_783_p4_proc : process(gamma_pack_V_reg_1563)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_33_fu_783_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := gamma_pack_V_reg_1563;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_33_fu_783_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_33_fu_783_p4_i) := gamma_pack_V_reg_1563(64-1-tmp_33_fu_783_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_33_fu_783_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_34_fu_872_p4_proc : process(moving_mean_pack_V_reg_1569)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_34_fu_872_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := moving_mean_pack_V_reg_1569;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_34_fu_872_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_34_fu_872_p4_i) := moving_mean_pack_V_reg_1569(64-1-tmp_34_fu_872_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_34_fu_872_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_35_fu_537_p4_proc : process(moving_variance_pack_reg_1575)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_35_fu_537_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := moving_variance_pack_reg_1575;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_35_fu_537_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_35_fu_537_p4_i) := moving_variance_pack_reg_1575(64-1-tmp_35_fu_537_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_35_fu_537_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_40_fu_1129_p3 <= grp_fu_1097_p2(9 downto 9);
    tmp_41_fu_1147_p3 <= tmp_V_7_fu_1141_p2(15 downto 15);
    tmp_43_fu_1213_p3 <= grp_fu_1097_p2(26 downto 26);
    
    tmp_44_fu_1396_p4_proc : process(shl_ln414_fu_1390_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_44_fu_1396_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := shl_ln414_fu_1390_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_44_fu_1396_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_44_fu_1396_p4_i) := shl_ln414_fu_1390_p2(64-1-tmp_44_fu_1396_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_44_fu_1396_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_7_fu_1191_p4 <= grp_fu_1097_p2(43 downto 26);
    tmp_V_7_fu_1141_p2 <= std_logic_vector(unsigned(tmp_V_fu_1111_p4) + unsigned(zext_ln415_fu_1137_p1));
    tmp_V_8_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_21_reg_1732),64));
    tmp_V_fu_1111_p4 <= grp_fu_1097_p2(25 downto 10);
    tmp_fu_1175_p4 <= grp_fu_1097_p2(43 downto 27);
    tmp_num_V_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(moving_variance_m_3_fu_969_p1));
    tmp_s_fu_1083_p3 <= (ret_V_11_reg_1672 & ap_const_lv10_0);
    trunc_ln289_fu_485_p1 <= k_0_reg_317(2 - 1 downto 0);
    trunc_ln728_fu_1059_p1 <= p_Result_16_fu_771_p2(16 - 1 downto 0);
    underflow_1_fu_1289_p2 <= (xor_ln786_1_fu_1283_p2 and p_Result_22_reg_1692);
    underflow_fu_1011_p2 <= (xor_ln786_fu_1005_p2 and p_Result_20_fu_983_p3);
    x_V_fu_1051_p3 <= 
        select_ln340_1_fu_1035_p3 when (or_ln340_fu_1029_p2(0) = '1') else 
        select_ln388_1_fu_1043_p3;
    xor_ln340_1_fu_1023_p2 <= (p_Result_20_fu_983_p3 xor ap_const_lv1_1);
    xor_ln340_fu_1017_p2 <= (p_Result_21_fu_997_p3 xor p_Result_20_fu_983_p3);
    xor_ln414_1_fu_1372_p2 <= (select_ln414_fu_1348_p3 xor ap_const_lv7_3F);
    xor_ln414_2_fu_1432_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor and_ln414_fu_1426_p2);
    xor_ln414_fu_1342_p2 <= (zext_ln414_fu_1336_p1 xor ap_const_lv7_3F);
    xor_ln416_fu_1155_p2 <= (tmp_41_fu_1147_p3 xor ap_const_lv1_1);
    xor_ln647_1_fu_713_p2 <= (zext_ln647_4_fu_692_p1 xor ap_const_lv7_3F);
    xor_ln647_2_fu_798_p2 <= (zext_ln647_8_fu_777_p1 xor ap_const_lv7_3F);
    xor_ln647_3_fu_887_p2 <= (zext_ln647_12_fu_866_p1 xor ap_const_lv7_3F);
    xor_ln647_4_fu_552_p2 <= (zext_ln647_16_fu_529_p1 xor ap_const_lv7_3F);
    xor_ln647_fu_624_p2 <= (zext_ln647_fu_603_p1 xor ap_const_lv7_3F);
    xor_ln779_fu_1221_p2 <= (tmp_43_fu_1213_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_1267_p2 <= (p_Result_22_reg_1692 xor ap_const_lv1_1);
    xor_ln785_fu_1256_p2 <= (deleted_zeros_fu_1247_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_1283_p2 <= (or_ln786_fu_1278_p2 xor ap_const_lv1_1);
    xor_ln786_fu_1005_p2 <= (p_Result_21_fu_997_p3 xor ap_const_lv1_1);
    zext_ln414_1_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index1_reg_1599),7));
    zext_ln414_2_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_1364_p3),64));
    zext_ln414_3_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_1356_p3),64));
    zext_ln414_4_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln414_1_fu_1372_p2),64));
    zext_ln414_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_reg_1589),7));
    zext_ln415_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1129_p3),16));
    zext_ln647_10_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_8_fu_823_p3),64));
    zext_ln647_11_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_8_fu_830_p2),64));
    zext_ln647_12_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_reg_1589),7));
    zext_ln647_13_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index1_reg_1599),7));
    zext_ln647_14_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_11_fu_912_p3),64));
    zext_ln647_15_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_11_fu_919_p2),64));
    zext_ln647_16_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_fu_489_p3),7));
    zext_ln647_17_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index1_fu_498_p2),7));
    zext_ln647_18_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_14_fu_579_p3),64));
    zext_ln647_19_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_14_reg_1637),64));
    zext_ln647_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index1_reg_1599),7));
    zext_ln647_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_649_p3),64));
    zext_ln647_3_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_2_fu_656_p2),64));
    zext_ln647_4_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_reg_1589),7));
    zext_ln647_5_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index1_reg_1599),7));
    zext_ln647_6_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_5_fu_738_p3),64));
    zext_ln647_7_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_5_fu_745_p2),64));
    zext_ln647_8_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_reg_1589),7));
    zext_ln647_9_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index1_reg_1599),7));
    zext_ln647_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index2_reg_1589),7));
end behav;
