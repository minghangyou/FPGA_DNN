-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bn is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BETA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BETA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BETA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GAMMA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GAMMA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GAMMA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_M_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_M_M_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_M_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_M_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_M_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_M_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BETA_USER_VALUE : INTEGER := 0;
    C_M_AXI_BETA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BETA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GAMMA_USER_VALUE : INTEGER := 0;
    C_M_AXI_GAMMA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GAMMA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_M_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_M_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_M_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_M_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_M_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_M_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IN_r_AWVALID : OUT STD_LOGIC;
    m_axi_IN_r_AWREADY : IN STD_LOGIC;
    m_axi_IN_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_IN_r_WVALID : OUT STD_LOGIC;
    m_axi_IN_r_WREADY : IN STD_LOGIC;
    m_axi_IN_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_IN_r_WLAST : OUT STD_LOGIC;
    m_axi_IN_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_IN_r_ARVALID : OUT STD_LOGIC;
    m_axi_IN_r_ARREADY : IN STD_LOGIC;
    m_axi_IN_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RVALID : IN STD_LOGIC;
    m_axi_IN_r_RREADY : OUT STD_LOGIC;
    m_axi_IN_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_RLAST : IN STD_LOGIC;
    m_axi_IN_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BVALID : IN STD_LOGIC;
    m_axi_IN_r_BREADY : OUT STD_LOGIC;
    m_axi_IN_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_BETA_AWVALID : OUT STD_LOGIC;
    m_axi_BETA_AWREADY : IN STD_LOGIC;
    m_axi_BETA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ADDR_WIDTH-1 downto 0);
    m_axi_BETA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BETA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_AWUSER_WIDTH-1 downto 0);
    m_axi_BETA_WVALID : OUT STD_LOGIC;
    m_axi_BETA_WREADY : IN STD_LOGIC;
    m_axi_BETA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH-1 downto 0);
    m_axi_BETA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH/8-1 downto 0);
    m_axi_BETA_WLAST : OUT STD_LOGIC;
    m_axi_BETA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_WUSER_WIDTH-1 downto 0);
    m_axi_BETA_ARVALID : OUT STD_LOGIC;
    m_axi_BETA_ARREADY : IN STD_LOGIC;
    m_axi_BETA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ADDR_WIDTH-1 downto 0);
    m_axi_BETA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BETA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BETA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BETA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BETA_ARUSER_WIDTH-1 downto 0);
    m_axi_BETA_RVALID : IN STD_LOGIC;
    m_axi_BETA_RREADY : OUT STD_LOGIC;
    m_axi_BETA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_DATA_WIDTH-1 downto 0);
    m_axi_BETA_RLAST : IN STD_LOGIC;
    m_axi_BETA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_RUSER_WIDTH-1 downto 0);
    m_axi_BETA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_BVALID : IN STD_LOGIC;
    m_axi_BETA_BREADY : OUT STD_LOGIC;
    m_axi_BETA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BETA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_ID_WIDTH-1 downto 0);
    m_axi_BETA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BETA_BUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_AWVALID : OUT STD_LOGIC;
    m_axi_GAMMA_AWREADY : IN STD_LOGIC;
    m_axi_GAMMA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ADDR_WIDTH-1 downto 0);
    m_axi_GAMMA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_GAMMA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_AWUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_WVALID : OUT STD_LOGIC;
    m_axi_GAMMA_WREADY : IN STD_LOGIC;
    m_axi_GAMMA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH-1 downto 0);
    m_axi_GAMMA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH/8-1 downto 0);
    m_axi_GAMMA_WLAST : OUT STD_LOGIC;
    m_axi_GAMMA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_WUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_ARVALID : OUT STD_LOGIC;
    m_axi_GAMMA_ARREADY : IN STD_LOGIC;
    m_axi_GAMMA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ADDR_WIDTH-1 downto 0);
    m_axi_GAMMA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_GAMMA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_GAMMA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_GAMMA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ARUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_RVALID : IN STD_LOGIC;
    m_axi_GAMMA_RREADY : OUT STD_LOGIC;
    m_axi_GAMMA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_DATA_WIDTH-1 downto 0);
    m_axi_GAMMA_RLAST : IN STD_LOGIC;
    m_axi_GAMMA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_RUSER_WIDTH-1 downto 0);
    m_axi_GAMMA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_BVALID : IN STD_LOGIC;
    m_axi_GAMMA_BREADY : OUT STD_LOGIC;
    m_axi_GAMMA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_GAMMA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_ID_WIDTH-1 downto 0);
    m_axi_GAMMA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GAMMA_BUSER_WIDTH-1 downto 0);
    m_axi_M_M_AWVALID : OUT STD_LOGIC;
    m_axi_M_M_AWREADY : IN STD_LOGIC;
    m_axi_M_M_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ADDR_WIDTH-1 downto 0);
    m_axi_M_M_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_M_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_AWUSER_WIDTH-1 downto 0);
    m_axi_M_M_WVALID : OUT STD_LOGIC;
    m_axi_M_M_WREADY : IN STD_LOGIC;
    m_axi_M_M_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH-1 downto 0);
    m_axi_M_M_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH/8-1 downto 0);
    m_axi_M_M_WLAST : OUT STD_LOGIC;
    m_axi_M_M_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_WUSER_WIDTH-1 downto 0);
    m_axi_M_M_ARVALID : OUT STD_LOGIC;
    m_axi_M_M_ARREADY : IN STD_LOGIC;
    m_axi_M_M_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ADDR_WIDTH-1 downto 0);
    m_axi_M_M_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_M_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_M_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_M_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_M_ARUSER_WIDTH-1 downto 0);
    m_axi_M_M_RVALID : IN STD_LOGIC;
    m_axi_M_M_RREADY : OUT STD_LOGIC;
    m_axi_M_M_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_DATA_WIDTH-1 downto 0);
    m_axi_M_M_RLAST : IN STD_LOGIC;
    m_axi_M_M_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_RUSER_WIDTH-1 downto 0);
    m_axi_M_M_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_BVALID : IN STD_LOGIC;
    m_axi_M_M_BREADY : OUT STD_LOGIC;
    m_axi_M_M_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_M_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_ID_WIDTH-1 downto 0);
    m_axi_M_M_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_M_BUSER_WIDTH-1 downto 0);
    m_axi_M_V_AWVALID : OUT STD_LOGIC;
    m_axi_M_V_AWREADY : IN STD_LOGIC;
    m_axi_M_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_M_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_AWUSER_WIDTH-1 downto 0);
    m_axi_M_V_WVALID : OUT STD_LOGIC;
    m_axi_M_V_WREADY : IN STD_LOGIC;
    m_axi_M_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_M_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH/8-1 downto 0);
    m_axi_M_V_WLAST : OUT STD_LOGIC;
    m_axi_M_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_WUSER_WIDTH-1 downto 0);
    m_axi_M_V_ARVALID : OUT STD_LOGIC;
    m_axi_M_V_ARREADY : IN STD_LOGIC;
    m_axi_M_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ADDR_WIDTH-1 downto 0);
    m_axi_M_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_M_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_M_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_M_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_M_V_ARUSER_WIDTH-1 downto 0);
    m_axi_M_V_RVALID : IN STD_LOGIC;
    m_axi_M_V_RREADY : OUT STD_LOGIC;
    m_axi_M_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_DATA_WIDTH-1 downto 0);
    m_axi_M_V_RLAST : IN STD_LOGIC;
    m_axi_M_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_RUSER_WIDTH-1 downto 0);
    m_axi_M_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_BVALID : IN STD_LOGIC;
    m_axi_M_V_BREADY : OUT STD_LOGIC;
    m_axi_M_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_M_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_ID_WIDTH-1 downto 0);
    m_axi_M_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_M_V_BUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=61,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=12,HLS_SYN_FF=7493,HLS_SYN_LUT=10756,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_V : STD_LOGIC_VECTOR (31 downto 0);
    signal gamma_V : STD_LOGIC_VECTOR (31 downto 0);
    signal moving_mean_V : STD_LOGIC_VECTOR (31 downto 0);
    signal moving_variance_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_37_reg_3117 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_37_reg_3117_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_37_reg_3117_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal BETA_blk_n_AR : STD_LOGIC;
    signal BETA_blk_n_R : STD_LOGIC;
    signal GAMMA_blk_n_AR : STD_LOGIC;
    signal GAMMA_blk_n_R : STD_LOGIC;
    signal M_M_blk_n_AR : STD_LOGIC;
    signal M_M_blk_n_R : STD_LOGIC;
    signal M_V_blk_n_AR : STD_LOGIC;
    signal M_V_blk_n_R : STD_LOGIC;
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_37_reg_3117_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp_37_reg_3117_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal tmp_37_reg_3117_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_AWREADY : STD_LOGIC;
    signal IN_r_WREADY : STD_LOGIC;
    signal IN_r_ARVALID : STD_LOGIC;
    signal IN_r_ARREADY : STD_LOGIC;
    signal IN_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_RVALID : STD_LOGIC;
    signal IN_r_RREADY : STD_LOGIC;
    signal IN_r_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal IN_r_RLAST : STD_LOGIC;
    signal IN_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BVALID : STD_LOGIC;
    signal IN_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_AWREADY : STD_LOGIC;
    signal BETA_WREADY : STD_LOGIC;
    signal BETA_ARVALID : STD_LOGIC;
    signal BETA_ARREADY : STD_LOGIC;
    signal BETA_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal BETA_RVALID : STD_LOGIC;
    signal BETA_RREADY : STD_LOGIC;
    signal BETA_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal BETA_RLAST : STD_LOGIC;
    signal BETA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BETA_BVALID : STD_LOGIC;
    signal BETA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal BETA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal BETA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_AWREADY : STD_LOGIC;
    signal GAMMA_WREADY : STD_LOGIC;
    signal GAMMA_ARVALID : STD_LOGIC;
    signal GAMMA_ARREADY : STD_LOGIC;
    signal GAMMA_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal GAMMA_RVALID : STD_LOGIC;
    signal GAMMA_RREADY : STD_LOGIC;
    signal GAMMA_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal GAMMA_RLAST : STD_LOGIC;
    signal GAMMA_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal GAMMA_BVALID : STD_LOGIC;
    signal GAMMA_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal GAMMA_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal GAMMA_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_AWREADY : STD_LOGIC;
    signal M_M_WREADY : STD_LOGIC;
    signal M_M_ARVALID : STD_LOGIC;
    signal M_M_ARREADY : STD_LOGIC;
    signal M_M_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal M_M_RVALID : STD_LOGIC;
    signal M_M_RREADY : STD_LOGIC;
    signal M_M_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal M_M_RLAST : STD_LOGIC;
    signal M_M_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_M_BVALID : STD_LOGIC;
    signal M_M_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_M_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_M_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_AWREADY : STD_LOGIC;
    signal M_V_WREADY : STD_LOGIC;
    signal M_V_ARVALID : STD_LOGIC;
    signal M_V_ARREADY : STD_LOGIC;
    signal M_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal M_V_RVALID : STD_LOGIC;
    signal M_V_RREADY : STD_LOGIC;
    signal M_V_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal M_V_RLAST : STD_LOGIC;
    signal M_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_V_BVALID : STD_LOGIC;
    signal M_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal M_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal M_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_544 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sqrt_fixed_16_6_s_fu_556_ap_return : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_561 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state32_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_37_reg_3117_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state33_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_cast35_fu_575_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast35_reg_3069 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast34_fu_589_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast34_reg_3077 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast33_fu_603_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast33_reg_3085 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast32_fu_617_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast32_reg_3093 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast31_fu_631_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast31_reg_3101 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast_fu_645_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast_reg_3109 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_fu_649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_3117_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln321_fu_657_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln321_reg_3121 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_fu_661_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_reg_3126 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_1_fu_666_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_1_reg_3131 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_2_fu_671_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_2_reg_3136 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_3_fu_676_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_3_reg_3141 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_4_fu_681_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_4_reg_3146 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln321_fu_686_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln321_reg_3151 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln321_6_fu_746_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln321_6_reg_3187 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_5_fu_750_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_5_reg_3192 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_6_fu_755_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_6_reg_3197 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_7_fu_760_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_7_reg_3202 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_8_fu_765_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_8_reg_3207 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_9_fu_770_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_9_reg_3212 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln321_12_fu_830_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln321_12_reg_3247 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_10_fu_834_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_10_reg_3252 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_11_fu_839_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_11_reg_3257 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_12_fu_844_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_12_reg_3262 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_13_fu_849_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_13_reg_3267 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_14_fu_854_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_14_reg_3272 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_15_fu_918_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_15_reg_3307 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_16_fu_923_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_16_reg_3312 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_17_fu_928_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_17_reg_3317 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_18_fu_933_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_18_reg_3322 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_19_fu_938_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_19_reg_3327 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_20_fu_943_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_20_reg_3332 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_20_reg_3332_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_20_reg_3332_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_20_reg_3332_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_20_reg_3332_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_21_fu_947_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_21_reg_3337 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_21_reg_3337_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_21_reg_3337_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_21_reg_3337_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_21_reg_3337_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_fu_951_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_reg_3342 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_reg_3342_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_reg_3342_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_reg_3342_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_reg_3342_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_22_reg_3342_pp0_iter5_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_fu_955_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_reg_3347 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_reg_3347_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_reg_3347_pp0_iter2_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_reg_3347_pp0_iter3_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_reg_3347_pp0_iter4_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln321_23_reg_3347_pp0_iter5_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal i_fu_960_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_3352 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln339_fu_1016_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln339_reg_3387 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln339_1_fu_1020_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln339_1_reg_3392 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln339_2_fu_1024_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln339_2_reg_3397 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_fu_1028_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_reg_3403 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_reg_3403_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_reg_3403_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_fu_1032_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_3408 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_3408_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_3408_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_reg_3408_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_1_V_fu_1036_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_1_V_reg_3413 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_1_V_fu_1040_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_1_V_reg_3418 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_variance_m_1_fu_1044_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_variance_m_1_reg_3423 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_fu_1124_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_reg_3429 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_3_fu_1210_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_3_reg_3434 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_3_reg_3434_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_3_reg_3434_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_1_fu_1218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_1_reg_3439 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_1_reg_3439_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_1_reg_3439_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_1_fu_1222_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_1_reg_3444 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_1_reg_3444_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_1_reg_3444_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_1_reg_3444_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_2_V_fu_1226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_2_V_reg_3449 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_2_V_fu_1230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_2_V_reg_3454 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_variance_m_2_fu_1234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_variance_m_2_reg_3459 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_1_fu_1314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_1_reg_3465 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_14_fu_1400_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_14_reg_3470 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_14_reg_3470_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_14_reg_3470_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_2_fu_1408_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_2_reg_3475 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_2_reg_3475_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_2_reg_3475_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_2_fu_1412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_2_reg_3480 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_2_reg_3480_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_2_reg_3480_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_2_reg_3480_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_3_V_fu_1416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_m_3_V_reg_3485 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_3_V_fu_1420_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_mean_m_3_V_reg_3490 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_variance_m_3_fu_1424_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal moving_variance_m_3_reg_3495 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_2_fu_1504_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_2_reg_3501 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_18_fu_1590_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_18_reg_3506 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_18_reg_3506_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_18_reg_3506_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_3_fu_1598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_3_reg_3511 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_3_reg_3511_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_3_reg_3511_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_3_fu_1602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_3_reg_3516 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_3_reg_3516_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_3_reg_3516_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln728_3_reg_3516_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_3_fu_1682_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_3_reg_3521 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_22_fu_1768_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_22_reg_3526 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_22_reg_3526_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_22_reg_3526_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_3021_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_reg_3531 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_1_fu_1789_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1118_1_reg_3536 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln1192_fu_1795_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln1192_reg_3541 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_44_reg_3546 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_2_fu_3027_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_2_reg_3551 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_42_reg_3556 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_1872_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_reg_3562 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln416_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_reg_3568 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1898_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_3574 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_1932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_3579 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_1938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_reg_3585 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_fu_1972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_reg_3590 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_3_fu_1984_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1118_3_reg_3596 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln1192_1_fu_1990_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln1192_1_reg_3601 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_54_reg_3606 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_4_fu_3033_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_4_reg_3611 : STD_LOGIC_VECTOR (28 downto 0);
    signal result_0_V_fu_2087_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_0_V_reg_3616 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_reg_3621 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_1_fu_2153_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_1_reg_3627 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln416_1_fu_2173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_1_reg_3633 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_2179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_3639 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_2213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_3644 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_fu_2219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_reg_3650 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_2253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_reg_3655 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_5_fu_2265_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1118_5_reg_3661 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln1192_2_fu_2271_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln1192_2_reg_3666 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_64_reg_3671 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_6_fu_3039_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_6_reg_3676 : STD_LOGIC_VECTOR (28 downto 0);
    signal result_1_V_fu_2381_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_1_V_reg_3687 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_reg_3692 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_2_fu_2447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_2_reg_3698 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln416_2_fu_2467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_2_reg_3704 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_2473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_reg_3710 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_5_fu_2507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_5_reg_3715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_fu_2513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_reg_3721 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_2547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_reg_3726 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_7_fu_2559_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln1118_7_reg_3732 : STD_LOGIC_VECTOR (44 downto 0);
    signal trunc_ln1192_3_fu_2565_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal trunc_ln1192_3_reg_3737 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_74_reg_3742 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_2_V_fu_2685_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_2_V_reg_3753 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_72_fu_2722_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_reg_3758 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_3_fu_2751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_3_reg_3763 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln416_3_fu_2771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_3_reg_3769 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_2777_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_reg_3774 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_fu_2811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_reg_3779 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_fu_2817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_reg_3784 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_3_fu_2851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_3_reg_3789 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_2857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_reg_3794 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_15_fu_2875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_15_reg_3799 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_23_fu_2966_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_23_reg_3811 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_sqrt_fixed_16_6_s_fu_556_x_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sqrt_fixed_16_6_s_fu_556_ap_ce : STD_LOGIC;
    signal ap_block_state4_pp0_stage2_iter0_ignore_call150 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1_ignore_call150 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2_ignore_call150 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3_ignore_call150 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter4_ignore_call150 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter5_ignore_call150 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter6_ignore_call150 : BOOLEAN;
    signal ap_block_state32_pp0_stage2_iter7_ignore_call150 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp350 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0_ignore_call150 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1_ignore_call150 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2_ignore_call150 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3_ignore_call150 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter4_ignore_call150 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter5_ignore_call150 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter6_ignore_call150 : BOOLEAN;
    signal ap_block_state33_pp0_stage3_iter7_ignore_call150 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp388 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call150 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1_ignore_call150 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2_ignore_call150 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3_ignore_call150 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4_ignore_call150 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5_ignore_call150 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter6_ignore_call150 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter7_ignore_call150 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp419 : BOOLEAN;
    signal ap_block_state3_pp0_stage1_iter0_ignore_call150 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1_ignore_call150 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2_ignore_call150 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3_ignore_call150 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4_ignore_call150 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter5_ignore_call150 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter6_ignore_call150 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter7_ignore_call150 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp449 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_548_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln321_1_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_2_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_3_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_4_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_7_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_8_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_9_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_10_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_11_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_13_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_14_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_15_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_16_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_17_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_19_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_20_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_21_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_22_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_23_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_24_fu_2290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_25_fu_2589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_26_fu_2893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_27_fu_2986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_pack_0_V_fu_2577_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal result_pack_1_V_fu_2881_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal result_pack_2_V_fu_2974_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal result_pack_3_V_fu_3004_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal result_pack_0_V_1_fu_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_pack_1_V_1_fu_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_pack_2_V_1_fu_196 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_pack_3_V_1_fu_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_565_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_32_fu_579_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_33_fu_593_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_34_fu_607_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_35_fu_621_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_36_fu_635_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal or_ln91_fu_740_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln91_1_fu_825_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln91_2_fu_909_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln321_18_fu_914_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln703_fu_1048_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_fu_1051_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_fu_1065_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1057_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1108_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_1116_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_1_fu_1132_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_2_fu_1135_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_1138_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_41_fu_1156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_fu_1152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln786_4_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1194_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_1202_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_3_fu_1238_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_2_fu_1241_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_18_fu_1255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_fu_1260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_1268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_9_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_5_fu_1298_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_3_fu_1306_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_4_fu_1322_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_5_fu_1325_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_1328_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_51_fu_1346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_1354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_1_fu_1342_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln786_8_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_1384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_4_fu_1392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_6_fu_1428_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_4_fu_1431_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_19_fu_1445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_1450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_7_fu_1458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_8_fu_1476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_1470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_10_fu_1464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_10_fu_1482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_1488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_6_fu_1496_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_7_fu_1512_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_8_fu_1515_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_1518_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_61_fu_1536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_8_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_1562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_2_fu_1532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln786_11_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_11_fu_1568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_17_fu_1574_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_7_fu_1582_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_9_fu_1606_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1192_6_fu_1609_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_20_fu_1623_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_1628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_1615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_1636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_14_fu_1648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_13_fu_1642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_15_fu_1660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_1666_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_9_fu_1674_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_10_fu_1690_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_11_fu_1693_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_1696_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_71_fu_1714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_1702_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_10_fu_1722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_1740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_15_fu_1734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_3_fu_1710_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln786_14_fu_1728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_16_fu_1746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_21_fu_1752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_10_fu_1760_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_1789_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_1789_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_1817_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln727_fu_1814_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln728_fu_1824_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln1192_fu_1828_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_1_fu_1832_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln415_fu_1869_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln4_fu_1851_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_1878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1861_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_1886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1906_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_1922_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_8_fu_1838_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_47_fu_1944_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_1916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_1952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_1958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_fu_1964_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_3_fu_1984_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_3_fu_1984_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln777_fu_2009_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_2018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_2024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_2029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_2014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_2040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_2045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_fu_2051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_2034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_2062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_2056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_2067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_2073_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_2080_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln728_1_fu_2098_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln727_1_fu_2095_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln728_1_fu_2105_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln1192_1_fu_2109_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_3_fu_2113_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln415_1_fu_2150_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_s_fu_2132_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_2159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_2142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_2167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_2187_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_2203_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_9_fu_2119_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_57_fu_2225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_2197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_1_fu_2233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_1_fu_2239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_1_fu_2245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_5_fu_2265_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_5_fu_2265_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln777_1_fu_2303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_2312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_2318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_2323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_1_fu_2308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_2334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_2339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_9_fu_2345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_fu_2328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_2356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_2350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_2361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_7_fu_2367_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_5_fu_2374_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln728_2_fu_2392_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln727_2_fu_2389_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln728_2_fu_2399_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln1192_2_fu_2403_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_5_fu_2407_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln415_2_fu_2444_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_13_fu_2426_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_2453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_2436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_2461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_2481_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_2497_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_10_fu_2413_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_67_fu_2519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_2491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_2_fu_2527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_2_fu_2533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_2_fu_2539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_7_fu_2559_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_7_fu_2559_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln777_2_fu_2607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_4_fu_2616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_2622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_5_fu_2627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_fu_2612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_2638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_9_fu_2643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_12_fu_2649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_2_fu_2632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_13_fu_2660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_12_fu_2654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_14_fu_2665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_2671_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_8_fu_2678_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln728_3_fu_2696_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln727_3_fu_2693_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln728_3_fu_2703_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln1192_3_fu_2707_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_7_fu_2711_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln415_3_fu_2748_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_14_fu_2730_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_75_fu_2757_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_2740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_2765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_2785_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_2801_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1192_11_fu_2717_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_77_fu_2823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_6_fu_2795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_3_fu_2831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_3_fu_2837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_3_fu_2843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_3_fu_2863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_11_fu_2869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_3_fu_2911_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_6_fu_2916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_3_fu_2922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_7_fu_2927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_3_fu_2932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_18_fu_2943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_17_fu_2938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_19_fu_2948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_11_fu_2953_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_11_fu_2960_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_3021_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_2_fu_3027_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_4_fu_3033_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_6_fu_3039_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_2_fu_3027_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_4_fu_3033_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_6_fu_3039_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1118_fu_3021_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_condition_1619 : BOOLEAN;
    signal ap_condition_1624 : BOOLEAN;
    signal ap_condition_1250 : BOOLEAN;
    signal ap_condition_1586 : BOOLEAN;

    component sqrt_fixed_16_6_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (12 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component bn_mul_mul_13ns_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component bn_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        beta_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        gamma_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        moving_mean_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        moving_variance_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bn_IN_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_BETA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_GAMMA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_M_M_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_M_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bn_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    bn_CTRL_s_axi_U : component bn_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_V => in_V,
        beta_V => beta_V,
        gamma_V => gamma_V,
        moving_mean_V => moving_mean_V,
        moving_variance_V => moving_variance_V,
        out_V => out_V);

    bn_IN_r_m_axi_U : component bn_IN_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IN_r_AWVALID,
        AWREADY => m_axi_IN_r_AWREADY,
        AWADDR => m_axi_IN_r_AWADDR,
        AWID => m_axi_IN_r_AWID,
        AWLEN => m_axi_IN_r_AWLEN,
        AWSIZE => m_axi_IN_r_AWSIZE,
        AWBURST => m_axi_IN_r_AWBURST,
        AWLOCK => m_axi_IN_r_AWLOCK,
        AWCACHE => m_axi_IN_r_AWCACHE,
        AWPROT => m_axi_IN_r_AWPROT,
        AWQOS => m_axi_IN_r_AWQOS,
        AWREGION => m_axi_IN_r_AWREGION,
        AWUSER => m_axi_IN_r_AWUSER,
        WVALID => m_axi_IN_r_WVALID,
        WREADY => m_axi_IN_r_WREADY,
        WDATA => m_axi_IN_r_WDATA,
        WSTRB => m_axi_IN_r_WSTRB,
        WLAST => m_axi_IN_r_WLAST,
        WID => m_axi_IN_r_WID,
        WUSER => m_axi_IN_r_WUSER,
        ARVALID => m_axi_IN_r_ARVALID,
        ARREADY => m_axi_IN_r_ARREADY,
        ARADDR => m_axi_IN_r_ARADDR,
        ARID => m_axi_IN_r_ARID,
        ARLEN => m_axi_IN_r_ARLEN,
        ARSIZE => m_axi_IN_r_ARSIZE,
        ARBURST => m_axi_IN_r_ARBURST,
        ARLOCK => m_axi_IN_r_ARLOCK,
        ARCACHE => m_axi_IN_r_ARCACHE,
        ARPROT => m_axi_IN_r_ARPROT,
        ARQOS => m_axi_IN_r_ARQOS,
        ARREGION => m_axi_IN_r_ARREGION,
        ARUSER => m_axi_IN_r_ARUSER,
        RVALID => m_axi_IN_r_RVALID,
        RREADY => m_axi_IN_r_RREADY,
        RDATA => m_axi_IN_r_RDATA,
        RLAST => m_axi_IN_r_RLAST,
        RID => m_axi_IN_r_RID,
        RUSER => m_axi_IN_r_RUSER,
        RRESP => m_axi_IN_r_RRESP,
        BVALID => m_axi_IN_r_BVALID,
        BREADY => m_axi_IN_r_BREADY,
        BRESP => m_axi_IN_r_BRESP,
        BID => m_axi_IN_r_BID,
        BUSER => m_axi_IN_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IN_r_ARVALID,
        I_ARREADY => IN_r_ARREADY,
        I_ARADDR => IN_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IN_r_RVALID,
        I_RREADY => IN_r_RREADY,
        I_RDATA => IN_r_RDATA,
        I_RID => IN_r_RID,
        I_RUSER => IN_r_RUSER,
        I_RRESP => IN_r_RRESP,
        I_RLAST => IN_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IN_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IN_r_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => IN_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IN_r_BRESP,
        I_BID => IN_r_BID,
        I_BUSER => IN_r_BUSER);

    bn_BETA_m_axi_U : component bn_BETA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BETA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BETA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BETA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BETA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BETA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BETA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BETA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BETA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BETA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BETA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BETA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_BETA_AWVALID,
        AWREADY => m_axi_BETA_AWREADY,
        AWADDR => m_axi_BETA_AWADDR,
        AWID => m_axi_BETA_AWID,
        AWLEN => m_axi_BETA_AWLEN,
        AWSIZE => m_axi_BETA_AWSIZE,
        AWBURST => m_axi_BETA_AWBURST,
        AWLOCK => m_axi_BETA_AWLOCK,
        AWCACHE => m_axi_BETA_AWCACHE,
        AWPROT => m_axi_BETA_AWPROT,
        AWQOS => m_axi_BETA_AWQOS,
        AWREGION => m_axi_BETA_AWREGION,
        AWUSER => m_axi_BETA_AWUSER,
        WVALID => m_axi_BETA_WVALID,
        WREADY => m_axi_BETA_WREADY,
        WDATA => m_axi_BETA_WDATA,
        WSTRB => m_axi_BETA_WSTRB,
        WLAST => m_axi_BETA_WLAST,
        WID => m_axi_BETA_WID,
        WUSER => m_axi_BETA_WUSER,
        ARVALID => m_axi_BETA_ARVALID,
        ARREADY => m_axi_BETA_ARREADY,
        ARADDR => m_axi_BETA_ARADDR,
        ARID => m_axi_BETA_ARID,
        ARLEN => m_axi_BETA_ARLEN,
        ARSIZE => m_axi_BETA_ARSIZE,
        ARBURST => m_axi_BETA_ARBURST,
        ARLOCK => m_axi_BETA_ARLOCK,
        ARCACHE => m_axi_BETA_ARCACHE,
        ARPROT => m_axi_BETA_ARPROT,
        ARQOS => m_axi_BETA_ARQOS,
        ARREGION => m_axi_BETA_ARREGION,
        ARUSER => m_axi_BETA_ARUSER,
        RVALID => m_axi_BETA_RVALID,
        RREADY => m_axi_BETA_RREADY,
        RDATA => m_axi_BETA_RDATA,
        RLAST => m_axi_BETA_RLAST,
        RID => m_axi_BETA_RID,
        RUSER => m_axi_BETA_RUSER,
        RRESP => m_axi_BETA_RRESP,
        BVALID => m_axi_BETA_BVALID,
        BREADY => m_axi_BETA_BREADY,
        BRESP => m_axi_BETA_BRESP,
        BID => m_axi_BETA_BID,
        BUSER => m_axi_BETA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => BETA_ARVALID,
        I_ARREADY => BETA_ARREADY,
        I_ARADDR => BETA_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => BETA_RVALID,
        I_RREADY => BETA_RREADY,
        I_RDATA => BETA_RDATA,
        I_RID => BETA_RID,
        I_RUSER => BETA_RUSER,
        I_RRESP => BETA_RRESP,
        I_RLAST => BETA_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BETA_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BETA_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => BETA_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => BETA_BRESP,
        I_BID => BETA_BID,
        I_BUSER => BETA_BUSER);

    bn_GAMMA_m_axi_U : component bn_GAMMA_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GAMMA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GAMMA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GAMMA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GAMMA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GAMMA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GAMMA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GAMMA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GAMMA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GAMMA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GAMMA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GAMMA_CACHE_VALUE)
    port map (
        AWVALID => m_axi_GAMMA_AWVALID,
        AWREADY => m_axi_GAMMA_AWREADY,
        AWADDR => m_axi_GAMMA_AWADDR,
        AWID => m_axi_GAMMA_AWID,
        AWLEN => m_axi_GAMMA_AWLEN,
        AWSIZE => m_axi_GAMMA_AWSIZE,
        AWBURST => m_axi_GAMMA_AWBURST,
        AWLOCK => m_axi_GAMMA_AWLOCK,
        AWCACHE => m_axi_GAMMA_AWCACHE,
        AWPROT => m_axi_GAMMA_AWPROT,
        AWQOS => m_axi_GAMMA_AWQOS,
        AWREGION => m_axi_GAMMA_AWREGION,
        AWUSER => m_axi_GAMMA_AWUSER,
        WVALID => m_axi_GAMMA_WVALID,
        WREADY => m_axi_GAMMA_WREADY,
        WDATA => m_axi_GAMMA_WDATA,
        WSTRB => m_axi_GAMMA_WSTRB,
        WLAST => m_axi_GAMMA_WLAST,
        WID => m_axi_GAMMA_WID,
        WUSER => m_axi_GAMMA_WUSER,
        ARVALID => m_axi_GAMMA_ARVALID,
        ARREADY => m_axi_GAMMA_ARREADY,
        ARADDR => m_axi_GAMMA_ARADDR,
        ARID => m_axi_GAMMA_ARID,
        ARLEN => m_axi_GAMMA_ARLEN,
        ARSIZE => m_axi_GAMMA_ARSIZE,
        ARBURST => m_axi_GAMMA_ARBURST,
        ARLOCK => m_axi_GAMMA_ARLOCK,
        ARCACHE => m_axi_GAMMA_ARCACHE,
        ARPROT => m_axi_GAMMA_ARPROT,
        ARQOS => m_axi_GAMMA_ARQOS,
        ARREGION => m_axi_GAMMA_ARREGION,
        ARUSER => m_axi_GAMMA_ARUSER,
        RVALID => m_axi_GAMMA_RVALID,
        RREADY => m_axi_GAMMA_RREADY,
        RDATA => m_axi_GAMMA_RDATA,
        RLAST => m_axi_GAMMA_RLAST,
        RID => m_axi_GAMMA_RID,
        RUSER => m_axi_GAMMA_RUSER,
        RRESP => m_axi_GAMMA_RRESP,
        BVALID => m_axi_GAMMA_BVALID,
        BREADY => m_axi_GAMMA_BREADY,
        BRESP => m_axi_GAMMA_BRESP,
        BID => m_axi_GAMMA_BID,
        BUSER => m_axi_GAMMA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => GAMMA_ARVALID,
        I_ARREADY => GAMMA_ARREADY,
        I_ARADDR => GAMMA_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => GAMMA_RVALID,
        I_RREADY => GAMMA_RREADY,
        I_RDATA => GAMMA_RDATA,
        I_RID => GAMMA_RID,
        I_RUSER => GAMMA_RUSER,
        I_RRESP => GAMMA_RRESP,
        I_RLAST => GAMMA_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => GAMMA_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => GAMMA_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => GAMMA_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => GAMMA_BRESP,
        I_BID => GAMMA_BID,
        I_BUSER => GAMMA_BUSER);

    bn_M_M_m_axi_U : component bn_M_M_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_M_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_M_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_M_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_M_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_M_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_M_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_M_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_M_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_M_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_M_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_M_CACHE_VALUE)
    port map (
        AWVALID => m_axi_M_M_AWVALID,
        AWREADY => m_axi_M_M_AWREADY,
        AWADDR => m_axi_M_M_AWADDR,
        AWID => m_axi_M_M_AWID,
        AWLEN => m_axi_M_M_AWLEN,
        AWSIZE => m_axi_M_M_AWSIZE,
        AWBURST => m_axi_M_M_AWBURST,
        AWLOCK => m_axi_M_M_AWLOCK,
        AWCACHE => m_axi_M_M_AWCACHE,
        AWPROT => m_axi_M_M_AWPROT,
        AWQOS => m_axi_M_M_AWQOS,
        AWREGION => m_axi_M_M_AWREGION,
        AWUSER => m_axi_M_M_AWUSER,
        WVALID => m_axi_M_M_WVALID,
        WREADY => m_axi_M_M_WREADY,
        WDATA => m_axi_M_M_WDATA,
        WSTRB => m_axi_M_M_WSTRB,
        WLAST => m_axi_M_M_WLAST,
        WID => m_axi_M_M_WID,
        WUSER => m_axi_M_M_WUSER,
        ARVALID => m_axi_M_M_ARVALID,
        ARREADY => m_axi_M_M_ARREADY,
        ARADDR => m_axi_M_M_ARADDR,
        ARID => m_axi_M_M_ARID,
        ARLEN => m_axi_M_M_ARLEN,
        ARSIZE => m_axi_M_M_ARSIZE,
        ARBURST => m_axi_M_M_ARBURST,
        ARLOCK => m_axi_M_M_ARLOCK,
        ARCACHE => m_axi_M_M_ARCACHE,
        ARPROT => m_axi_M_M_ARPROT,
        ARQOS => m_axi_M_M_ARQOS,
        ARREGION => m_axi_M_M_ARREGION,
        ARUSER => m_axi_M_M_ARUSER,
        RVALID => m_axi_M_M_RVALID,
        RREADY => m_axi_M_M_RREADY,
        RDATA => m_axi_M_M_RDATA,
        RLAST => m_axi_M_M_RLAST,
        RID => m_axi_M_M_RID,
        RUSER => m_axi_M_M_RUSER,
        RRESP => m_axi_M_M_RRESP,
        BVALID => m_axi_M_M_BVALID,
        BREADY => m_axi_M_M_BREADY,
        BRESP => m_axi_M_M_BRESP,
        BID => m_axi_M_M_BID,
        BUSER => m_axi_M_M_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => M_M_ARVALID,
        I_ARREADY => M_M_ARREADY,
        I_ARADDR => M_M_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => M_M_RVALID,
        I_RREADY => M_M_RREADY,
        I_RDATA => M_M_RDATA,
        I_RID => M_M_RID,
        I_RUSER => M_M_RUSER,
        I_RRESP => M_M_RRESP,
        I_RLAST => M_M_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => M_M_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => M_M_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => M_M_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => M_M_BRESP,
        I_BID => M_M_BID,
        I_BUSER => M_M_BUSER);

    bn_M_V_m_axi_U : component bn_M_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_M_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_M_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_M_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_M_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_M_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_M_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_M_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_M_V_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_M_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_M_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_M_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_M_V_AWVALID,
        AWREADY => m_axi_M_V_AWREADY,
        AWADDR => m_axi_M_V_AWADDR,
        AWID => m_axi_M_V_AWID,
        AWLEN => m_axi_M_V_AWLEN,
        AWSIZE => m_axi_M_V_AWSIZE,
        AWBURST => m_axi_M_V_AWBURST,
        AWLOCK => m_axi_M_V_AWLOCK,
        AWCACHE => m_axi_M_V_AWCACHE,
        AWPROT => m_axi_M_V_AWPROT,
        AWQOS => m_axi_M_V_AWQOS,
        AWREGION => m_axi_M_V_AWREGION,
        AWUSER => m_axi_M_V_AWUSER,
        WVALID => m_axi_M_V_WVALID,
        WREADY => m_axi_M_V_WREADY,
        WDATA => m_axi_M_V_WDATA,
        WSTRB => m_axi_M_V_WSTRB,
        WLAST => m_axi_M_V_WLAST,
        WID => m_axi_M_V_WID,
        WUSER => m_axi_M_V_WUSER,
        ARVALID => m_axi_M_V_ARVALID,
        ARREADY => m_axi_M_V_ARREADY,
        ARADDR => m_axi_M_V_ARADDR,
        ARID => m_axi_M_V_ARID,
        ARLEN => m_axi_M_V_ARLEN,
        ARSIZE => m_axi_M_V_ARSIZE,
        ARBURST => m_axi_M_V_ARBURST,
        ARLOCK => m_axi_M_V_ARLOCK,
        ARCACHE => m_axi_M_V_ARCACHE,
        ARPROT => m_axi_M_V_ARPROT,
        ARQOS => m_axi_M_V_ARQOS,
        ARREGION => m_axi_M_V_ARREGION,
        ARUSER => m_axi_M_V_ARUSER,
        RVALID => m_axi_M_V_RVALID,
        RREADY => m_axi_M_V_RREADY,
        RDATA => m_axi_M_V_RDATA,
        RLAST => m_axi_M_V_RLAST,
        RID => m_axi_M_V_RID,
        RUSER => m_axi_M_V_RUSER,
        RRESP => m_axi_M_V_RRESP,
        BVALID => m_axi_M_V_BVALID,
        BREADY => m_axi_M_V_BREADY,
        BRESP => m_axi_M_V_BRESP,
        BID => m_axi_M_V_BID,
        BUSER => m_axi_M_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => M_V_ARVALID,
        I_ARREADY => M_V_ARREADY,
        I_ARADDR => M_V_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => M_V_RVALID,
        I_RREADY => M_V_RREADY,
        I_RDATA => M_V_RDATA,
        I_RID => M_V_RID,
        I_RUSER => M_V_RUSER,
        I_RRESP => M_V_RRESP,
        I_RLAST => M_V_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => M_V_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => M_V_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => M_V_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => M_V_BRESP,
        I_BID => M_V_BID,
        I_BUSER => M_V_BUSER);

    bn_OUT_r_m_axi_U : component bn_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => OUT_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => OUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    grp_sqrt_fixed_16_6_s_fu_556 : component sqrt_fixed_16_6_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x_V => grp_sqrt_fixed_16_6_s_fu_556_x_V,
        ap_return => grp_sqrt_fixed_16_6_s_fu_556_ap_return,
        ap_ce => grp_sqrt_fixed_16_6_s_fu_556_ap_ce);

    bn_mul_mul_13ns_1bkb_U2 : component bn_mul_mul_13ns_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln1118_fu_3021_p0,
        din1 => trunc_ln1118_reg_3403_pp0_iter4_reg,
        dout => mul_ln1118_fu_3021_p2);

    bn_mul_mul_13ns_1bkb_U3 : component bn_mul_mul_13ns_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln1118_2_fu_3027_p0,
        din1 => trunc_ln1118_1_reg_3439_pp0_iter4_reg,
        dout => mul_ln1118_2_fu_3027_p2);

    bn_mul_mul_13ns_1bkb_U4 : component bn_mul_mul_13ns_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln1118_4_fu_3033_p0,
        din1 => trunc_ln1118_2_reg_3475_pp0_iter4_reg,
        dout => mul_ln1118_4_fu_3033_p2);

    bn_mul_mul_13ns_1bkb_U5 : component bn_mul_mul_13ns_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln1118_6_fu_3039_p0,
        din1 => trunc_ln1118_3_reg_3511_pp0_iter4_reg,
        dout => mul_ln1118_6_fu_3039_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_544 <= i_reg_3352;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_544 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln321_10_reg_3252 <= add_ln321_10_fu_834_p2;
                add_ln321_11_reg_3257 <= add_ln321_11_fu_839_p2;
                add_ln321_12_reg_3262 <= add_ln321_12_fu_844_p2;
                add_ln321_13_reg_3267 <= add_ln321_13_fu_849_p2;
                add_ln321_14_reg_3272 <= add_ln321_14_fu_854_p2;
                    zext_ln321_12_reg_3247(0) <= zext_ln321_12_fu_830_p1(0);    zext_ln321_12_reg_3247(4 downto 2) <= zext_ln321_12_fu_830_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln321_15_reg_3307 <= add_ln321_15_fu_918_p2;
                add_ln321_16_reg_3312 <= add_ln321_16_fu_923_p2;
                add_ln321_17_reg_3317 <= add_ln321_17_fu_928_p2;
                add_ln321_18_reg_3322 <= add_ln321_18_fu_933_p2;
                add_ln321_19_reg_3327 <= add_ln321_19_fu_938_p2;
                add_ln321_20_reg_3332 <= add_ln321_20_fu_943_p2;
                add_ln321_21_reg_3337 <= add_ln321_21_fu_947_p2;
                add_ln321_22_reg_3342 <= add_ln321_22_fu_951_p2;
                add_ln321_23_reg_3347 <= add_ln321_23_fu_955_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_fu_649_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln321_1_reg_3131 <= add_ln321_1_fu_666_p2;
                add_ln321_2_reg_3136 <= add_ln321_2_fu_671_p2;
                add_ln321_3_reg_3141 <= add_ln321_3_fu_676_p2;
                add_ln321_4_reg_3146 <= add_ln321_4_fu_681_p2;
                add_ln321_reg_3126 <= add_ln321_fu_661_p2;
                    zext_ln321_reg_3121(5 downto 0) <= zext_ln321_fu_657_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln321_20_reg_3332_pp0_iter1_reg <= add_ln321_20_reg_3332;
                add_ln321_20_reg_3332_pp0_iter2_reg <= add_ln321_20_reg_3332_pp0_iter1_reg;
                add_ln321_20_reg_3332_pp0_iter3_reg <= add_ln321_20_reg_3332_pp0_iter2_reg;
                add_ln321_20_reg_3332_pp0_iter4_reg <= add_ln321_20_reg_3332_pp0_iter3_reg;
                add_ln321_21_reg_3337_pp0_iter1_reg <= add_ln321_21_reg_3337;
                add_ln321_21_reg_3337_pp0_iter2_reg <= add_ln321_21_reg_3337_pp0_iter1_reg;
                add_ln321_21_reg_3337_pp0_iter3_reg <= add_ln321_21_reg_3337_pp0_iter2_reg;
                add_ln321_21_reg_3337_pp0_iter4_reg <= add_ln321_21_reg_3337_pp0_iter3_reg;
                add_ln321_22_reg_3342_pp0_iter1_reg <= add_ln321_22_reg_3342;
                add_ln321_22_reg_3342_pp0_iter2_reg <= add_ln321_22_reg_3342_pp0_iter1_reg;
                add_ln321_22_reg_3342_pp0_iter3_reg <= add_ln321_22_reg_3342_pp0_iter2_reg;
                add_ln321_22_reg_3342_pp0_iter4_reg <= add_ln321_22_reg_3342_pp0_iter3_reg;
                add_ln321_22_reg_3342_pp0_iter5_reg <= add_ln321_22_reg_3342_pp0_iter4_reg;
                add_ln321_23_reg_3347_pp0_iter1_reg <= add_ln321_23_reg_3347;
                add_ln321_23_reg_3347_pp0_iter2_reg <= add_ln321_23_reg_3347_pp0_iter1_reg;
                add_ln321_23_reg_3347_pp0_iter3_reg <= add_ln321_23_reg_3347_pp0_iter2_reg;
                add_ln321_23_reg_3347_pp0_iter4_reg <= add_ln321_23_reg_3347_pp0_iter3_reg;
                add_ln321_23_reg_3347_pp0_iter5_reg <= add_ln321_23_reg_3347_pp0_iter4_reg;
                select_ln340_18_reg_3506_pp0_iter3_reg <= select_ln340_18_reg_3506;
                select_ln340_18_reg_3506_pp0_iter4_reg <= select_ln340_18_reg_3506_pp0_iter3_reg;
                trunc_ln1118_3_reg_3511_pp0_iter3_reg <= trunc_ln1118_3_reg_3511;
                trunc_ln1118_3_reg_3511_pp0_iter4_reg <= trunc_ln1118_3_reg_3511_pp0_iter3_reg;
                trunc_ln728_3_reg_3516_pp0_iter3_reg <= trunc_ln728_3_reg_3516;
                trunc_ln728_3_reg_3516_pp0_iter4_reg <= trunc_ln728_3_reg_3516_pp0_iter3_reg;
                trunc_ln728_3_reg_3516_pp0_iter5_reg <= trunc_ln728_3_reg_3516_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln321_5_reg_3192 <= add_ln321_5_fu_750_p2;
                add_ln321_6_reg_3197 <= add_ln321_6_fu_755_p2;
                add_ln321_7_reg_3202 <= add_ln321_7_fu_760_p2;
                add_ln321_8_reg_3207 <= add_ln321_8_fu_765_p2;
                add_ln321_9_reg_3212 <= add_ln321_9_fu_770_p2;
                trunc_ln321_reg_3151 <= trunc_ln321_fu_686_p1;
                    zext_ln321_6_reg_3187(4 downto 1) <= zext_ln321_6_fu_746_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln415_1_reg_3627 <= add_ln415_1_fu_2153_p2;
                and_ln416_1_reg_3633 <= and_ln416_1_fu_2173_p2;
                and_ln786_1_reg_3655 <= and_ln786_1_fu_2253_p2;
                icmp_ln768_1_reg_3650 <= icmp_ln768_1_fu_2219_p2;
                icmp_ln879_3_reg_3644 <= icmp_ln879_3_fu_2213_p2;
                mul_ln1118_5_reg_3661 <= mul_ln1118_5_fu_2265_p2;
                mul_ln1118_6_reg_3676 <= mul_ln1118_6_fu_3039_p2;
                result_0_V_reg_3616 <= result_0_V_fu_2087_p3;
                tmp_52_reg_3621 <= add_ln1192_3_fu_2113_p2(46 downto 46);
                tmp_56_reg_3639 <= add_ln415_1_fu_2153_p2(15 downto 15);
                tmp_64_reg_3671 <= mul_ln1118_5_fu_2265_p2(19 downto 19);
                trunc_ln1192_2_reg_3666 <= trunc_ln1192_2_fu_2271_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln415_2_reg_3698 <= add_ln415_2_fu_2447_p2;
                and_ln416_2_reg_3704 <= and_ln416_2_fu_2467_p2;
                and_ln786_2_reg_3726 <= and_ln786_2_fu_2547_p2;
                icmp_ln768_2_reg_3721 <= icmp_ln768_2_fu_2513_p2;
                icmp_ln879_5_reg_3715 <= icmp_ln879_5_fu_2507_p2;
                mul_ln1118_7_reg_3732 <= mul_ln1118_7_fu_2559_p2;
                result_1_V_reg_3687 <= result_1_V_fu_2381_p3;
                tmp_62_reg_3692 <= add_ln1192_5_fu_2407_p2(46 downto 46);
                tmp_66_reg_3710 <= add_ln415_2_fu_2447_p2(15 downto 15);
                tmp_74_reg_3742 <= mul_ln1118_7_fu_2559_p2(19 downto 19);
                trunc_ln1192_3_reg_3737 <= trunc_ln1192_3_fu_2565_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln415_3_reg_3763 <= add_ln415_3_fu_2751_p2;
                and_ln416_3_reg_3769 <= and_ln416_3_fu_2771_p2;
                and_ln781_3_reg_3789 <= and_ln781_3_fu_2851_p2;
                and_ln786_15_reg_3799 <= and_ln786_15_fu_2875_p2;
                and_ln786_3_reg_3794 <= and_ln786_3_fu_2857_p2;
                icmp_ln768_3_reg_3784 <= icmp_ln768_3_fu_2817_p2;
                icmp_ln879_7_reg_3779 <= icmp_ln879_7_fu_2811_p2;
                result_2_V_reg_3753 <= result_2_V_fu_2685_p3;
                tmp_72_reg_3758 <= add_ln1192_7_fu_2711_p2(46 downto 46);
                tmp_76_reg_3774 <= add_ln415_3_fu_2751_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln415_reg_3562 <= add_ln415_fu_1872_p2;
                and_ln416_reg_3568 <= and_ln416_fu_1892_p2;
                and_ln786_5_reg_3590 <= and_ln786_5_fu_1972_p2;
                icmp_ln768_reg_3585 <= icmp_ln768_fu_1938_p2;
                icmp_ln879_1_reg_3579 <= icmp_ln879_1_fu_1932_p2;
                mul_ln1118_3_reg_3596 <= mul_ln1118_3_fu_1984_p2;
                mul_ln1118_4_reg_3611 <= mul_ln1118_4_fu_3033_p2;
                tmp_42_reg_3556 <= add_ln1192_1_fu_1832_p2(46 downto 46);
                tmp_46_reg_3574 <= add_ln415_fu_1872_p2(15 downto 15);
                tmp_54_reg_3606 <= mul_ln1118_3_fu_1984_p2(19 downto 19);
                trunc_ln1192_1_reg_3601 <= trunc_ln1192_1_fu_1990_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                i_reg_3352 <= i_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                in_m_1_V_reg_3413 <= in_m_1_V_fu_1036_p1;
                moving_mean_m_1_V_reg_3418 <= moving_mean_m_1_V_fu_1040_p1;
                moving_variance_m_1_reg_3423 <= moving_variance_m_1_fu_1044_p1;
                select_ln340_3_reg_3434 <= select_ln340_3_fu_1210_p3;
                trunc_ln1118_1_reg_3439 <= trunc_ln1118_1_fu_1218_p1;
                trunc_ln728_1_reg_3444 <= trunc_ln728_1_fu_1222_p1;
                x_V_reg_3429 <= x_V_fu_1124_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                in_m_2_V_reg_3449 <= in_m_2_V_fu_1226_p1;
                moving_mean_m_2_V_reg_3454 <= moving_mean_m_2_V_fu_1230_p1;
                moving_variance_m_2_reg_3459 <= moving_variance_m_2_fu_1234_p1;
                select_ln340_14_reg_3470 <= select_ln340_14_fu_1400_p3;
                trunc_ln1118_2_reg_3475 <= trunc_ln1118_2_fu_1408_p1;
                trunc_ln728_2_reg_3480 <= trunc_ln728_2_fu_1412_p1;
                x_V_1_reg_3465 <= x_V_1_fu_1314_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                in_m_3_V_reg_3485 <= in_m_3_V_fu_1416_p1;
                moving_mean_m_3_V_reg_3490 <= moving_mean_m_3_V_fu_1420_p1;
                moving_variance_m_3_reg_3495 <= moving_variance_m_3_fu_1424_p1;
                select_ln340_18_reg_3506 <= select_ln340_18_fu_1590_p3;
                trunc_ln1118_3_reg_3511 <= trunc_ln1118_3_fu_1598_p1;
                trunc_ln728_3_reg_3516 <= trunc_ln728_3_fu_1602_p1;
                x_V_2_reg_3501 <= x_V_2_fu_1504_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1118_1_reg_3536 <= mul_ln1118_1_fu_1789_p2;
                mul_ln1118_2_reg_3551 <= mul_ln1118_2_fu_3027_p2;
                tmp_44_reg_3546 <= mul_ln1118_1_fu_1789_p2(19 downto 19);
                trunc_ln1192_reg_3541 <= trunc_ln1192_fu_1795_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln1118_reg_3531 <= mul_ln1118_fu_3021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    p_cast31_reg_3101(28 downto 0) <= p_cast31_fu_631_p1(28 downto 0);
                    p_cast32_reg_3093(28 downto 0) <= p_cast32_fu_617_p1(28 downto 0);
                    p_cast33_reg_3085(28 downto 0) <= p_cast33_fu_603_p1(28 downto 0);
                    p_cast34_reg_3077(28 downto 0) <= p_cast34_fu_589_p1(28 downto 0);
                    p_cast35_reg_3069(28 downto 0) <= p_cast35_fu_575_p1(28 downto 0);
                    p_cast_reg_3109(28 downto 0) <= p_cast_fu_645_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_37_reg_3117_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((tmp_37_reg_3117_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_561 <= grp_sqrt_fixed_16_6_s_fu_556_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                result_pack_0_V_1_fu_188 <= result_pack_0_V_fu_2577_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                result_pack_1_V_1_fu_192 <= result_pack_1_V_fu_2881_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                result_pack_2_V_1_fu_196 <= result_pack_2_V_fu_2974_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                result_pack_3_V_1_fu_200 <= result_pack_3_V_fu_3004_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                select_ln340_14_reg_3470_pp0_iter3_reg <= select_ln340_14_reg_3470;
                select_ln340_14_reg_3470_pp0_iter4_reg <= select_ln340_14_reg_3470_pp0_iter3_reg;
                trunc_ln1118_2_reg_3475_pp0_iter3_reg <= trunc_ln1118_2_reg_3475;
                trunc_ln1118_2_reg_3475_pp0_iter4_reg <= trunc_ln1118_2_reg_3475_pp0_iter3_reg;
                trunc_ln728_2_reg_3480_pp0_iter3_reg <= trunc_ln728_2_reg_3480;
                trunc_ln728_2_reg_3480_pp0_iter4_reg <= trunc_ln728_2_reg_3480_pp0_iter3_reg;
                trunc_ln728_2_reg_3480_pp0_iter5_reg <= trunc_ln728_2_reg_3480_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln340_22_reg_3526 <= select_ln340_22_fu_1768_p3;
                x_V_3_reg_3521 <= x_V_3_fu_1682_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln340_22_reg_3526_pp0_iter4_reg <= select_ln340_22_reg_3526;
                select_ln340_22_reg_3526_pp0_iter5_reg <= select_ln340_22_reg_3526_pp0_iter4_reg;
                tmp_37_reg_3117 <= ap_phi_mux_i_0_phi_fu_548_p4(5 downto 5);
                tmp_37_reg_3117_pp0_iter1_reg <= tmp_37_reg_3117;
                tmp_37_reg_3117_pp0_iter2_reg <= tmp_37_reg_3117_pp0_iter1_reg;
                tmp_37_reg_3117_pp0_iter3_reg <= tmp_37_reg_3117_pp0_iter2_reg;
                tmp_37_reg_3117_pp0_iter4_reg <= tmp_37_reg_3117_pp0_iter3_reg;
                tmp_37_reg_3117_pp0_iter5_reg <= tmp_37_reg_3117_pp0_iter4_reg;
                tmp_37_reg_3117_pp0_iter6_reg <= tmp_37_reg_3117_pp0_iter5_reg;
                tmp_37_reg_3117_pp0_iter7_reg <= tmp_37_reg_3117_pp0_iter6_reg;
                trunc_ln1118_reg_3403_pp0_iter3_reg <= trunc_ln1118_reg_3403;
                trunc_ln1118_reg_3403_pp0_iter4_reg <= trunc_ln1118_reg_3403_pp0_iter3_reg;
                trunc_ln728_reg_3408_pp0_iter3_reg <= trunc_ln728_reg_3408;
                trunc_ln728_reg_3408_pp0_iter4_reg <= trunc_ln728_reg_3408_pp0_iter3_reg;
                trunc_ln728_reg_3408_pp0_iter5_reg <= trunc_ln728_reg_3408_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln340_23_reg_3811 <= select_ln340_23_fu_2966_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln340_3_reg_3434_pp0_iter3_reg <= select_ln340_3_reg_3434;
                select_ln340_3_reg_3434_pp0_iter4_reg <= select_ln340_3_reg_3434_pp0_iter3_reg;
                trunc_ln1118_1_reg_3439_pp0_iter3_reg <= trunc_ln1118_1_reg_3439;
                trunc_ln1118_1_reg_3439_pp0_iter4_reg <= trunc_ln1118_1_reg_3439_pp0_iter3_reg;
                trunc_ln728_1_reg_3444_pp0_iter3_reg <= trunc_ln728_1_reg_3444;
                trunc_ln728_1_reg_3444_pp0_iter4_reg <= trunc_ln728_1_reg_3444_pp0_iter3_reg;
                trunc_ln728_1_reg_3444_pp0_iter5_reg <= trunc_ln728_1_reg_3444_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1118_reg_3403 <= trunc_ln1118_fu_1028_p1;
                trunc_ln339_1_reg_3392 <= trunc_ln339_1_fu_1020_p1;
                trunc_ln339_2_reg_3397 <= trunc_ln339_2_fu_1024_p1;
                trunc_ln339_reg_3387 <= trunc_ln339_fu_1016_p1;
                trunc_ln728_reg_3408 <= trunc_ln728_fu_1032_p1;
            end if;
        end if;
    end process;
    p_cast35_reg_3069(29) <= '0';
    p_cast34_reg_3077(29) <= '0';
    p_cast33_reg_3085(29) <= '0';
    p_cast32_reg_3093(29) <= '0';
    p_cast31_reg_3101(29) <= '0';
    p_cast_reg_3109(29) <= '0';
    zext_ln321_reg_3121(29 downto 6) <= "000000000000000000000000";
    zext_ln321_6_reg_3187(0) <= '1';
    zext_ln321_6_reg_3187(29 downto 5) <= "0000000000000000000000000";
    zext_ln321_12_reg_3247(1) <= '1';
    zext_ln321_12_reg_3247(29 downto 5) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_fu_649_p3, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_37_fu_649_p3 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_37_fu_649_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    BETA_ARADDR_assign_proc : process(tmp_37_reg_3117, zext_ln321_2_fu_700_p1, zext_ln321_8_fu_785_p1, zext_ln321_14_fu_869_p1, zext_ln321_20_fu_976_p1, ap_condition_1619, ap_condition_1624, ap_condition_1250, ap_condition_1586)
    begin
        if ((tmp_37_reg_3117 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1586)) then 
                BETA_ARADDR <= zext_ln321_20_fu_976_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1250)) then 
                BETA_ARADDR <= zext_ln321_14_fu_869_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1624)) then 
                BETA_ARADDR <= zext_ln321_8_fu_785_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1619)) then 
                BETA_ARADDR <= zext_ln321_2_fu_700_p1(32 - 1 downto 0);
            else 
                BETA_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            BETA_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BETA_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            BETA_ARVALID <= ap_const_logic_1;
        else 
            BETA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    BETA_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            BETA_RREADY <= ap_const_logic_1;
        else 
            BETA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    BETA_blk_n_AR_assign_proc : process(m_axi_BETA_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            BETA_blk_n_AR <= m_axi_BETA_ARREADY;
        else 
            BETA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BETA_blk_n_R_assign_proc : process(m_axi_BETA_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            BETA_blk_n_R <= m_axi_BETA_RVALID;
        else 
            BETA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    GAMMA_ARADDR_assign_proc : process(tmp_37_reg_3117, zext_ln321_3_fu_710_p1, zext_ln321_9_fu_795_p1, zext_ln321_15_fu_879_p1, zext_ln321_21_fu_986_p1, ap_condition_1619, ap_condition_1624, ap_condition_1250, ap_condition_1586)
    begin
        if ((tmp_37_reg_3117 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1586)) then 
                GAMMA_ARADDR <= zext_ln321_21_fu_986_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1250)) then 
                GAMMA_ARADDR <= zext_ln321_15_fu_879_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1624)) then 
                GAMMA_ARADDR <= zext_ln321_9_fu_795_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1619)) then 
                GAMMA_ARADDR <= zext_ln321_3_fu_710_p1(32 - 1 downto 0);
            else 
                GAMMA_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            GAMMA_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    GAMMA_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            GAMMA_ARVALID <= ap_const_logic_1;
        else 
            GAMMA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    GAMMA_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            GAMMA_RREADY <= ap_const_logic_1;
        else 
            GAMMA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    GAMMA_blk_n_AR_assign_proc : process(m_axi_GAMMA_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            GAMMA_blk_n_AR <= m_axi_GAMMA_ARREADY;
        else 
            GAMMA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    GAMMA_blk_n_R_assign_proc : process(m_axi_GAMMA_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            GAMMA_blk_n_R <= m_axi_GAMMA_RVALID;
        else 
            GAMMA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_ARADDR_assign_proc : process(tmp_37_reg_3117, zext_ln321_1_fu_690_p1, zext_ln321_7_fu_775_p1, zext_ln321_13_fu_859_p1, zext_ln321_19_fu_966_p1, ap_condition_1619, ap_condition_1624, ap_condition_1250, ap_condition_1586)
    begin
        if ((tmp_37_reg_3117 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1586)) then 
                IN_r_ARADDR <= zext_ln321_19_fu_966_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1250)) then 
                IN_r_ARADDR <= zext_ln321_13_fu_859_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1624)) then 
                IN_r_ARADDR <= zext_ln321_7_fu_775_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1619)) then 
                IN_r_ARADDR <= zext_ln321_1_fu_690_p1(32 - 1 downto 0);
            else 
                IN_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            IN_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IN_r_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            IN_r_ARVALID <= ap_const_logic_1;
        else 
            IN_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            IN_r_RREADY <= ap_const_logic_1;
        else 
            IN_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_blk_n_AR_assign_proc : process(m_axi_IN_r_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            IN_r_blk_n_AR <= m_axi_IN_r_ARREADY;
        else 
            IN_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_blk_n_R_assign_proc : process(m_axi_IN_r_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            IN_r_blk_n_R <= m_axi_IN_r_RVALID;
        else 
            IN_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    M_M_ARADDR_assign_proc : process(tmp_37_reg_3117, zext_ln321_4_fu_720_p1, zext_ln321_10_fu_805_p1, zext_ln321_16_fu_889_p1, zext_ln321_22_fu_996_p1, ap_condition_1619, ap_condition_1624, ap_condition_1250, ap_condition_1586)
    begin
        if ((tmp_37_reg_3117 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1586)) then 
                M_M_ARADDR <= zext_ln321_22_fu_996_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1250)) then 
                M_M_ARADDR <= zext_ln321_16_fu_889_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1624)) then 
                M_M_ARADDR <= zext_ln321_10_fu_805_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1619)) then 
                M_M_ARADDR <= zext_ln321_4_fu_720_p1(32 - 1 downto 0);
            else 
                M_M_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            M_M_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    M_M_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            M_M_ARVALID <= ap_const_logic_1;
        else 
            M_M_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    M_M_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            M_M_RREADY <= ap_const_logic_1;
        else 
            M_M_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    M_M_blk_n_AR_assign_proc : process(m_axi_M_M_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_M_blk_n_AR <= m_axi_M_M_ARREADY;
        else 
            M_M_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    M_M_blk_n_R_assign_proc : process(m_axi_M_M_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_M_blk_n_R <= m_axi_M_M_RVALID;
        else 
            M_M_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    M_V_ARADDR_assign_proc : process(tmp_37_reg_3117, zext_ln321_5_fu_730_p1, zext_ln321_11_fu_815_p1, zext_ln321_17_fu_899_p1, zext_ln321_23_fu_1006_p1, ap_condition_1619, ap_condition_1624, ap_condition_1250, ap_condition_1586)
    begin
        if ((tmp_37_reg_3117 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1586)) then 
                M_V_ARADDR <= zext_ln321_23_fu_1006_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1250)) then 
                M_V_ARADDR <= zext_ln321_17_fu_899_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1624)) then 
                M_V_ARADDR <= zext_ln321_11_fu_815_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_1619)) then 
                M_V_ARADDR <= zext_ln321_5_fu_730_p1(32 - 1 downto 0);
            else 
                M_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            M_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    M_V_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            M_V_ARVALID <= ap_const_logic_1;
        else 
            M_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    M_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            M_V_RREADY <= ap_const_logic_1;
        else 
            M_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    M_V_blk_n_AR_assign_proc : process(m_axi_M_V_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_V_blk_n_AR <= m_axi_M_V_ARREADY;
        else 
            M_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    M_V_blk_n_R_assign_proc : process(m_axi_M_V_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_37_reg_3117_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            M_V_blk_n_R <= m_axi_M_V_RVALID;
        else 
            M_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_AWADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter5, tmp_37_reg_3117_pp0_iter5_reg, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, zext_ln321_24_fu_2290_p1, zext_ln321_25_fu_2589_p1, zext_ln321_26_fu_2893_p1, zext_ln321_27_fu_2986_p1)
    begin
        if (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            OUT_r_AWADDR <= zext_ln321_27_fu_2986_p1(32 - 1 downto 0);
        elsif (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_r_AWADDR <= zext_ln321_26_fu_2893_p1(32 - 1 downto 0);
        elsif (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            OUT_r_AWADDR <= zext_ln321_25_fu_2589_p1(32 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            OUT_r_AWADDR <= zext_ln321_24_fu_2290_p1(32 - 1 downto 0);
        else 
            OUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter5, tmp_37_reg_3117_pp0_iter5_reg, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter6_reg, tmp_37_reg_3117_pp0_iter7_reg, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter5, tmp_37_reg_3117_pp0_iter5_reg, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, result_pack_0_V_fu_2577_p5, ap_block_pp0_stage3_01001, result_pack_1_V_fu_2881_p5, ap_block_pp0_stage0_01001, result_pack_2_V_fu_2974_p5, ap_block_pp0_stage1_01001, result_pack_3_V_fu_3004_p5, ap_block_pp0_stage2_01001)
    begin
        if (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001))) then 
            OUT_r_WDATA <= result_pack_3_V_fu_3004_p5;
        elsif (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            OUT_r_WDATA <= result_pack_2_V_fu_2974_p5;
        elsif (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            OUT_r_WDATA <= result_pack_1_V_fu_2881_p5;
        elsif (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001))) then 
            OUT_r_WDATA <= result_pack_0_V_fu_2577_p5;
        else 
            OUT_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter5, tmp_37_reg_3117_pp0_iter5_reg, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter5, tmp_37_reg_3117_pp0_iter5_reg, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter6_reg, tmp_37_reg_3117_pp0_iter7_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter5, tmp_37_reg_3117_pp0_iter5_reg, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln1192_10_fu_2413_p2 <= std_logic_vector(signed(sext_ln1192_2_fu_2403_p1) + signed(trunc_ln1192_2_reg_3666));
    add_ln1192_11_fu_2717_p2 <= std_logic_vector(signed(sext_ln1192_3_fu_2707_p1) + signed(trunc_ln1192_3_reg_3737));
    add_ln1192_1_fu_1832_p2 <= std_logic_vector(signed(sext_ln727_fu_1814_p1) + signed(sext_ln728_fu_1824_p1));
    add_ln1192_2_fu_1241_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(sext_ln703_3_fu_1238_p1));
    add_ln1192_3_fu_2113_p2 <= std_logic_vector(signed(sext_ln727_1_fu_2095_p1) + signed(sext_ln728_1_fu_2105_p1));
    add_ln1192_4_fu_1431_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(sext_ln703_6_fu_1428_p1));
    add_ln1192_5_fu_2407_p2 <= std_logic_vector(signed(sext_ln727_2_fu_2389_p1) + signed(sext_ln728_2_fu_2399_p1));
    add_ln1192_6_fu_1609_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(sext_ln703_9_fu_1606_p1));
    add_ln1192_7_fu_2711_p2 <= std_logic_vector(signed(sext_ln727_3_fu_2693_p1) + signed(sext_ln728_3_fu_2703_p1));
    add_ln1192_8_fu_1838_p2 <= std_logic_vector(signed(sext_ln1192_fu_1828_p1) + signed(trunc_ln1192_reg_3541));
    add_ln1192_9_fu_2119_p2 <= std_logic_vector(signed(sext_ln1192_1_fu_2109_p1) + signed(trunc_ln1192_1_reg_3601));
    add_ln1192_fu_1051_p2 <= std_logic_vector(unsigned(ap_const_lv17_1) + unsigned(sext_ln703_fu_1048_p1));
    add_ln321_10_fu_834_p2 <= std_logic_vector(unsigned(p_cast_reg_3109) + unsigned(zext_ln321_12_fu_830_p1));
    add_ln321_11_fu_839_p2 <= std_logic_vector(unsigned(p_cast31_reg_3101) + unsigned(zext_ln321_12_fu_830_p1));
    add_ln321_12_fu_844_p2 <= std_logic_vector(unsigned(p_cast32_reg_3093) + unsigned(zext_ln321_12_fu_830_p1));
    add_ln321_13_fu_849_p2 <= std_logic_vector(unsigned(p_cast33_reg_3085) + unsigned(zext_ln321_12_fu_830_p1));
    add_ln321_14_fu_854_p2 <= std_logic_vector(unsigned(p_cast34_reg_3077) + unsigned(zext_ln321_12_fu_830_p1));
    add_ln321_15_fu_918_p2 <= std_logic_vector(unsigned(p_cast_reg_3109) + unsigned(zext_ln321_18_fu_914_p1));
    add_ln321_16_fu_923_p2 <= std_logic_vector(unsigned(p_cast31_reg_3101) + unsigned(zext_ln321_18_fu_914_p1));
    add_ln321_17_fu_928_p2 <= std_logic_vector(unsigned(p_cast32_reg_3093) + unsigned(zext_ln321_18_fu_914_p1));
    add_ln321_18_fu_933_p2 <= std_logic_vector(unsigned(p_cast33_reg_3085) + unsigned(zext_ln321_18_fu_914_p1));
    add_ln321_19_fu_938_p2 <= std_logic_vector(unsigned(p_cast34_reg_3077) + unsigned(zext_ln321_18_fu_914_p1));
    add_ln321_1_fu_666_p2 <= std_logic_vector(unsigned(p_cast31_reg_3101) + unsigned(zext_ln321_fu_657_p1));
    add_ln321_20_fu_943_p2 <= std_logic_vector(unsigned(p_cast35_reg_3069) + unsigned(zext_ln321_reg_3121));
    add_ln321_21_fu_947_p2 <= std_logic_vector(unsigned(p_cast35_reg_3069) + unsigned(zext_ln321_6_reg_3187));
    add_ln321_22_fu_951_p2 <= std_logic_vector(unsigned(p_cast35_reg_3069) + unsigned(zext_ln321_12_reg_3247));
    add_ln321_23_fu_955_p2 <= std_logic_vector(unsigned(p_cast35_reg_3069) + unsigned(zext_ln321_18_fu_914_p1));
    add_ln321_2_fu_671_p2 <= std_logic_vector(unsigned(p_cast32_reg_3093) + unsigned(zext_ln321_fu_657_p1));
    add_ln321_3_fu_676_p2 <= std_logic_vector(unsigned(p_cast33_reg_3085) + unsigned(zext_ln321_fu_657_p1));
    add_ln321_4_fu_681_p2 <= std_logic_vector(unsigned(p_cast34_reg_3077) + unsigned(zext_ln321_fu_657_p1));
    add_ln321_5_fu_750_p2 <= std_logic_vector(unsigned(p_cast_reg_3109) + unsigned(zext_ln321_6_fu_746_p1));
    add_ln321_6_fu_755_p2 <= std_logic_vector(unsigned(p_cast31_reg_3101) + unsigned(zext_ln321_6_fu_746_p1));
    add_ln321_7_fu_760_p2 <= std_logic_vector(unsigned(p_cast32_reg_3093) + unsigned(zext_ln321_6_fu_746_p1));
    add_ln321_8_fu_765_p2 <= std_logic_vector(unsigned(p_cast33_reg_3085) + unsigned(zext_ln321_6_fu_746_p1));
    add_ln321_9_fu_770_p2 <= std_logic_vector(unsigned(p_cast34_reg_3077) + unsigned(zext_ln321_6_fu_746_p1));
    add_ln321_fu_661_p2 <= std_logic_vector(unsigned(p_cast_reg_3109) + unsigned(zext_ln321_fu_657_p1));
    add_ln415_1_fu_2153_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_2150_p1) + unsigned(trunc_ln708_s_fu_2132_p4));
    add_ln415_2_fu_2447_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_2444_p1) + unsigned(trunc_ln708_13_fu_2426_p4));
    add_ln415_3_fu_2751_p2 <= std_logic_vector(unsigned(zext_ln415_3_fu_2748_p1) + unsigned(trunc_ln708_14_fu_2730_p4));
    add_ln415_fu_1872_p2 <= std_logic_vector(unsigned(zext_ln415_fu_1869_p1) + unsigned(trunc_ln4_fu_1851_p4));
    add_ln703_18_fu_1255_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(moving_variance_m_1_reg_3423));
    add_ln703_19_fu_1445_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(moving_variance_m_2_reg_3459));
    add_ln703_20_fu_1623_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(moving_variance_m_3_reg_3495));
    add_ln703_fu_1065_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(trunc_ln339_2_reg_3397));
    and_ln416_1_fu_2173_p2 <= (xor_ln416_1_fu_2167_p2 and tmp_53_fu_2142_p3);
    and_ln416_2_fu_2467_p2 <= (xor_ln416_2_fu_2461_p2 and tmp_63_fu_2436_p3);
    and_ln416_3_fu_2771_p2 <= (xor_ln416_3_fu_2765_p2 and tmp_73_fu_2740_p3);
    and_ln416_fu_1892_p2 <= (xor_ln416_fu_1886_p2 and tmp_43_fu_1861_p3);
    and_ln779_1_fu_2239_p2 <= (xor_ln779_1_fu_2233_p2 and icmp_ln879_2_fu_2197_p2);
    and_ln779_2_fu_2533_p2 <= (xor_ln779_2_fu_2527_p2 and icmp_ln879_4_fu_2491_p2);
    and_ln779_3_fu_2837_p2 <= (xor_ln779_3_fu_2831_p2 and icmp_ln879_6_fu_2795_p2);
    and_ln779_fu_1958_p2 <= (xor_ln779_fu_1952_p2 and icmp_ln879_fu_1916_p2);
    and_ln781_1_fu_2308_p2 <= (icmp_ln879_3_reg_3644 and and_ln416_1_reg_3633);
    and_ln781_2_fu_2612_p2 <= (icmp_ln879_5_reg_3715 and and_ln416_2_reg_3704);
    and_ln781_3_fu_2851_p2 <= (icmp_ln879_7_fu_2811_p2 and and_ln416_3_fu_2771_p2);
    and_ln781_fu_2014_p2 <= (icmp_ln879_1_reg_3579 and and_ln416_reg_3568);
    and_ln785_1_fu_2328_p2 <= (xor_ln785_3_fu_2323_p2 and or_ln785_1_fu_2318_p2);
    and_ln785_2_fu_2632_p2 <= (xor_ln785_5_fu_2627_p2 and or_ln785_2_fu_2622_p2);
    and_ln785_3_fu_2932_p2 <= (xor_ln785_7_fu_2927_p2 and or_ln785_3_fu_2922_p2);
    and_ln785_fu_2034_p2 <= (xor_ln785_1_fu_2029_p2 and or_ln785_fu_2024_p2);
    and_ln786_10_fu_1464_p2 <= (xor_ln786_7_fu_1458_p2 and tmp_58_fu_1437_p3);
    and_ln786_11_fu_1550_p2 <= (xor_ln786_8_fu_1544_p2 and tmp_60_fu_1524_p3);
    and_ln786_12_fu_2649_p2 <= (xor_ln786_9_fu_2643_p2 and tmp_62_reg_3692);
    and_ln786_13_fu_1642_p2 <= (xor_ln786_3_fu_1636_p2 and tmp_68_fu_1615_p3);
    and_ln786_14_fu_1728_p2 <= (xor_ln786_10_fu_1722_p2 and tmp_70_fu_1702_p3);
    and_ln786_15_fu_2875_p2 <= (xor_ln786_11_fu_2869_p2 and tmp_72_fu_2722_p3);
    and_ln786_1_fu_2253_p2 <= (tmp_56_fu_2179_p3 and select_ln416_1_fu_2245_p3);
    and_ln786_2_fu_2547_p2 <= (tmp_66_fu_2473_p3 and select_ln416_2_fu_2539_p3);
    and_ln786_3_fu_2857_p2 <= (tmp_76_fu_2777_p3 and select_ln416_3_fu_2843_p3);
    and_ln786_4_fu_1170_p2 <= (xor_ln786_1_fu_1164_p2 and tmp_40_fu_1144_p3);
    and_ln786_5_fu_1972_p2 <= (tmp_46_fu_1898_p3 and select_ln416_fu_1964_p3);
    and_ln786_6_fu_2051_p2 <= (xor_ln786_2_fu_2045_p2 and tmp_42_reg_3556);
    and_ln786_7_fu_1274_p2 <= (xor_ln786_4_fu_1268_p2 and tmp_48_fu_1247_p3);
    and_ln786_8_fu_1360_p2 <= (xor_ln786_5_fu_1354_p2 and tmp_50_fu_1334_p3);
    and_ln786_9_fu_2345_p2 <= (xor_ln786_6_fu_2339_p2 and tmp_52_reg_3621);
    and_ln786_fu_1084_p2 <= (xor_ln786_fu_1078_p2 and tmp_38_fu_1057_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state34 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter6_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state6_io, ap_block_state26_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp419_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state6_io, ap_block_state26_io)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp419 <= (((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter1_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter6_reg, ap_enable_reg_pp0_iter6, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state6_io, ap_block_state26_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID)
    begin
                ap_block_pp0_stage1_01001 <= (((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state3_io, ap_block_state27_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp449_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state3_io, ap_block_state27_io)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp449 <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state3_io, ap_block_state27_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID)
    begin
                ap_block_pp0_stage2_01001 <= (((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state4_io, ap_block_state24_io, ap_block_state28_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_11001_ignoreCallOp350_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state4_io, ap_block_state24_io, ap_block_state28_io)
    begin
                ap_block_pp0_stage2_11001_ignoreCallOp350 <= (((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state4_io, ap_block_state24_io, ap_block_state28_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID)
    begin
                ap_block_pp0_stage3_01001 <= (((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state5_io, ap_block_state25_io)
    begin
                ap_block_pp0_stage3_11001 <= (((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_11001_ignoreCallOp388_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state5_io, ap_block_state25_io)
    begin
                ap_block_pp0_stage3_11001_ignoreCallOp388 <= (((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, tmp_37_reg_3117_pp0_iter2_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, tmp_37_reg_3117_pp0_iter7_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID, OUT_r_BVALID, ap_block_state5_io, ap_block_state25_io)
    begin
                ap_block_pp0_stage3_subdone <= (((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)))) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter2_assign_proc : process(tmp_37_reg_3117_pp0_iter1_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter2 <= (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state10_pp0_stage0_iter2_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter1_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter2_ignore_call150 <= (((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state11_pp0_stage1_iter2_assign_proc : process(tmp_37_reg_3117_pp0_iter2_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state11_pp0_stage1_iter2 <= (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state11_pp0_stage1_iter2_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter2_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state11_pp0_stage1_iter2_ignore_call150 <= (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state12_pp0_stage2_iter2_assign_proc : process(tmp_37_reg_3117_pp0_iter2_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state12_pp0_stage2_iter2 <= (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state12_pp0_stage2_iter2_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter2_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state12_pp0_stage2_iter2_ignore_call150 <= (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state13_pp0_stage3_iter2_assign_proc : process(tmp_37_reg_3117_pp0_iter2_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state13_pp0_stage3_iter2 <= (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;


    ap_block_state13_pp0_stage3_iter2_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter2_reg, IN_r_RVALID, BETA_RVALID, GAMMA_RVALID, M_M_RVALID, M_V_RVALID)
    begin
                ap_block_state13_pp0_stage3_iter2_ignore_call150 <= (((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_V_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = M_M_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = BETA_RVALID)) or ((tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter4_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter4_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter5_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter5_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(tmp_37_reg_3117_pp0_iter5_reg, OUT_r_AWREADY)
    begin
                ap_block_state24_io <= ((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_AWREADY));
    end process;

        ap_block_state24_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter5_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(tmp_37_reg_3117_pp0_iter5_reg, OUT_r_AWREADY, OUT_r_WREADY)
    begin
                ap_block_state25_io <= (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_WREADY)) or ((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_AWREADY)));
    end process;

        ap_block_state25_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter5_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_io_assign_proc : process(tmp_37_reg_3117_pp0_iter5_reg, OUT_r_AWREADY, OUT_r_WREADY)
    begin
                ap_block_state26_io <= (((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_WREADY)) or ((tmp_37_reg_3117_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_AWREADY)));
    end process;

        ap_block_state26_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter6_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(tmp_37_reg_3117_pp0_iter6_reg, OUT_r_AWREADY, OUT_r_WREADY)
    begin
                ap_block_state27_io <= (((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_WREADY)) or ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_AWREADY)));
    end process;

        ap_block_state27_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter6_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(tmp_37_reg_3117_pp0_iter6_reg, OUT_r_WREADY)
    begin
                ap_block_state28_io <= ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_WREADY));
    end process;

        ap_block_state28_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter6_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter6_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_pp0_stage0_iter7_assign_proc : process(tmp_37_reg_3117_pp0_iter6_reg, OUT_r_BVALID)
    begin
                ap_block_state30_pp0_stage0_iter7 <= ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state30_pp0_stage0_iter7_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter6_reg, OUT_r_BVALID)
    begin
                ap_block_state30_pp0_stage0_iter7_ignore_call150 <= ((tmp_37_reg_3117_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state31_pp0_stage1_iter7_assign_proc : process(tmp_37_reg_3117_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state31_pp0_stage1_iter7 <= ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state31_pp0_stage1_iter7_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state31_pp0_stage1_iter7_ignore_call150 <= ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state32_pp0_stage2_iter7_assign_proc : process(tmp_37_reg_3117_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state32_pp0_stage2_iter7 <= ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state32_pp0_stage2_iter7_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state32_pp0_stage2_iter7_ignore_call150 <= ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state33_pp0_stage3_iter7_assign_proc : process(tmp_37_reg_3117_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state33_pp0_stage3_iter7 <= ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state33_pp0_stage3_iter7_ignore_call150_assign_proc : process(tmp_37_reg_3117_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state33_pp0_stage3_iter7_ignore_call150 <= ((tmp_37_reg_3117_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_0 = OUT_r_BVALID));
    end process;


    ap_block_state3_io_assign_proc : process(tmp_37_reg_3117, IN_r_ARREADY, BETA_ARREADY, GAMMA_ARREADY, M_M_ARREADY, M_V_ARREADY)
    begin
                ap_block_state3_io <= (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_ARREADY)));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(tmp_37_reg_3117, IN_r_ARREADY, BETA_ARREADY, GAMMA_ARREADY, M_M_ARREADY, M_V_ARREADY)
    begin
                ap_block_state4_io <= (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_ARREADY)));
    end process;

        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(tmp_37_reg_3117, IN_r_ARREADY, BETA_ARREADY, GAMMA_ARREADY, M_M_ARREADY, M_V_ARREADY)
    begin
                ap_block_state5_io <= (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_ARREADY)));
    end process;

        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(tmp_37_reg_3117, IN_r_ARREADY, BETA_ARREADY, GAMMA_ARREADY, M_M_ARREADY, M_V_ARREADY)
    begin
                ap_block_state6_io <= (((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_V_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = M_M_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = GAMMA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = BETA_ARREADY)) or ((tmp_37_reg_3117 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_ARREADY)));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1_ignore_call150 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1250_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_1250 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001));
    end process;


    ap_condition_1586_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1586 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_1619_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
                ap_condition_1619 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_1624_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
                ap_condition_1624 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_37_fu_649_p3)
    begin
        if ((tmp_37_fu_649_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_548_p4_assign_proc : process(tmp_37_reg_3117, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, i_0_reg_544, i_reg_3352)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_548_p4 <= i_reg_3352;
        else 
            ap_phi_mux_i_0_phi_fu_548_p4 <= i_0_reg_544;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_sqrt_fixed_16_6_s_fu_556_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001_ignoreCallOp350, ap_block_pp0_stage3_11001_ignoreCallOp388, ap_block_pp0_stage0_11001_ignoreCallOp419, ap_block_pp0_stage1_11001_ignoreCallOp449)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp388)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp350)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp419)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp449)))) then 
            grp_sqrt_fixed_16_6_s_fu_556_ap_ce <= ap_const_logic_1;
        else 
            grp_sqrt_fixed_16_6_s_fu_556_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_sqrt_fixed_16_6_s_fu_556_x_V_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, tmp_37_reg_3117_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, tmp_37_reg_3117_pp0_iter3_reg, x_V_reg_3429, x_V_1_reg_3465, x_V_2_reg_3501, x_V_3_reg_3521, ap_enable_reg_pp0_iter3)
    begin
        if (((tmp_37_reg_3117_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_sqrt_fixed_16_6_s_fu_556_x_V <= x_V_3_reg_3521;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_sqrt_fixed_16_6_s_fu_556_x_V <= x_V_2_reg_3501;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_sqrt_fixed_16_6_s_fu_556_x_V <= x_V_1_reg_3465;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (tmp_37_reg_3117_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_sqrt_fixed_16_6_s_fu_556_x_V <= x_V_reg_3429;
        else 
            grp_sqrt_fixed_16_6_s_fu_556_x_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_960_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(i_0_reg_544));
    icmp_ln768_1_fu_2219_p2 <= "1" when (tmp_4_fu_2203_p4 = ap_const_lv11_0) else "0";
    icmp_ln768_2_fu_2513_p2 <= "1" when (tmp_6_fu_2497_p4 = ap_const_lv11_0) else "0";
    icmp_ln768_3_fu_2817_p2 <= "1" when (tmp_8_fu_2801_p4 = ap_const_lv11_0) else "0";
    icmp_ln768_fu_1938_p2 <= "1" when (tmp_2_fu_1922_p4 = ap_const_lv11_0) else "0";
    icmp_ln879_1_fu_1932_p2 <= "1" when (tmp_2_fu_1922_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln879_2_fu_2197_p2 <= "1" when (tmp_3_fu_2187_p4 = ap_const_lv10_3FF) else "0";
    icmp_ln879_3_fu_2213_p2 <= "1" when (tmp_4_fu_2203_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln879_4_fu_2491_p2 <= "1" when (tmp_5_fu_2481_p4 = ap_const_lv10_3FF) else "0";
    icmp_ln879_5_fu_2507_p2 <= "1" when (tmp_6_fu_2497_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln879_6_fu_2795_p2 <= "1" when (tmp_7_fu_2785_p4 = ap_const_lv10_3FF) else "0";
    icmp_ln879_7_fu_2811_p2 <= "1" when (tmp_8_fu_2801_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln879_fu_1916_p2 <= "1" when (tmp_1_fu_1906_p4 = ap_const_lv10_3FF) else "0";
    in_m_1_V_fu_1036_p1 <= IN_r_RDATA(16 - 1 downto 0);
    in_m_2_V_fu_1226_p1 <= IN_r_RDATA(16 - 1 downto 0);
    in_m_3_V_fu_1416_p1 <= IN_r_RDATA(16 - 1 downto 0);
    moving_mean_m_1_V_fu_1040_p1 <= M_M_RDATA(16 - 1 downto 0);
    moving_mean_m_2_V_fu_1230_p1 <= M_M_RDATA(16 - 1 downto 0);
    moving_mean_m_3_V_fu_1420_p1 <= M_M_RDATA(16 - 1 downto 0);
    moving_variance_m_1_fu_1044_p1 <= M_V_RDATA(16 - 1 downto 0);
    moving_variance_m_2_fu_1234_p1 <= M_V_RDATA(16 - 1 downto 0);
    moving_variance_m_3_fu_1424_p1 <= M_V_RDATA(16 - 1 downto 0);
    mul_ln1118_1_fu_1789_p0 <= select_ln340_3_reg_3434_pp0_iter4_reg;
    mul_ln1118_1_fu_1789_p1 <= mul_ln1118_reg_3531;
    mul_ln1118_1_fu_1789_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_1_fu_1789_p0) * signed(mul_ln1118_1_fu_1789_p1))), 45));
    mul_ln1118_2_fu_3027_p0 <= mul_ln1118_2_fu_3027_p00(13 - 1 downto 0);
    mul_ln1118_2_fu_3027_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_561),29));
    mul_ln1118_3_fu_1984_p0 <= select_ln340_14_reg_3470_pp0_iter4_reg;
    mul_ln1118_3_fu_1984_p1 <= mul_ln1118_2_reg_3551;
    mul_ln1118_3_fu_1984_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_3_fu_1984_p0) * signed(mul_ln1118_3_fu_1984_p1))), 45));
    mul_ln1118_4_fu_3033_p0 <= mul_ln1118_4_fu_3033_p00(13 - 1 downto 0);
    mul_ln1118_4_fu_3033_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_561),29));
    mul_ln1118_5_fu_2265_p0 <= select_ln340_18_reg_3506_pp0_iter4_reg;
    mul_ln1118_5_fu_2265_p1 <= mul_ln1118_4_reg_3611;
    mul_ln1118_5_fu_2265_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_5_fu_2265_p0) * signed(mul_ln1118_5_fu_2265_p1))), 45));
    mul_ln1118_6_fu_3039_p0 <= mul_ln1118_6_fu_3039_p00(13 - 1 downto 0);
    mul_ln1118_6_fu_3039_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_561),29));
    mul_ln1118_7_fu_2559_p0 <= select_ln340_22_reg_3526_pp0_iter5_reg;
    mul_ln1118_7_fu_2559_p1 <= mul_ln1118_6_reg_3676;
    mul_ln1118_7_fu_2559_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_7_fu_2559_p0) * signed(mul_ln1118_7_fu_2559_p1))), 45));
    mul_ln1118_fu_3021_p0 <= mul_ln1118_fu_3021_p00(13 - 1 downto 0);
    mul_ln1118_fu_3021_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_561),29));
    or_ln340_10_fu_1482_p2 <= (xor_ln340_8_fu_1476_p2 or tmp_59_fu_1450_p3);
    or_ln340_11_fu_1568_p2 <= (xor_ln340_2_fu_1562_p2 or tmp_61_fu_1536_p3);
    or_ln340_12_fu_2654_p2 <= (and_ln786_12_fu_2649_p2 or and_ln785_2_fu_2632_p2);
    or_ln340_13_fu_2660_p2 <= (xor_ln785_5_fu_2627_p2 or and_ln786_2_reg_3726);
    or_ln340_14_fu_2665_p2 <= (or_ln340_13_fu_2660_p2 or and_ln781_2_fu_2612_p2);
    or_ln340_15_fu_1660_p2 <= (xor_ln340_10_fu_1654_p2 or tmp_69_fu_1628_p3);
    or_ln340_16_fu_1746_p2 <= (xor_ln340_3_fu_1740_p2 or tmp_71_fu_1714_p3);
    or_ln340_17_fu_2938_p2 <= (and_ln786_15_reg_3799 or and_ln785_3_fu_2932_p2);
    or_ln340_18_fu_2943_p2 <= (xor_ln785_7_fu_2927_p2 or and_ln786_3_reg_3794);
    or_ln340_19_fu_2948_p2 <= (or_ln340_18_fu_2943_p2 or and_ln781_3_reg_3789);
    or_ln340_1_fu_1188_p2 <= (xor_ln340_1_fu_1182_p2 or tmp_41_fu_1156_p3);
    or_ln340_2_fu_2056_p2 <= (and_ln786_6_fu_2051_p2 or and_ln785_fu_2034_p2);
    or_ln340_3_fu_2062_p2 <= (xor_ln785_1_fu_2029_p2 or and_ln786_5_reg_3590);
    or_ln340_4_fu_2067_p2 <= (or_ln340_3_fu_2062_p2 or and_ln781_fu_2014_p2);
    or_ln340_5_fu_1292_p2 <= (xor_ln340_5_fu_1286_p2 or tmp_49_fu_1260_p3);
    or_ln340_6_fu_1378_p2 <= (xor_ln340_6_fu_1372_p2 or tmp_51_fu_1346_p3);
    or_ln340_7_fu_2350_p2 <= (and_ln786_9_fu_2345_p2 or and_ln785_1_fu_2328_p2);
    or_ln340_8_fu_2356_p2 <= (xor_ln785_3_fu_2323_p2 or and_ln786_1_reg_3655);
    or_ln340_9_fu_2361_p2 <= (or_ln340_8_fu_2356_p2 or and_ln781_1_fu_2308_p2);
    or_ln340_fu_1102_p2 <= (xor_ln340_fu_1096_p2 or tmp_39_fu_1070_p3);
    or_ln785_1_fu_2318_p2 <= (xor_ln785_2_fu_2312_p2 or tmp_56_reg_3639);
    or_ln785_2_fu_2622_p2 <= (xor_ln785_4_fu_2616_p2 or tmp_66_reg_3710);
    or_ln785_3_fu_2922_p2 <= (xor_ln785_6_fu_2916_p2 or tmp_76_reg_3774);
    or_ln785_fu_2024_p2 <= (xor_ln785_fu_2018_p2 or tmp_46_reg_3574);
    or_ln786_1_fu_2334_p2 <= (and_ln786_1_reg_3655 or and_ln781_1_fu_2308_p2);
    or_ln786_2_fu_2638_p2 <= (and_ln786_2_reg_3726 or and_ln781_2_fu_2612_p2);
    or_ln786_3_fu_2863_p2 <= (and_ln786_3_fu_2857_p2 or and_ln781_3_fu_2851_p2);
    or_ln786_fu_2040_p2 <= (and_ln786_5_reg_3590 or and_ln781_fu_2014_p2);
    or_ln91_1_fu_825_p2 <= (trunc_ln321_reg_3151 or ap_const_lv5_2);
    or_ln91_2_fu_909_p2 <= (trunc_ln321_reg_3151 or ap_const_lv5_3);
    or_ln91_fu_740_p2 <= (trunc_ln321_fu_686_p1 or ap_const_lv5_1);
    p_cast31_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_621_p4),30));
    p_cast32_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_607_p4),30));
    p_cast33_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_593_p4),30));
    p_cast34_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_579_p4),30));
    p_cast35_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_565_p4),30));
    p_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_635_p4),30));
    result_0_V_fu_2087_p3 <= 
        select_ln340_4_fu_2073_p3 when (or_ln340_4_fu_2067_p2(0) = '1') else 
        select_ln388_2_fu_2080_p3;
    result_1_V_fu_2381_p3 <= 
        select_ln340_7_fu_2367_p3 when (or_ln340_9_fu_2361_p2(0) = '1') else 
        select_ln388_5_fu_2374_p3;
    result_2_V_fu_2685_p3 <= 
        select_ln340_9_fu_2671_p3 when (or_ln340_14_fu_2665_p2(0) = '1') else 
        select_ln388_8_fu_2678_p3;
    result_pack_0_V_fu_2577_p5 <= (result_pack_0_V_1_fu_188(63 downto 16) & result_0_V_reg_3616);
    result_pack_1_V_fu_2881_p5 <= (result_pack_1_V_1_fu_192(63 downto 16) & result_1_V_reg_3687);
    result_pack_2_V_fu_2974_p5 <= (result_pack_2_V_1_fu_196(63 downto 16) & result_2_V_reg_3753);
    result_pack_3_V_fu_3004_p5 <= (result_pack_3_V_1_fu_200(63 downto 16) & select_ln340_23_reg_3811);
    select_ln340_10_fu_1666_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_14_fu_1648_p2(0) = '1') else 
        add_ln703_20_fu_1623_p2;
    select_ln340_11_fu_2953_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_17_fu_2938_p2(0) = '1') else 
        add_ln415_3_reg_3763;
    select_ln340_13_fu_1384_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_11_fu_1366_p2(0) = '1') else 
        trunc_ln703_1_fu_1342_p1;
    select_ln340_14_fu_1400_p3 <= 
        select_ln340_13_fu_1384_p3 when (or_ln340_6_fu_1378_p2(0) = '1') else 
        select_ln388_4_fu_1392_p3;
    select_ln340_17_fu_1574_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_13_fu_1556_p2(0) = '1') else 
        trunc_ln703_2_fu_1532_p1;
    select_ln340_18_fu_1590_p3 <= 
        select_ln340_17_fu_1574_p3 when (or_ln340_11_fu_1568_p2(0) = '1') else 
        select_ln388_7_fu_1582_p3;
    select_ln340_21_fu_1752_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_15_fu_1734_p2(0) = '1') else 
        trunc_ln703_3_fu_1710_p1;
    select_ln340_22_fu_1768_p3 <= 
        select_ln340_21_fu_1752_p3 when (or_ln340_16_fu_1746_p2(0) = '1') else 
        select_ln388_10_fu_1760_p3;
    select_ln340_23_fu_2966_p3 <= 
        select_ln340_11_fu_2953_p3 when (or_ln340_19_fu_2948_p2(0) = '1') else 
        select_ln388_11_fu_2960_p3;
    select_ln340_2_fu_1194_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_7_fu_1176_p2(0) = '1') else 
        trunc_ln703_fu_1152_p1;
    select_ln340_3_fu_1210_p3 <= 
        select_ln340_2_fu_1194_p3 when (or_ln340_1_fu_1188_p2(0) = '1') else 
        select_ln388_1_fu_1202_p3;
    select_ln340_4_fu_2073_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_2_fu_2056_p2(0) = '1') else 
        add_ln415_reg_3562;
    select_ln340_5_fu_1298_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_9_fu_1280_p2(0) = '1') else 
        add_ln703_18_fu_1255_p2;
    select_ln340_7_fu_2367_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_7_fu_2350_p2(0) = '1') else 
        add_ln415_1_reg_3627;
    select_ln340_8_fu_1488_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_12_fu_1470_p2(0) = '1') else 
        add_ln703_19_fu_1445_p2;
    select_ln340_9_fu_2671_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_12_fu_2654_p2(0) = '1') else 
        add_ln415_2_reg_3698;
    select_ln340_fu_1108_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_4_fu_1090_p2(0) = '1') else 
        add_ln703_fu_1065_p2;
    select_ln388_10_fu_1760_p3 <= 
        ap_const_lv16_8000 when (and_ln786_14_fu_1728_p2(0) = '1') else 
        trunc_ln703_3_fu_1710_p1;
    select_ln388_11_fu_2960_p3 <= 
        ap_const_lv16_8000 when (and_ln786_15_reg_3799(0) = '1') else 
        add_ln415_3_reg_3763;
    select_ln388_1_fu_1202_p3 <= 
        ap_const_lv16_8000 when (and_ln786_4_fu_1170_p2(0) = '1') else 
        trunc_ln703_fu_1152_p1;
    select_ln388_2_fu_2080_p3 <= 
        ap_const_lv16_8000 when (and_ln786_6_fu_2051_p2(0) = '1') else 
        add_ln415_reg_3562;
    select_ln388_3_fu_1306_p3 <= 
        ap_const_lv16_8000 when (and_ln786_7_fu_1274_p2(0) = '1') else 
        add_ln703_18_fu_1255_p2;
    select_ln388_4_fu_1392_p3 <= 
        ap_const_lv16_8000 when (and_ln786_8_fu_1360_p2(0) = '1') else 
        trunc_ln703_1_fu_1342_p1;
    select_ln388_5_fu_2374_p3 <= 
        ap_const_lv16_8000 when (and_ln786_9_fu_2345_p2(0) = '1') else 
        add_ln415_1_reg_3627;
    select_ln388_6_fu_1496_p3 <= 
        ap_const_lv16_8000 when (and_ln786_10_fu_1464_p2(0) = '1') else 
        add_ln703_19_fu_1445_p2;
    select_ln388_7_fu_1582_p3 <= 
        ap_const_lv16_8000 when (and_ln786_11_fu_1550_p2(0) = '1') else 
        trunc_ln703_2_fu_1532_p1;
    select_ln388_8_fu_2678_p3 <= 
        ap_const_lv16_8000 when (and_ln786_12_fu_2649_p2(0) = '1') else 
        add_ln415_2_reg_3698;
    select_ln388_9_fu_1674_p3 <= 
        ap_const_lv16_8000 when (and_ln786_13_fu_1642_p2(0) = '1') else 
        add_ln703_20_fu_1623_p2;
    select_ln388_fu_1116_p3 <= 
        ap_const_lv16_8000 when (and_ln786_fu_1084_p2(0) = '1') else 
        add_ln703_fu_1065_p2;
    select_ln416_1_fu_2245_p3 <= 
        and_ln779_1_fu_2239_p2 when (and_ln416_1_fu_2173_p2(0) = '1') else 
        icmp_ln879_3_fu_2213_p2;
    select_ln416_2_fu_2539_p3 <= 
        and_ln779_2_fu_2533_p2 when (and_ln416_2_fu_2467_p2(0) = '1') else 
        icmp_ln879_5_fu_2507_p2;
    select_ln416_3_fu_2843_p3 <= 
        and_ln779_3_fu_2837_p2 when (and_ln416_3_fu_2771_p2(0) = '1') else 
        icmp_ln879_7_fu_2811_p2;
    select_ln416_fu_1964_p3 <= 
        and_ln779_fu_1958_p2 when (and_ln416_fu_1892_p2(0) = '1') else 
        icmp_ln879_1_fu_1932_p2;
    select_ln777_1_fu_2303_p3 <= 
        icmp_ln879_3_reg_3644 when (and_ln416_1_reg_3633(0) = '1') else 
        icmp_ln768_1_reg_3650;
    select_ln777_2_fu_2607_p3 <= 
        icmp_ln879_5_reg_3715 when (and_ln416_2_reg_3704(0) = '1') else 
        icmp_ln768_2_reg_3721;
    select_ln777_3_fu_2911_p3 <= 
        icmp_ln879_7_reg_3779 when (and_ln416_3_reg_3769(0) = '1') else 
        icmp_ln768_3_reg_3784;
    select_ln777_fu_2009_p3 <= 
        icmp_ln879_1_reg_3579 when (and_ln416_reg_3568(0) = '1') else 
        icmp_ln768_reg_3585;
        sext_ln1192_1_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_1_fu_2098_p3),37));

        sext_ln1192_2_fu_2403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_2_fu_2392_p3),37));

        sext_ln1192_3_fu_2707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_3_fu_2696_p3),37));

        sext_ln1192_fu_1828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1817_p3),37));

        sext_ln703_10_fu_1690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_m_3_V_reg_3485),17));

        sext_ln703_11_fu_1693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_mean_m_3_V_reg_3490),17));

        sext_ln703_1_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln339_reg_3387),17));

        sext_ln703_2_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln339_1_reg_3392),17));

        sext_ln703_3_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_variance_m_1_reg_3423),17));

        sext_ln703_4_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_m_1_V_reg_3413),17));

        sext_ln703_5_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_mean_m_1_V_reg_3418),17));

        sext_ln703_6_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_variance_m_2_reg_3459),17));

        sext_ln703_7_fu_1512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_m_2_V_reg_3449),17));

        sext_ln703_8_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_mean_m_2_V_reg_3454),17));

        sext_ln703_9_fu_1606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(moving_variance_m_3_reg_3495),17));

        sext_ln703_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln339_2_reg_3397),17));

        sext_ln727_1_fu_2095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_3_reg_3596),47));

        sext_ln727_2_fu_2389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_5_reg_3661),47));

        sext_ln727_3_fu_2693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_7_reg_3732),47));

        sext_ln727_fu_1814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_1_reg_3536),47));

        sext_ln728_1_fu_2105_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_1_fu_2098_p3),47));

        sext_ln728_2_fu_2399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_2_fu_2392_p3),47));

        sext_ln728_3_fu_2703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_3_fu_2696_p3),47));

        sext_ln728_fu_1824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1817_p3),47));

    shl_ln728_1_fu_2098_p3 <= (trunc_ln728_1_reg_3444_pp0_iter5_reg & ap_const_lv20_0);
    shl_ln728_2_fu_2392_p3 <= (trunc_ln728_2_reg_3480_pp0_iter5_reg & ap_const_lv20_0);
    shl_ln728_3_fu_2696_p3 <= (trunc_ln728_3_reg_3516_pp0_iter5_reg & ap_const_lv20_0);
    shl_ln_fu_1817_p3 <= (trunc_ln728_reg_3408_pp0_iter5_reg & ap_const_lv20_0);
    sub_ln1193_1_fu_1328_p2 <= std_logic_vector(signed(sext_ln703_4_fu_1322_p1) - signed(sext_ln703_5_fu_1325_p1));
    sub_ln1193_2_fu_1518_p2 <= std_logic_vector(signed(sext_ln703_7_fu_1512_p1) - signed(sext_ln703_8_fu_1515_p1));
    sub_ln1193_3_fu_1696_p2 <= std_logic_vector(signed(sext_ln703_10_fu_1690_p1) - signed(sext_ln703_11_fu_1693_p1));
    sub_ln1193_fu_1138_p2 <= std_logic_vector(signed(sext_ln703_1_fu_1132_p1) - signed(sext_ln703_2_fu_1135_p1));
    tmp_1_fu_1906_p4 <= add_ln1192_1_fu_1832_p2(46 downto 37);
    tmp_2_fu_1922_p4 <= add_ln1192_1_fu_1832_p2(46 downto 36);
    tmp_31_fu_565_p4 <= out_V(31 downto 3);
    tmp_32_fu_579_p4 <= moving_variance_V(31 downto 3);
    tmp_33_fu_593_p4 <= moving_mean_V(31 downto 3);
    tmp_34_fu_607_p4 <= gamma_V(31 downto 3);
    tmp_35_fu_621_p4 <= beta_V(31 downto 3);
    tmp_36_fu_635_p4 <= in_V(31 downto 3);
    tmp_37_fu_649_p3 <= ap_phi_mux_i_0_phi_fu_548_p4(5 downto 5);
    tmp_38_fu_1057_p3 <= add_ln1192_fu_1051_p2(16 downto 16);
    tmp_39_fu_1070_p3 <= add_ln703_fu_1065_p2(15 downto 15);
    tmp_3_fu_2187_p4 <= add_ln1192_3_fu_2113_p2(46 downto 37);
    tmp_40_fu_1144_p3 <= sub_ln1193_fu_1138_p2(16 downto 16);
    tmp_41_fu_1156_p3 <= sub_ln1193_fu_1138_p2(15 downto 15);
    tmp_43_fu_1861_p3 <= add_ln1192_1_fu_1832_p2(35 downto 35);
    tmp_45_fu_1878_p3 <= add_ln415_fu_1872_p2(15 downto 15);
    tmp_46_fu_1898_p3 <= add_ln415_fu_1872_p2(15 downto 15);
    tmp_47_fu_1944_p3 <= add_ln1192_8_fu_1838_p2(36 downto 36);
    tmp_48_fu_1247_p3 <= add_ln1192_2_fu_1241_p2(16 downto 16);
    tmp_49_fu_1260_p3 <= add_ln703_18_fu_1255_p2(15 downto 15);
    tmp_4_fu_2203_p4 <= add_ln1192_3_fu_2113_p2(46 downto 36);
    tmp_50_fu_1334_p3 <= sub_ln1193_1_fu_1328_p2(16 downto 16);
    tmp_51_fu_1346_p3 <= sub_ln1193_1_fu_1328_p2(15 downto 15);
    tmp_53_fu_2142_p3 <= add_ln1192_3_fu_2113_p2(35 downto 35);
    tmp_55_fu_2159_p3 <= add_ln415_1_fu_2153_p2(15 downto 15);
    tmp_56_fu_2179_p3 <= add_ln415_1_fu_2153_p2(15 downto 15);
    tmp_57_fu_2225_p3 <= add_ln1192_9_fu_2119_p2(36 downto 36);
    tmp_58_fu_1437_p3 <= add_ln1192_4_fu_1431_p2(16 downto 16);
    tmp_59_fu_1450_p3 <= add_ln703_19_fu_1445_p2(15 downto 15);
    tmp_5_fu_2481_p4 <= add_ln1192_5_fu_2407_p2(46 downto 37);
    tmp_60_fu_1524_p3 <= sub_ln1193_2_fu_1518_p2(16 downto 16);
    tmp_61_fu_1536_p3 <= sub_ln1193_2_fu_1518_p2(15 downto 15);
    tmp_63_fu_2436_p3 <= add_ln1192_5_fu_2407_p2(35 downto 35);
    tmp_65_fu_2453_p3 <= add_ln415_2_fu_2447_p2(15 downto 15);
    tmp_66_fu_2473_p3 <= add_ln415_2_fu_2447_p2(15 downto 15);
    tmp_67_fu_2519_p3 <= add_ln1192_10_fu_2413_p2(36 downto 36);
    tmp_68_fu_1615_p3 <= add_ln1192_6_fu_1609_p2(16 downto 16);
    tmp_69_fu_1628_p3 <= add_ln703_20_fu_1623_p2(15 downto 15);
    tmp_6_fu_2497_p4 <= add_ln1192_5_fu_2407_p2(46 downto 36);
    tmp_70_fu_1702_p3 <= sub_ln1193_3_fu_1696_p2(16 downto 16);
    tmp_71_fu_1714_p3 <= sub_ln1193_3_fu_1696_p2(15 downto 15);
    tmp_72_fu_2722_p3 <= add_ln1192_7_fu_2711_p2(46 downto 46);
    tmp_73_fu_2740_p3 <= add_ln1192_7_fu_2711_p2(35 downto 35);
    tmp_75_fu_2757_p3 <= add_ln415_3_fu_2751_p2(15 downto 15);
    tmp_76_fu_2777_p3 <= add_ln415_3_fu_2751_p2(15 downto 15);
    tmp_77_fu_2823_p3 <= add_ln1192_11_fu_2717_p2(36 downto 36);
    tmp_7_fu_2785_p4 <= add_ln1192_7_fu_2711_p2(46 downto 37);
    tmp_8_fu_2801_p4 <= add_ln1192_7_fu_2711_p2(46 downto 36);
    trunc_ln1118_1_fu_1218_p1 <= GAMMA_RDATA(16 - 1 downto 0);
    trunc_ln1118_2_fu_1408_p1 <= GAMMA_RDATA(16 - 1 downto 0);
    trunc_ln1118_3_fu_1598_p1 <= GAMMA_RDATA(16 - 1 downto 0);
    trunc_ln1118_fu_1028_p1 <= GAMMA_RDATA(16 - 1 downto 0);
    trunc_ln1192_1_fu_1990_p1 <= mul_ln1118_3_fu_1984_p2(37 - 1 downto 0);
    trunc_ln1192_2_fu_2271_p1 <= mul_ln1118_5_fu_2265_p2(37 - 1 downto 0);
    trunc_ln1192_3_fu_2565_p1 <= mul_ln1118_7_fu_2559_p2(37 - 1 downto 0);
    trunc_ln1192_fu_1795_p1 <= mul_ln1118_1_fu_1789_p2(37 - 1 downto 0);
    trunc_ln321_fu_686_p1 <= i_0_reg_544(5 - 1 downto 0);
    trunc_ln339_1_fu_1020_p1 <= M_M_RDATA(16 - 1 downto 0);
    trunc_ln339_2_fu_1024_p1 <= M_V_RDATA(16 - 1 downto 0);
    trunc_ln339_fu_1016_p1 <= IN_r_RDATA(16 - 1 downto 0);
    trunc_ln4_fu_1851_p4 <= add_ln1192_1_fu_1832_p2(35 downto 20);
    trunc_ln703_1_fu_1342_p1 <= sub_ln1193_1_fu_1328_p2(16 - 1 downto 0);
    trunc_ln703_2_fu_1532_p1 <= sub_ln1193_2_fu_1518_p2(16 - 1 downto 0);
    trunc_ln703_3_fu_1710_p1 <= sub_ln1193_3_fu_1696_p2(16 - 1 downto 0);
    trunc_ln703_fu_1152_p1 <= sub_ln1193_fu_1138_p2(16 - 1 downto 0);
    trunc_ln708_13_fu_2426_p4 <= add_ln1192_5_fu_2407_p2(35 downto 20);
    trunc_ln708_14_fu_2730_p4 <= add_ln1192_7_fu_2711_p2(35 downto 20);
    trunc_ln708_s_fu_2132_p4 <= add_ln1192_3_fu_2113_p2(35 downto 20);
    trunc_ln728_1_fu_1222_p1 <= BETA_RDATA(16 - 1 downto 0);
    trunc_ln728_2_fu_1412_p1 <= BETA_RDATA(16 - 1 downto 0);
    trunc_ln728_3_fu_1602_p1 <= BETA_RDATA(16 - 1 downto 0);
    trunc_ln728_fu_1032_p1 <= BETA_RDATA(16 - 1 downto 0);
    x_V_1_fu_1314_p3 <= 
        select_ln340_5_fu_1298_p3 when (or_ln340_5_fu_1292_p2(0) = '1') else 
        select_ln388_3_fu_1306_p3;
    x_V_2_fu_1504_p3 <= 
        select_ln340_8_fu_1488_p3 when (or_ln340_10_fu_1482_p2(0) = '1') else 
        select_ln388_6_fu_1496_p3;
    x_V_3_fu_1682_p3 <= 
        select_ln340_10_fu_1666_p3 when (or_ln340_15_fu_1660_p2(0) = '1') else 
        select_ln388_9_fu_1674_p3;
    x_V_fu_1124_p3 <= 
        select_ln340_fu_1108_p3 when (or_ln340_fu_1102_p2(0) = '1') else 
        select_ln388_fu_1116_p3;
    xor_ln340_10_fu_1654_p2 <= (tmp_68_fu_1615_p3 xor ap_const_lv1_1);
    xor_ln340_11_fu_1366_p2 <= (tmp_51_fu_1346_p3 xor tmp_50_fu_1334_p3);
    xor_ln340_12_fu_1470_p2 <= (tmp_59_fu_1450_p3 xor tmp_58_fu_1437_p3);
    xor_ln340_13_fu_1556_p2 <= (tmp_61_fu_1536_p3 xor tmp_60_fu_1524_p3);
    xor_ln340_14_fu_1648_p2 <= (tmp_69_fu_1628_p3 xor tmp_68_fu_1615_p3);
    xor_ln340_15_fu_1734_p2 <= (tmp_71_fu_1714_p3 xor tmp_70_fu_1702_p3);
    xor_ln340_1_fu_1182_p2 <= (tmp_40_fu_1144_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_1562_p2 <= (tmp_60_fu_1524_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_1740_p2 <= (tmp_70_fu_1702_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_1090_p2 <= (tmp_39_fu_1070_p3 xor tmp_38_fu_1057_p3);
    xor_ln340_5_fu_1286_p2 <= (tmp_48_fu_1247_p3 xor ap_const_lv1_1);
    xor_ln340_6_fu_1372_p2 <= (tmp_50_fu_1334_p3 xor ap_const_lv1_1);
    xor_ln340_7_fu_1176_p2 <= (tmp_41_fu_1156_p3 xor tmp_40_fu_1144_p3);
    xor_ln340_8_fu_1476_p2 <= (tmp_58_fu_1437_p3 xor ap_const_lv1_1);
    xor_ln340_9_fu_1280_p2 <= (tmp_49_fu_1260_p3 xor tmp_48_fu_1247_p3);
    xor_ln340_fu_1096_p2 <= (tmp_38_fu_1057_p3 xor ap_const_lv1_1);
    xor_ln416_1_fu_2167_p2 <= (tmp_55_fu_2159_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_2461_p2 <= (tmp_65_fu_2453_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_2765_p2 <= (tmp_75_fu_2757_p3 xor ap_const_lv1_1);
    xor_ln416_fu_1886_p2 <= (tmp_45_fu_1878_p3 xor ap_const_lv1_1);
    xor_ln779_1_fu_2233_p2 <= (tmp_57_fu_2225_p3 xor ap_const_lv1_1);
    xor_ln779_2_fu_2527_p2 <= (tmp_67_fu_2519_p3 xor ap_const_lv1_1);
    xor_ln779_3_fu_2831_p2 <= (tmp_77_fu_2823_p3 xor ap_const_lv1_1);
    xor_ln779_fu_1952_p2 <= (tmp_47_fu_1944_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_2029_p2 <= (tmp_42_reg_3556 xor ap_const_lv1_1);
    xor_ln785_2_fu_2312_p2 <= (select_ln777_1_fu_2303_p3 xor ap_const_lv1_1);
    xor_ln785_3_fu_2323_p2 <= (tmp_52_reg_3621 xor ap_const_lv1_1);
    xor_ln785_4_fu_2616_p2 <= (select_ln777_2_fu_2607_p3 xor ap_const_lv1_1);
    xor_ln785_5_fu_2627_p2 <= (tmp_62_reg_3692 xor ap_const_lv1_1);
    xor_ln785_6_fu_2916_p2 <= (select_ln777_3_fu_2911_p3 xor ap_const_lv1_1);
    xor_ln785_7_fu_2927_p2 <= (tmp_72_reg_3758 xor ap_const_lv1_1);
    xor_ln785_fu_2018_p2 <= (select_ln777_fu_2009_p3 xor ap_const_lv1_1);
    xor_ln786_10_fu_1722_p2 <= (tmp_71_fu_1714_p3 xor ap_const_lv1_1);
    xor_ln786_11_fu_2869_p2 <= (or_ln786_3_fu_2863_p2 xor ap_const_lv1_1);
    xor_ln786_1_fu_1164_p2 <= (tmp_41_fu_1156_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_2045_p2 <= (or_ln786_fu_2040_p2 xor ap_const_lv1_1);
    xor_ln786_3_fu_1636_p2 <= (tmp_69_fu_1628_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_1268_p2 <= (tmp_49_fu_1260_p3 xor ap_const_lv1_1);
    xor_ln786_5_fu_1354_p2 <= (tmp_51_fu_1346_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_2339_p2 <= (or_ln786_1_fu_2334_p2 xor ap_const_lv1_1);
    xor_ln786_7_fu_1458_p2 <= (tmp_59_fu_1450_p3 xor ap_const_lv1_1);
    xor_ln786_8_fu_1544_p2 <= (tmp_61_fu_1536_p3 xor ap_const_lv1_1);
    xor_ln786_9_fu_2643_p2 <= (or_ln786_2_fu_2638_p2 xor ap_const_lv1_1);
    xor_ln786_fu_1078_p2 <= (tmp_39_fu_1070_p3 xor ap_const_lv1_1);
    zext_ln321_10_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_8_reg_3207),64));
    zext_ln321_11_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_9_reg_3212),64));
    zext_ln321_12_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_1_fu_825_p2),30));
    zext_ln321_13_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_10_reg_3252),64));
    zext_ln321_14_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_11_reg_3257),64));
    zext_ln321_15_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_12_reg_3262),64));
    zext_ln321_16_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_13_reg_3267),64));
    zext_ln321_17_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_14_reg_3272),64));
    zext_ln321_18_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_2_fu_909_p2),30));
    zext_ln321_19_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_15_reg_3307),64));
    zext_ln321_1_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_3126),64));
    zext_ln321_20_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_16_reg_3312),64));
    zext_ln321_21_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_17_reg_3317),64));
    zext_ln321_22_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_18_reg_3322),64));
    zext_ln321_23_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_19_reg_3327),64));
    zext_ln321_24_fu_2290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_20_reg_3332_pp0_iter4_reg),64));
    zext_ln321_25_fu_2589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_21_reg_3337_pp0_iter4_reg),64));
    zext_ln321_26_fu_2893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_22_reg_3342_pp0_iter5_reg),64));
    zext_ln321_27_fu_2986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_23_reg_3347_pp0_iter5_reg),64));
    zext_ln321_2_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_reg_3131),64));
    zext_ln321_3_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_2_reg_3136),64));
    zext_ln321_4_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_3_reg_3141),64));
    zext_ln321_5_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_4_reg_3146),64));
    zext_ln321_6_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_fu_740_p2),30));
    zext_ln321_7_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_5_reg_3192),64));
    zext_ln321_8_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_6_reg_3197),64));
    zext_ln321_9_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_7_reg_3202),64));
    zext_ln321_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_548_p4),30));
    zext_ln415_1_fu_2150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_reg_3606),16));
    zext_ln415_2_fu_2444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_reg_3671),16));
    zext_ln415_3_fu_2748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_3742),16));
    zext_ln415_fu_1869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_reg_3546),16));
end behav;
