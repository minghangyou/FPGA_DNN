// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=61,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=12,HLS_SYN_FF=7493,HLS_SYN_LUT=10756,HLS_VERSION=2019_1}" *)

module bn (
        ap_clk,
        ap_rst_n,
        m_axi_IN_r_AWVALID,
        m_axi_IN_r_AWREADY,
        m_axi_IN_r_AWADDR,
        m_axi_IN_r_AWID,
        m_axi_IN_r_AWLEN,
        m_axi_IN_r_AWSIZE,
        m_axi_IN_r_AWBURST,
        m_axi_IN_r_AWLOCK,
        m_axi_IN_r_AWCACHE,
        m_axi_IN_r_AWPROT,
        m_axi_IN_r_AWQOS,
        m_axi_IN_r_AWREGION,
        m_axi_IN_r_AWUSER,
        m_axi_IN_r_WVALID,
        m_axi_IN_r_WREADY,
        m_axi_IN_r_WDATA,
        m_axi_IN_r_WSTRB,
        m_axi_IN_r_WLAST,
        m_axi_IN_r_WID,
        m_axi_IN_r_WUSER,
        m_axi_IN_r_ARVALID,
        m_axi_IN_r_ARREADY,
        m_axi_IN_r_ARADDR,
        m_axi_IN_r_ARID,
        m_axi_IN_r_ARLEN,
        m_axi_IN_r_ARSIZE,
        m_axi_IN_r_ARBURST,
        m_axi_IN_r_ARLOCK,
        m_axi_IN_r_ARCACHE,
        m_axi_IN_r_ARPROT,
        m_axi_IN_r_ARQOS,
        m_axi_IN_r_ARREGION,
        m_axi_IN_r_ARUSER,
        m_axi_IN_r_RVALID,
        m_axi_IN_r_RREADY,
        m_axi_IN_r_RDATA,
        m_axi_IN_r_RLAST,
        m_axi_IN_r_RID,
        m_axi_IN_r_RUSER,
        m_axi_IN_r_RRESP,
        m_axi_IN_r_BVALID,
        m_axi_IN_r_BREADY,
        m_axi_IN_r_BRESP,
        m_axi_IN_r_BID,
        m_axi_IN_r_BUSER,
        m_axi_BETA_AWVALID,
        m_axi_BETA_AWREADY,
        m_axi_BETA_AWADDR,
        m_axi_BETA_AWID,
        m_axi_BETA_AWLEN,
        m_axi_BETA_AWSIZE,
        m_axi_BETA_AWBURST,
        m_axi_BETA_AWLOCK,
        m_axi_BETA_AWCACHE,
        m_axi_BETA_AWPROT,
        m_axi_BETA_AWQOS,
        m_axi_BETA_AWREGION,
        m_axi_BETA_AWUSER,
        m_axi_BETA_WVALID,
        m_axi_BETA_WREADY,
        m_axi_BETA_WDATA,
        m_axi_BETA_WSTRB,
        m_axi_BETA_WLAST,
        m_axi_BETA_WID,
        m_axi_BETA_WUSER,
        m_axi_BETA_ARVALID,
        m_axi_BETA_ARREADY,
        m_axi_BETA_ARADDR,
        m_axi_BETA_ARID,
        m_axi_BETA_ARLEN,
        m_axi_BETA_ARSIZE,
        m_axi_BETA_ARBURST,
        m_axi_BETA_ARLOCK,
        m_axi_BETA_ARCACHE,
        m_axi_BETA_ARPROT,
        m_axi_BETA_ARQOS,
        m_axi_BETA_ARREGION,
        m_axi_BETA_ARUSER,
        m_axi_BETA_RVALID,
        m_axi_BETA_RREADY,
        m_axi_BETA_RDATA,
        m_axi_BETA_RLAST,
        m_axi_BETA_RID,
        m_axi_BETA_RUSER,
        m_axi_BETA_RRESP,
        m_axi_BETA_BVALID,
        m_axi_BETA_BREADY,
        m_axi_BETA_BRESP,
        m_axi_BETA_BID,
        m_axi_BETA_BUSER,
        m_axi_GAMMA_AWVALID,
        m_axi_GAMMA_AWREADY,
        m_axi_GAMMA_AWADDR,
        m_axi_GAMMA_AWID,
        m_axi_GAMMA_AWLEN,
        m_axi_GAMMA_AWSIZE,
        m_axi_GAMMA_AWBURST,
        m_axi_GAMMA_AWLOCK,
        m_axi_GAMMA_AWCACHE,
        m_axi_GAMMA_AWPROT,
        m_axi_GAMMA_AWQOS,
        m_axi_GAMMA_AWREGION,
        m_axi_GAMMA_AWUSER,
        m_axi_GAMMA_WVALID,
        m_axi_GAMMA_WREADY,
        m_axi_GAMMA_WDATA,
        m_axi_GAMMA_WSTRB,
        m_axi_GAMMA_WLAST,
        m_axi_GAMMA_WID,
        m_axi_GAMMA_WUSER,
        m_axi_GAMMA_ARVALID,
        m_axi_GAMMA_ARREADY,
        m_axi_GAMMA_ARADDR,
        m_axi_GAMMA_ARID,
        m_axi_GAMMA_ARLEN,
        m_axi_GAMMA_ARSIZE,
        m_axi_GAMMA_ARBURST,
        m_axi_GAMMA_ARLOCK,
        m_axi_GAMMA_ARCACHE,
        m_axi_GAMMA_ARPROT,
        m_axi_GAMMA_ARQOS,
        m_axi_GAMMA_ARREGION,
        m_axi_GAMMA_ARUSER,
        m_axi_GAMMA_RVALID,
        m_axi_GAMMA_RREADY,
        m_axi_GAMMA_RDATA,
        m_axi_GAMMA_RLAST,
        m_axi_GAMMA_RID,
        m_axi_GAMMA_RUSER,
        m_axi_GAMMA_RRESP,
        m_axi_GAMMA_BVALID,
        m_axi_GAMMA_BREADY,
        m_axi_GAMMA_BRESP,
        m_axi_GAMMA_BID,
        m_axi_GAMMA_BUSER,
        m_axi_M_M_AWVALID,
        m_axi_M_M_AWREADY,
        m_axi_M_M_AWADDR,
        m_axi_M_M_AWID,
        m_axi_M_M_AWLEN,
        m_axi_M_M_AWSIZE,
        m_axi_M_M_AWBURST,
        m_axi_M_M_AWLOCK,
        m_axi_M_M_AWCACHE,
        m_axi_M_M_AWPROT,
        m_axi_M_M_AWQOS,
        m_axi_M_M_AWREGION,
        m_axi_M_M_AWUSER,
        m_axi_M_M_WVALID,
        m_axi_M_M_WREADY,
        m_axi_M_M_WDATA,
        m_axi_M_M_WSTRB,
        m_axi_M_M_WLAST,
        m_axi_M_M_WID,
        m_axi_M_M_WUSER,
        m_axi_M_M_ARVALID,
        m_axi_M_M_ARREADY,
        m_axi_M_M_ARADDR,
        m_axi_M_M_ARID,
        m_axi_M_M_ARLEN,
        m_axi_M_M_ARSIZE,
        m_axi_M_M_ARBURST,
        m_axi_M_M_ARLOCK,
        m_axi_M_M_ARCACHE,
        m_axi_M_M_ARPROT,
        m_axi_M_M_ARQOS,
        m_axi_M_M_ARREGION,
        m_axi_M_M_ARUSER,
        m_axi_M_M_RVALID,
        m_axi_M_M_RREADY,
        m_axi_M_M_RDATA,
        m_axi_M_M_RLAST,
        m_axi_M_M_RID,
        m_axi_M_M_RUSER,
        m_axi_M_M_RRESP,
        m_axi_M_M_BVALID,
        m_axi_M_M_BREADY,
        m_axi_M_M_BRESP,
        m_axi_M_M_BID,
        m_axi_M_M_BUSER,
        m_axi_M_V_AWVALID,
        m_axi_M_V_AWREADY,
        m_axi_M_V_AWADDR,
        m_axi_M_V_AWID,
        m_axi_M_V_AWLEN,
        m_axi_M_V_AWSIZE,
        m_axi_M_V_AWBURST,
        m_axi_M_V_AWLOCK,
        m_axi_M_V_AWCACHE,
        m_axi_M_V_AWPROT,
        m_axi_M_V_AWQOS,
        m_axi_M_V_AWREGION,
        m_axi_M_V_AWUSER,
        m_axi_M_V_WVALID,
        m_axi_M_V_WREADY,
        m_axi_M_V_WDATA,
        m_axi_M_V_WSTRB,
        m_axi_M_V_WLAST,
        m_axi_M_V_WID,
        m_axi_M_V_WUSER,
        m_axi_M_V_ARVALID,
        m_axi_M_V_ARREADY,
        m_axi_M_V_ARADDR,
        m_axi_M_V_ARID,
        m_axi_M_V_ARLEN,
        m_axi_M_V_ARSIZE,
        m_axi_M_V_ARBURST,
        m_axi_M_V_ARLOCK,
        m_axi_M_V_ARCACHE,
        m_axi_M_V_ARPROT,
        m_axi_M_V_ARQOS,
        m_axi_M_V_ARREGION,
        m_axi_M_V_ARUSER,
        m_axi_M_V_RVALID,
        m_axi_M_V_RREADY,
        m_axi_M_V_RDATA,
        m_axi_M_V_RLAST,
        m_axi_M_V_RID,
        m_axi_M_V_RUSER,
        m_axi_M_V_RRESP,
        m_axi_M_V_BVALID,
        m_axi_M_V_BREADY,
        m_axi_M_V_BRESP,
        m_axi_M_V_BID,
        m_axi_M_V_BUSER,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state34 = 6'd32;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 64;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BETA_ID_WIDTH = 1;
parameter    C_M_AXI_BETA_ADDR_WIDTH = 32;
parameter    C_M_AXI_BETA_DATA_WIDTH = 64;
parameter    C_M_AXI_BETA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_WUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_RUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_BUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_USER_VALUE = 0;
parameter    C_M_AXI_BETA_PROT_VALUE = 0;
parameter    C_M_AXI_BETA_CACHE_VALUE = 3;
parameter    C_M_AXI_GAMMA_ID_WIDTH = 1;
parameter    C_M_AXI_GAMMA_ADDR_WIDTH = 32;
parameter    C_M_AXI_GAMMA_DATA_WIDTH = 64;
parameter    C_M_AXI_GAMMA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_WUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_RUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_BUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_USER_VALUE = 0;
parameter    C_M_AXI_GAMMA_PROT_VALUE = 0;
parameter    C_M_AXI_GAMMA_CACHE_VALUE = 3;
parameter    C_M_AXI_M_M_ID_WIDTH = 1;
parameter    C_M_AXI_M_M_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_M_DATA_WIDTH = 64;
parameter    C_M_AXI_M_M_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_USER_VALUE = 0;
parameter    C_M_AXI_M_M_PROT_VALUE = 0;
parameter    C_M_AXI_M_M_CACHE_VALUE = 3;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 64;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 64;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BETA_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_GAMMA_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_M_M_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IN_r_AWVALID;
input   m_axi_IN_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_AWID;
output  [7:0] m_axi_IN_r_AWLEN;
output  [2:0] m_axi_IN_r_AWSIZE;
output  [1:0] m_axi_IN_r_AWBURST;
output  [1:0] m_axi_IN_r_AWLOCK;
output  [3:0] m_axi_IN_r_AWCACHE;
output  [2:0] m_axi_IN_r_AWPROT;
output  [3:0] m_axi_IN_r_AWQOS;
output  [3:0] m_axi_IN_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_IN_r_AWUSER;
output   m_axi_IN_r_WVALID;
input   m_axi_IN_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_IN_r_WSTRB;
output   m_axi_IN_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_IN_r_WUSER;
output   m_axi_IN_r_ARVALID;
input   m_axi_IN_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_ARID;
output  [7:0] m_axi_IN_r_ARLEN;
output  [2:0] m_axi_IN_r_ARSIZE;
output  [1:0] m_axi_IN_r_ARBURST;
output  [1:0] m_axi_IN_r_ARLOCK;
output  [3:0] m_axi_IN_r_ARCACHE;
output  [2:0] m_axi_IN_r_ARPROT;
output  [3:0] m_axi_IN_r_ARQOS;
output  [3:0] m_axi_IN_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_IN_r_ARUSER;
input   m_axi_IN_r_RVALID;
output   m_axi_IN_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_RDATA;
input   m_axi_IN_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_IN_r_RUSER;
input  [1:0] m_axi_IN_r_RRESP;
input   m_axi_IN_r_BVALID;
output   m_axi_IN_r_BREADY;
input  [1:0] m_axi_IN_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_IN_r_BUSER;
output   m_axi_BETA_AWVALID;
input   m_axi_BETA_AWREADY;
output  [C_M_AXI_BETA_ADDR_WIDTH - 1:0] m_axi_BETA_AWADDR;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_AWID;
output  [7:0] m_axi_BETA_AWLEN;
output  [2:0] m_axi_BETA_AWSIZE;
output  [1:0] m_axi_BETA_AWBURST;
output  [1:0] m_axi_BETA_AWLOCK;
output  [3:0] m_axi_BETA_AWCACHE;
output  [2:0] m_axi_BETA_AWPROT;
output  [3:0] m_axi_BETA_AWQOS;
output  [3:0] m_axi_BETA_AWREGION;
output  [C_M_AXI_BETA_AWUSER_WIDTH - 1:0] m_axi_BETA_AWUSER;
output   m_axi_BETA_WVALID;
input   m_axi_BETA_WREADY;
output  [C_M_AXI_BETA_DATA_WIDTH - 1:0] m_axi_BETA_WDATA;
output  [C_M_AXI_BETA_WSTRB_WIDTH - 1:0] m_axi_BETA_WSTRB;
output   m_axi_BETA_WLAST;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_WID;
output  [C_M_AXI_BETA_WUSER_WIDTH - 1:0] m_axi_BETA_WUSER;
output   m_axi_BETA_ARVALID;
input   m_axi_BETA_ARREADY;
output  [C_M_AXI_BETA_ADDR_WIDTH - 1:0] m_axi_BETA_ARADDR;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_ARID;
output  [7:0] m_axi_BETA_ARLEN;
output  [2:0] m_axi_BETA_ARSIZE;
output  [1:0] m_axi_BETA_ARBURST;
output  [1:0] m_axi_BETA_ARLOCK;
output  [3:0] m_axi_BETA_ARCACHE;
output  [2:0] m_axi_BETA_ARPROT;
output  [3:0] m_axi_BETA_ARQOS;
output  [3:0] m_axi_BETA_ARREGION;
output  [C_M_AXI_BETA_ARUSER_WIDTH - 1:0] m_axi_BETA_ARUSER;
input   m_axi_BETA_RVALID;
output   m_axi_BETA_RREADY;
input  [C_M_AXI_BETA_DATA_WIDTH - 1:0] m_axi_BETA_RDATA;
input   m_axi_BETA_RLAST;
input  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_RID;
input  [C_M_AXI_BETA_RUSER_WIDTH - 1:0] m_axi_BETA_RUSER;
input  [1:0] m_axi_BETA_RRESP;
input   m_axi_BETA_BVALID;
output   m_axi_BETA_BREADY;
input  [1:0] m_axi_BETA_BRESP;
input  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_BID;
input  [C_M_AXI_BETA_BUSER_WIDTH - 1:0] m_axi_BETA_BUSER;
output   m_axi_GAMMA_AWVALID;
input   m_axi_GAMMA_AWREADY;
output  [C_M_AXI_GAMMA_ADDR_WIDTH - 1:0] m_axi_GAMMA_AWADDR;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_AWID;
output  [7:0] m_axi_GAMMA_AWLEN;
output  [2:0] m_axi_GAMMA_AWSIZE;
output  [1:0] m_axi_GAMMA_AWBURST;
output  [1:0] m_axi_GAMMA_AWLOCK;
output  [3:0] m_axi_GAMMA_AWCACHE;
output  [2:0] m_axi_GAMMA_AWPROT;
output  [3:0] m_axi_GAMMA_AWQOS;
output  [3:0] m_axi_GAMMA_AWREGION;
output  [C_M_AXI_GAMMA_AWUSER_WIDTH - 1:0] m_axi_GAMMA_AWUSER;
output   m_axi_GAMMA_WVALID;
input   m_axi_GAMMA_WREADY;
output  [C_M_AXI_GAMMA_DATA_WIDTH - 1:0] m_axi_GAMMA_WDATA;
output  [C_M_AXI_GAMMA_WSTRB_WIDTH - 1:0] m_axi_GAMMA_WSTRB;
output   m_axi_GAMMA_WLAST;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_WID;
output  [C_M_AXI_GAMMA_WUSER_WIDTH - 1:0] m_axi_GAMMA_WUSER;
output   m_axi_GAMMA_ARVALID;
input   m_axi_GAMMA_ARREADY;
output  [C_M_AXI_GAMMA_ADDR_WIDTH - 1:0] m_axi_GAMMA_ARADDR;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_ARID;
output  [7:0] m_axi_GAMMA_ARLEN;
output  [2:0] m_axi_GAMMA_ARSIZE;
output  [1:0] m_axi_GAMMA_ARBURST;
output  [1:0] m_axi_GAMMA_ARLOCK;
output  [3:0] m_axi_GAMMA_ARCACHE;
output  [2:0] m_axi_GAMMA_ARPROT;
output  [3:0] m_axi_GAMMA_ARQOS;
output  [3:0] m_axi_GAMMA_ARREGION;
output  [C_M_AXI_GAMMA_ARUSER_WIDTH - 1:0] m_axi_GAMMA_ARUSER;
input   m_axi_GAMMA_RVALID;
output   m_axi_GAMMA_RREADY;
input  [C_M_AXI_GAMMA_DATA_WIDTH - 1:0] m_axi_GAMMA_RDATA;
input   m_axi_GAMMA_RLAST;
input  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_RID;
input  [C_M_AXI_GAMMA_RUSER_WIDTH - 1:0] m_axi_GAMMA_RUSER;
input  [1:0] m_axi_GAMMA_RRESP;
input   m_axi_GAMMA_BVALID;
output   m_axi_GAMMA_BREADY;
input  [1:0] m_axi_GAMMA_BRESP;
input  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_BID;
input  [C_M_AXI_GAMMA_BUSER_WIDTH - 1:0] m_axi_GAMMA_BUSER;
output   m_axi_M_M_AWVALID;
input   m_axi_M_M_AWREADY;
output  [C_M_AXI_M_M_ADDR_WIDTH - 1:0] m_axi_M_M_AWADDR;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_AWID;
output  [7:0] m_axi_M_M_AWLEN;
output  [2:0] m_axi_M_M_AWSIZE;
output  [1:0] m_axi_M_M_AWBURST;
output  [1:0] m_axi_M_M_AWLOCK;
output  [3:0] m_axi_M_M_AWCACHE;
output  [2:0] m_axi_M_M_AWPROT;
output  [3:0] m_axi_M_M_AWQOS;
output  [3:0] m_axi_M_M_AWREGION;
output  [C_M_AXI_M_M_AWUSER_WIDTH - 1:0] m_axi_M_M_AWUSER;
output   m_axi_M_M_WVALID;
input   m_axi_M_M_WREADY;
output  [C_M_AXI_M_M_DATA_WIDTH - 1:0] m_axi_M_M_WDATA;
output  [C_M_AXI_M_M_WSTRB_WIDTH - 1:0] m_axi_M_M_WSTRB;
output   m_axi_M_M_WLAST;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_WID;
output  [C_M_AXI_M_M_WUSER_WIDTH - 1:0] m_axi_M_M_WUSER;
output   m_axi_M_M_ARVALID;
input   m_axi_M_M_ARREADY;
output  [C_M_AXI_M_M_ADDR_WIDTH - 1:0] m_axi_M_M_ARADDR;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_ARID;
output  [7:0] m_axi_M_M_ARLEN;
output  [2:0] m_axi_M_M_ARSIZE;
output  [1:0] m_axi_M_M_ARBURST;
output  [1:0] m_axi_M_M_ARLOCK;
output  [3:0] m_axi_M_M_ARCACHE;
output  [2:0] m_axi_M_M_ARPROT;
output  [3:0] m_axi_M_M_ARQOS;
output  [3:0] m_axi_M_M_ARREGION;
output  [C_M_AXI_M_M_ARUSER_WIDTH - 1:0] m_axi_M_M_ARUSER;
input   m_axi_M_M_RVALID;
output   m_axi_M_M_RREADY;
input  [C_M_AXI_M_M_DATA_WIDTH - 1:0] m_axi_M_M_RDATA;
input   m_axi_M_M_RLAST;
input  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_RID;
input  [C_M_AXI_M_M_RUSER_WIDTH - 1:0] m_axi_M_M_RUSER;
input  [1:0] m_axi_M_M_RRESP;
input   m_axi_M_M_BVALID;
output   m_axi_M_M_BREADY;
input  [1:0] m_axi_M_M_BRESP;
input  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_BID;
input  [C_M_AXI_M_M_BUSER_WIDTH - 1:0] m_axi_M_M_BUSER;
output   m_axi_M_V_AWVALID;
input   m_axi_M_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_M_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_AWID;
output  [7:0] m_axi_M_V_AWLEN;
output  [2:0] m_axi_M_V_AWSIZE;
output  [1:0] m_axi_M_V_AWBURST;
output  [1:0] m_axi_M_V_AWLOCK;
output  [3:0] m_axi_M_V_AWCACHE;
output  [2:0] m_axi_M_V_AWPROT;
output  [3:0] m_axi_M_V_AWQOS;
output  [3:0] m_axi_M_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_M_V_AWUSER;
output   m_axi_M_V_WVALID;
input   m_axi_M_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_M_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_M_V_WSTRB;
output   m_axi_M_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_M_V_WUSER;
output   m_axi_M_V_ARVALID;
input   m_axi_M_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_M_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_ARID;
output  [7:0] m_axi_M_V_ARLEN;
output  [2:0] m_axi_M_V_ARSIZE;
output  [1:0] m_axi_M_V_ARBURST;
output  [1:0] m_axi_M_V_ARLOCK;
output  [3:0] m_axi_M_V_ARCACHE;
output  [2:0] m_axi_M_V_ARPROT;
output  [3:0] m_axi_M_V_ARQOS;
output  [3:0] m_axi_M_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_M_V_ARUSER;
input   m_axi_M_V_RVALID;
output   m_axi_M_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_M_V_RDATA;
input   m_axi_M_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_M_V_RUSER;
input  [1:0] m_axi_M_V_RRESP;
input   m_axi_M_V_BVALID;
output   m_axi_M_V_BREADY;
input  [1:0] m_axi_M_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_M_V_BUSER;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_V;
wire   [31:0] beta_V;
wire   [31:0] gamma_V;
wire   [31:0] moving_mean_V;
wire   [31:0] moving_variance_V;
wire   [31:0] out_V;
reg    IN_r_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] tmp_37_reg_3117;
reg    IN_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_37_reg_3117_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] tmp_37_reg_3117_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
reg    BETA_blk_n_AR;
reg    BETA_blk_n_R;
reg    GAMMA_blk_n_AR;
reg    GAMMA_blk_n_R;
reg    M_M_blk_n_AR;
reg    M_M_blk_n_R;
reg    M_V_blk_n_AR;
reg    M_V_blk_n_R;
reg    OUT_r_blk_n_AW;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] tmp_37_reg_3117_pp0_iter5_reg;
reg    OUT_r_blk_n_W;
reg    OUT_r_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] tmp_37_reg_3117_pp0_iter6_reg;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] tmp_37_reg_3117_pp0_iter7_reg;
wire    IN_r_AWREADY;
wire    IN_r_WREADY;
reg    IN_r_ARVALID;
wire    IN_r_ARREADY;
reg   [31:0] IN_r_ARADDR;
wire    IN_r_RVALID;
reg    IN_r_RREADY;
wire   [63:0] IN_r_RDATA;
wire    IN_r_RLAST;
wire   [0:0] IN_r_RID;
wire   [0:0] IN_r_RUSER;
wire   [1:0] IN_r_RRESP;
wire    IN_r_BVALID;
wire   [1:0] IN_r_BRESP;
wire   [0:0] IN_r_BID;
wire   [0:0] IN_r_BUSER;
wire    BETA_AWREADY;
wire    BETA_WREADY;
reg    BETA_ARVALID;
wire    BETA_ARREADY;
reg   [31:0] BETA_ARADDR;
wire    BETA_RVALID;
reg    BETA_RREADY;
wire   [63:0] BETA_RDATA;
wire    BETA_RLAST;
wire   [0:0] BETA_RID;
wire   [0:0] BETA_RUSER;
wire   [1:0] BETA_RRESP;
wire    BETA_BVALID;
wire   [1:0] BETA_BRESP;
wire   [0:0] BETA_BID;
wire   [0:0] BETA_BUSER;
wire    GAMMA_AWREADY;
wire    GAMMA_WREADY;
reg    GAMMA_ARVALID;
wire    GAMMA_ARREADY;
reg   [31:0] GAMMA_ARADDR;
wire    GAMMA_RVALID;
reg    GAMMA_RREADY;
wire   [63:0] GAMMA_RDATA;
wire    GAMMA_RLAST;
wire   [0:0] GAMMA_RID;
wire   [0:0] GAMMA_RUSER;
wire   [1:0] GAMMA_RRESP;
wire    GAMMA_BVALID;
wire   [1:0] GAMMA_BRESP;
wire   [0:0] GAMMA_BID;
wire   [0:0] GAMMA_BUSER;
wire    M_M_AWREADY;
wire    M_M_WREADY;
reg    M_M_ARVALID;
wire    M_M_ARREADY;
reg   [31:0] M_M_ARADDR;
wire    M_M_RVALID;
reg    M_M_RREADY;
wire   [63:0] M_M_RDATA;
wire    M_M_RLAST;
wire   [0:0] M_M_RID;
wire   [0:0] M_M_RUSER;
wire   [1:0] M_M_RRESP;
wire    M_M_BVALID;
wire   [1:0] M_M_BRESP;
wire   [0:0] M_M_BID;
wire   [0:0] M_M_BUSER;
wire    M_V_AWREADY;
wire    M_V_WREADY;
reg    M_V_ARVALID;
wire    M_V_ARREADY;
reg   [31:0] M_V_ARADDR;
wire    M_V_RVALID;
reg    M_V_RREADY;
wire   [63:0] M_V_RDATA;
wire    M_V_RLAST;
wire   [0:0] M_V_RID;
wire   [0:0] M_V_RUSER;
wire   [1:0] M_V_RRESP;
wire    M_V_BVALID;
wire   [1:0] M_V_BRESP;
wire   [0:0] M_V_BID;
wire   [0:0] M_V_BUSER;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
reg   [31:0] OUT_r_AWADDR;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
reg   [63:0] OUT_r_WDATA;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [63:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
reg   [5:0] i_0_reg_544;
wire   [12:0] grp_sqrt_fixed_16_6_s_fu_556_ap_return;
reg   [12:0] reg_561;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
wire    ap_block_state8_pp0_stage2_iter1;
reg    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_state16_pp0_stage2_iter3;
wire    ap_block_state20_pp0_stage2_iter4;
wire    ap_block_state24_pp0_stage2_iter5;
reg    ap_block_state24_io;
wire    ap_block_state28_pp0_stage2_iter6;
reg    ap_block_state28_io;
reg    ap_block_state32_pp0_stage2_iter7;
reg    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_37_reg_3117_pp0_iter4_reg;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
wire    ap_block_state9_pp0_stage3_iter1;
reg    ap_block_state13_pp0_stage3_iter2;
wire    ap_block_state17_pp0_stage3_iter3;
wire    ap_block_state21_pp0_stage3_iter4;
wire    ap_block_state25_pp0_stage3_iter5;
reg    ap_block_state25_io;
wire    ap_block_state29_pp0_stage3_iter6;
reg    ap_block_state33_pp0_stage3_iter7;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state6_io;
reg    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state14_pp0_stage0_iter3;
wire    ap_block_state18_pp0_stage0_iter4;
wire    ap_block_state22_pp0_stage0_iter5;
wire    ap_block_state26_pp0_stage0_iter6;
reg    ap_block_state26_io;
reg    ap_block_state30_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
wire    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_state15_pp0_stage1_iter3;
wire    ap_block_state19_pp0_stage1_iter4;
wire    ap_block_state23_pp0_stage1_iter5;
wire    ap_block_state27_pp0_stage1_iter6;
reg    ap_block_state27_io;
reg    ap_block_state31_pp0_stage1_iter7;
reg    ap_block_pp0_stage1_11001;
wire   [29:0] p_cast35_fu_575_p1;
reg   [29:0] p_cast35_reg_3069;
wire   [29:0] p_cast34_fu_589_p1;
reg   [29:0] p_cast34_reg_3077;
wire   [29:0] p_cast33_fu_603_p1;
reg   [29:0] p_cast33_reg_3085;
wire   [29:0] p_cast32_fu_617_p1;
reg   [29:0] p_cast32_reg_3093;
wire   [29:0] p_cast31_fu_631_p1;
reg   [29:0] p_cast31_reg_3101;
wire   [29:0] p_cast_fu_645_p1;
reg   [29:0] p_cast_reg_3109;
wire   [0:0] tmp_37_fu_649_p3;
reg   [0:0] tmp_37_reg_3117_pp0_iter3_reg;
wire   [29:0] zext_ln321_fu_657_p1;
reg   [29:0] zext_ln321_reg_3121;
wire   [29:0] add_ln321_fu_661_p2;
reg   [29:0] add_ln321_reg_3126;
wire   [29:0] add_ln321_1_fu_666_p2;
reg   [29:0] add_ln321_1_reg_3131;
wire   [29:0] add_ln321_2_fu_671_p2;
reg   [29:0] add_ln321_2_reg_3136;
wire   [29:0] add_ln321_3_fu_676_p2;
reg   [29:0] add_ln321_3_reg_3141;
wire   [29:0] add_ln321_4_fu_681_p2;
reg   [29:0] add_ln321_4_reg_3146;
wire   [4:0] trunc_ln321_fu_686_p1;
reg   [4:0] trunc_ln321_reg_3151;
wire   [29:0] zext_ln321_6_fu_746_p1;
reg   [29:0] zext_ln321_6_reg_3187;
wire   [29:0] add_ln321_5_fu_750_p2;
reg   [29:0] add_ln321_5_reg_3192;
wire   [29:0] add_ln321_6_fu_755_p2;
reg   [29:0] add_ln321_6_reg_3197;
wire   [29:0] add_ln321_7_fu_760_p2;
reg   [29:0] add_ln321_7_reg_3202;
wire   [29:0] add_ln321_8_fu_765_p2;
reg   [29:0] add_ln321_8_reg_3207;
wire   [29:0] add_ln321_9_fu_770_p2;
reg   [29:0] add_ln321_9_reg_3212;
wire   [29:0] zext_ln321_12_fu_830_p1;
reg   [29:0] zext_ln321_12_reg_3247;
wire   [29:0] add_ln321_10_fu_834_p2;
reg   [29:0] add_ln321_10_reg_3252;
wire   [29:0] add_ln321_11_fu_839_p2;
reg   [29:0] add_ln321_11_reg_3257;
wire   [29:0] add_ln321_12_fu_844_p2;
reg   [29:0] add_ln321_12_reg_3262;
wire   [29:0] add_ln321_13_fu_849_p2;
reg   [29:0] add_ln321_13_reg_3267;
wire   [29:0] add_ln321_14_fu_854_p2;
reg   [29:0] add_ln321_14_reg_3272;
wire   [29:0] add_ln321_15_fu_918_p2;
reg   [29:0] add_ln321_15_reg_3307;
wire   [29:0] add_ln321_16_fu_923_p2;
reg   [29:0] add_ln321_16_reg_3312;
wire   [29:0] add_ln321_17_fu_928_p2;
reg   [29:0] add_ln321_17_reg_3317;
wire   [29:0] add_ln321_18_fu_933_p2;
reg   [29:0] add_ln321_18_reg_3322;
wire   [29:0] add_ln321_19_fu_938_p2;
reg   [29:0] add_ln321_19_reg_3327;
wire   [29:0] add_ln321_20_fu_943_p2;
reg   [29:0] add_ln321_20_reg_3332;
reg   [29:0] add_ln321_20_reg_3332_pp0_iter1_reg;
reg   [29:0] add_ln321_20_reg_3332_pp0_iter2_reg;
reg   [29:0] add_ln321_20_reg_3332_pp0_iter3_reg;
reg   [29:0] add_ln321_20_reg_3332_pp0_iter4_reg;
wire   [29:0] add_ln321_21_fu_947_p2;
reg   [29:0] add_ln321_21_reg_3337;
reg   [29:0] add_ln321_21_reg_3337_pp0_iter1_reg;
reg   [29:0] add_ln321_21_reg_3337_pp0_iter2_reg;
reg   [29:0] add_ln321_21_reg_3337_pp0_iter3_reg;
reg   [29:0] add_ln321_21_reg_3337_pp0_iter4_reg;
wire   [29:0] add_ln321_22_fu_951_p2;
reg   [29:0] add_ln321_22_reg_3342;
reg   [29:0] add_ln321_22_reg_3342_pp0_iter1_reg;
reg   [29:0] add_ln321_22_reg_3342_pp0_iter2_reg;
reg   [29:0] add_ln321_22_reg_3342_pp0_iter3_reg;
reg   [29:0] add_ln321_22_reg_3342_pp0_iter4_reg;
reg   [29:0] add_ln321_22_reg_3342_pp0_iter5_reg;
wire   [29:0] add_ln321_23_fu_955_p2;
reg   [29:0] add_ln321_23_reg_3347;
reg   [29:0] add_ln321_23_reg_3347_pp0_iter1_reg;
reg   [29:0] add_ln321_23_reg_3347_pp0_iter2_reg;
reg   [29:0] add_ln321_23_reg_3347_pp0_iter3_reg;
reg   [29:0] add_ln321_23_reg_3347_pp0_iter4_reg;
reg   [29:0] add_ln321_23_reg_3347_pp0_iter5_reg;
wire   [5:0] i_fu_960_p2;
reg   [5:0] i_reg_3352;
wire   [15:0] trunc_ln339_fu_1016_p1;
reg   [15:0] trunc_ln339_reg_3387;
wire   [15:0] trunc_ln339_1_fu_1020_p1;
reg   [15:0] trunc_ln339_1_reg_3392;
wire  signed [15:0] trunc_ln339_2_fu_1024_p1;
reg  signed [15:0] trunc_ln339_2_reg_3397;
wire   [15:0] trunc_ln1118_fu_1028_p1;
reg   [15:0] trunc_ln1118_reg_3403;
reg   [15:0] trunc_ln1118_reg_3403_pp0_iter3_reg;
reg  signed [15:0] trunc_ln1118_reg_3403_pp0_iter4_reg;
wire   [15:0] trunc_ln728_fu_1032_p1;
reg   [15:0] trunc_ln728_reg_3408;
reg   [15:0] trunc_ln728_reg_3408_pp0_iter3_reg;
reg   [15:0] trunc_ln728_reg_3408_pp0_iter4_reg;
reg   [15:0] trunc_ln728_reg_3408_pp0_iter5_reg;
wire   [15:0] in_m_1_V_fu_1036_p1;
reg   [15:0] in_m_1_V_reg_3413;
wire   [15:0] moving_mean_m_1_V_fu_1040_p1;
reg   [15:0] moving_mean_m_1_V_reg_3418;
wire  signed [15:0] moving_variance_m_1_fu_1044_p1;
reg  signed [15:0] moving_variance_m_1_reg_3423;
wire   [15:0] x_V_fu_1124_p3;
reg   [15:0] x_V_reg_3429;
wire   [15:0] select_ln340_3_fu_1210_p3;
reg   [15:0] select_ln340_3_reg_3434;
reg   [15:0] select_ln340_3_reg_3434_pp0_iter3_reg;
reg   [15:0] select_ln340_3_reg_3434_pp0_iter4_reg;
wire   [15:0] trunc_ln1118_1_fu_1218_p1;
reg   [15:0] trunc_ln1118_1_reg_3439;
reg   [15:0] trunc_ln1118_1_reg_3439_pp0_iter3_reg;
reg  signed [15:0] trunc_ln1118_1_reg_3439_pp0_iter4_reg;
wire   [15:0] trunc_ln728_1_fu_1222_p1;
reg   [15:0] trunc_ln728_1_reg_3444;
reg   [15:0] trunc_ln728_1_reg_3444_pp0_iter3_reg;
reg   [15:0] trunc_ln728_1_reg_3444_pp0_iter4_reg;
reg   [15:0] trunc_ln728_1_reg_3444_pp0_iter5_reg;
wire   [15:0] in_m_2_V_fu_1226_p1;
reg   [15:0] in_m_2_V_reg_3449;
wire   [15:0] moving_mean_m_2_V_fu_1230_p1;
reg   [15:0] moving_mean_m_2_V_reg_3454;
wire  signed [15:0] moving_variance_m_2_fu_1234_p1;
reg  signed [15:0] moving_variance_m_2_reg_3459;
wire   [15:0] x_V_1_fu_1314_p3;
reg   [15:0] x_V_1_reg_3465;
wire   [15:0] select_ln340_14_fu_1400_p3;
reg   [15:0] select_ln340_14_reg_3470;
reg   [15:0] select_ln340_14_reg_3470_pp0_iter3_reg;
reg   [15:0] select_ln340_14_reg_3470_pp0_iter4_reg;
wire   [15:0] trunc_ln1118_2_fu_1408_p1;
reg   [15:0] trunc_ln1118_2_reg_3475;
reg   [15:0] trunc_ln1118_2_reg_3475_pp0_iter3_reg;
reg  signed [15:0] trunc_ln1118_2_reg_3475_pp0_iter4_reg;
wire   [15:0] trunc_ln728_2_fu_1412_p1;
reg   [15:0] trunc_ln728_2_reg_3480;
reg   [15:0] trunc_ln728_2_reg_3480_pp0_iter3_reg;
reg   [15:0] trunc_ln728_2_reg_3480_pp0_iter4_reg;
reg   [15:0] trunc_ln728_2_reg_3480_pp0_iter5_reg;
wire   [15:0] in_m_3_V_fu_1416_p1;
reg   [15:0] in_m_3_V_reg_3485;
wire   [15:0] moving_mean_m_3_V_fu_1420_p1;
reg   [15:0] moving_mean_m_3_V_reg_3490;
wire  signed [15:0] moving_variance_m_3_fu_1424_p1;
reg  signed [15:0] moving_variance_m_3_reg_3495;
wire   [15:0] x_V_2_fu_1504_p3;
reg   [15:0] x_V_2_reg_3501;
wire   [15:0] select_ln340_18_fu_1590_p3;
reg   [15:0] select_ln340_18_reg_3506;
reg   [15:0] select_ln340_18_reg_3506_pp0_iter3_reg;
reg   [15:0] select_ln340_18_reg_3506_pp0_iter4_reg;
wire   [15:0] trunc_ln1118_3_fu_1598_p1;
reg   [15:0] trunc_ln1118_3_reg_3511;
reg   [15:0] trunc_ln1118_3_reg_3511_pp0_iter3_reg;
reg  signed [15:0] trunc_ln1118_3_reg_3511_pp0_iter4_reg;
wire   [15:0] trunc_ln728_3_fu_1602_p1;
reg   [15:0] trunc_ln728_3_reg_3516;
reg   [15:0] trunc_ln728_3_reg_3516_pp0_iter3_reg;
reg   [15:0] trunc_ln728_3_reg_3516_pp0_iter4_reg;
reg   [15:0] trunc_ln728_3_reg_3516_pp0_iter5_reg;
wire   [15:0] x_V_3_fu_1682_p3;
reg   [15:0] x_V_3_reg_3521;
wire   [15:0] select_ln340_22_fu_1768_p3;
reg   [15:0] select_ln340_22_reg_3526;
reg   [15:0] select_ln340_22_reg_3526_pp0_iter4_reg;
reg   [15:0] select_ln340_22_reg_3526_pp0_iter5_reg;
wire  signed [28:0] mul_ln1118_fu_3021_p2;
reg  signed [28:0] mul_ln1118_reg_3531;
wire  signed [44:0] mul_ln1118_1_fu_1789_p2;
reg  signed [44:0] mul_ln1118_1_reg_3536;
wire   [36:0] trunc_ln1192_fu_1795_p1;
reg   [36:0] trunc_ln1192_reg_3541;
reg   [0:0] tmp_44_reg_3546;
wire  signed [28:0] mul_ln1118_2_fu_3027_p2;
reg  signed [28:0] mul_ln1118_2_reg_3551;
reg   [0:0] tmp_42_reg_3556;
wire   [15:0] add_ln415_fu_1872_p2;
reg   [15:0] add_ln415_reg_3562;
wire   [0:0] and_ln416_fu_1892_p2;
reg   [0:0] and_ln416_reg_3568;
wire   [0:0] tmp_46_fu_1898_p3;
reg   [0:0] tmp_46_reg_3574;
wire   [0:0] icmp_ln879_1_fu_1932_p2;
reg   [0:0] icmp_ln879_1_reg_3579;
wire   [0:0] icmp_ln768_fu_1938_p2;
reg   [0:0] icmp_ln768_reg_3585;
wire   [0:0] and_ln786_5_fu_1972_p2;
reg   [0:0] and_ln786_5_reg_3590;
wire  signed [44:0] mul_ln1118_3_fu_1984_p2;
reg  signed [44:0] mul_ln1118_3_reg_3596;
wire   [36:0] trunc_ln1192_1_fu_1990_p1;
reg   [36:0] trunc_ln1192_1_reg_3601;
reg   [0:0] tmp_54_reg_3606;
wire  signed [28:0] mul_ln1118_4_fu_3033_p2;
reg  signed [28:0] mul_ln1118_4_reg_3611;
wire   [15:0] result_0_V_fu_2087_p3;
reg   [15:0] result_0_V_reg_3616;
reg   [0:0] tmp_52_reg_3621;
wire   [15:0] add_ln415_1_fu_2153_p2;
reg   [15:0] add_ln415_1_reg_3627;
wire   [0:0] and_ln416_1_fu_2173_p2;
reg   [0:0] and_ln416_1_reg_3633;
wire   [0:0] tmp_56_fu_2179_p3;
reg   [0:0] tmp_56_reg_3639;
wire   [0:0] icmp_ln879_3_fu_2213_p2;
reg   [0:0] icmp_ln879_3_reg_3644;
wire   [0:0] icmp_ln768_1_fu_2219_p2;
reg   [0:0] icmp_ln768_1_reg_3650;
wire   [0:0] and_ln786_1_fu_2253_p2;
reg   [0:0] and_ln786_1_reg_3655;
wire  signed [44:0] mul_ln1118_5_fu_2265_p2;
reg  signed [44:0] mul_ln1118_5_reg_3661;
wire   [36:0] trunc_ln1192_2_fu_2271_p1;
reg   [36:0] trunc_ln1192_2_reg_3666;
reg   [0:0] tmp_64_reg_3671;
wire  signed [28:0] mul_ln1118_6_fu_3039_p2;
reg  signed [28:0] mul_ln1118_6_reg_3676;
wire   [15:0] result_1_V_fu_2381_p3;
reg   [15:0] result_1_V_reg_3687;
reg   [0:0] tmp_62_reg_3692;
wire   [15:0] add_ln415_2_fu_2447_p2;
reg   [15:0] add_ln415_2_reg_3698;
wire   [0:0] and_ln416_2_fu_2467_p2;
reg   [0:0] and_ln416_2_reg_3704;
wire   [0:0] tmp_66_fu_2473_p3;
reg   [0:0] tmp_66_reg_3710;
wire   [0:0] icmp_ln879_5_fu_2507_p2;
reg   [0:0] icmp_ln879_5_reg_3715;
wire   [0:0] icmp_ln768_2_fu_2513_p2;
reg   [0:0] icmp_ln768_2_reg_3721;
wire   [0:0] and_ln786_2_fu_2547_p2;
reg   [0:0] and_ln786_2_reg_3726;
wire  signed [44:0] mul_ln1118_7_fu_2559_p2;
reg  signed [44:0] mul_ln1118_7_reg_3732;
wire   [36:0] trunc_ln1192_3_fu_2565_p1;
reg   [36:0] trunc_ln1192_3_reg_3737;
reg   [0:0] tmp_74_reg_3742;
wire   [15:0] result_2_V_fu_2685_p3;
reg   [15:0] result_2_V_reg_3753;
wire   [0:0] tmp_72_fu_2722_p3;
reg   [0:0] tmp_72_reg_3758;
wire   [15:0] add_ln415_3_fu_2751_p2;
reg   [15:0] add_ln415_3_reg_3763;
wire   [0:0] and_ln416_3_fu_2771_p2;
reg   [0:0] and_ln416_3_reg_3769;
wire   [0:0] tmp_76_fu_2777_p3;
reg   [0:0] tmp_76_reg_3774;
wire   [0:0] icmp_ln879_7_fu_2811_p2;
reg   [0:0] icmp_ln879_7_reg_3779;
wire   [0:0] icmp_ln768_3_fu_2817_p2;
reg   [0:0] icmp_ln768_3_reg_3784;
wire   [0:0] and_ln781_3_fu_2851_p2;
reg   [0:0] and_ln781_3_reg_3789;
wire   [0:0] and_ln786_3_fu_2857_p2;
reg   [0:0] and_ln786_3_reg_3794;
wire   [0:0] and_ln786_15_fu_2875_p2;
reg   [0:0] and_ln786_15_reg_3799;
wire   [15:0] select_ln340_23_fu_2966_p3;
reg   [15:0] select_ln340_23_reg_3811;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage3_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [15:0] grp_sqrt_fixed_16_6_s_fu_556_x_V;
reg    grp_sqrt_fixed_16_6_s_fu_556_ap_ce;
wire    ap_block_state4_pp0_stage2_iter0_ignore_call150;
wire    ap_block_state8_pp0_stage2_iter1_ignore_call150;
reg    ap_block_state12_pp0_stage2_iter2_ignore_call150;
wire    ap_block_state16_pp0_stage2_iter3_ignore_call150;
wire    ap_block_state20_pp0_stage2_iter4_ignore_call150;
wire    ap_block_state24_pp0_stage2_iter5_ignore_call150;
wire    ap_block_state28_pp0_stage2_iter6_ignore_call150;
reg    ap_block_state32_pp0_stage2_iter7_ignore_call150;
reg    ap_block_pp0_stage2_11001_ignoreCallOp350;
wire    ap_block_state5_pp0_stage3_iter0_ignore_call150;
wire    ap_block_state9_pp0_stage3_iter1_ignore_call150;
reg    ap_block_state13_pp0_stage3_iter2_ignore_call150;
wire    ap_block_state17_pp0_stage3_iter3_ignore_call150;
wire    ap_block_state21_pp0_stage3_iter4_ignore_call150;
wire    ap_block_state25_pp0_stage3_iter5_ignore_call150;
wire    ap_block_state29_pp0_stage3_iter6_ignore_call150;
reg    ap_block_state33_pp0_stage3_iter7_ignore_call150;
reg    ap_block_pp0_stage3_11001_ignoreCallOp388;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call150;
wire    ap_block_state6_pp0_stage0_iter1_ignore_call150;
reg    ap_block_state10_pp0_stage0_iter2_ignore_call150;
wire    ap_block_state14_pp0_stage0_iter3_ignore_call150;
wire    ap_block_state18_pp0_stage0_iter4_ignore_call150;
wire    ap_block_state22_pp0_stage0_iter5_ignore_call150;
wire    ap_block_state26_pp0_stage0_iter6_ignore_call150;
reg    ap_block_state30_pp0_stage0_iter7_ignore_call150;
reg    ap_block_pp0_stage0_11001_ignoreCallOp419;
wire    ap_block_state3_pp0_stage1_iter0_ignore_call150;
wire    ap_block_state7_pp0_stage1_iter1_ignore_call150;
reg    ap_block_state11_pp0_stage1_iter2_ignore_call150;
wire    ap_block_state15_pp0_stage1_iter3_ignore_call150;
wire    ap_block_state19_pp0_stage1_iter4_ignore_call150;
wire    ap_block_state23_pp0_stage1_iter5_ignore_call150;
wire    ap_block_state27_pp0_stage1_iter6_ignore_call150;
reg    ap_block_state31_pp0_stage1_iter7_ignore_call150;
reg    ap_block_pp0_stage1_11001_ignoreCallOp449;
reg   [5:0] ap_phi_mux_i_0_phi_fu_548_p4;
wire   [63:0] zext_ln321_1_fu_690_p1;
wire   [63:0] zext_ln321_2_fu_700_p1;
wire   [63:0] zext_ln321_3_fu_710_p1;
wire   [63:0] zext_ln321_4_fu_720_p1;
wire   [63:0] zext_ln321_5_fu_730_p1;
wire   [63:0] zext_ln321_7_fu_775_p1;
wire   [63:0] zext_ln321_8_fu_785_p1;
wire   [63:0] zext_ln321_9_fu_795_p1;
wire   [63:0] zext_ln321_10_fu_805_p1;
wire   [63:0] zext_ln321_11_fu_815_p1;
wire   [63:0] zext_ln321_13_fu_859_p1;
wire   [63:0] zext_ln321_14_fu_869_p1;
wire   [63:0] zext_ln321_15_fu_879_p1;
wire   [63:0] zext_ln321_16_fu_889_p1;
wire   [63:0] zext_ln321_17_fu_899_p1;
wire   [63:0] zext_ln321_19_fu_966_p1;
wire   [63:0] zext_ln321_20_fu_976_p1;
wire   [63:0] zext_ln321_21_fu_986_p1;
wire   [63:0] zext_ln321_22_fu_996_p1;
wire   [63:0] zext_ln321_23_fu_1006_p1;
wire   [63:0] zext_ln321_24_fu_2290_p1;
wire   [63:0] zext_ln321_25_fu_2589_p1;
wire   [63:0] zext_ln321_26_fu_2893_p1;
wire   [63:0] zext_ln321_27_fu_2986_p1;
wire   [63:0] result_pack_0_V_fu_2577_p5;
reg    ap_block_pp0_stage3_01001;
wire   [63:0] result_pack_1_V_fu_2881_p5;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] result_pack_2_V_fu_2974_p5;
reg    ap_block_pp0_stage1_01001;
wire   [63:0] result_pack_3_V_fu_3004_p5;
reg    ap_block_pp0_stage2_01001;
reg   [63:0] result_pack_0_V_1_fu_188;
reg   [63:0] result_pack_1_V_1_fu_192;
reg   [63:0] result_pack_2_V_1_fu_196;
reg   [63:0] result_pack_3_V_1_fu_200;
wire   [28:0] tmp_31_fu_565_p4;
wire   [28:0] tmp_32_fu_579_p4;
wire   [28:0] tmp_33_fu_593_p4;
wire   [28:0] tmp_34_fu_607_p4;
wire   [28:0] tmp_35_fu_621_p4;
wire   [28:0] tmp_36_fu_635_p4;
wire   [4:0] or_ln91_fu_740_p2;
wire   [4:0] or_ln91_1_fu_825_p2;
wire   [4:0] or_ln91_2_fu_909_p2;
wire   [29:0] zext_ln321_18_fu_914_p1;
wire  signed [16:0] sext_ln703_fu_1048_p1;
wire   [16:0] add_ln1192_fu_1051_p2;
wire   [15:0] add_ln703_fu_1065_p2;
wire   [0:0] tmp_39_fu_1070_p3;
wire   [0:0] tmp_38_fu_1057_p3;
wire   [0:0] xor_ln786_fu_1078_p2;
wire   [0:0] xor_ln340_fu_1096_p2;
wire   [0:0] xor_ln340_4_fu_1090_p2;
wire   [0:0] and_ln786_fu_1084_p2;
wire   [0:0] or_ln340_fu_1102_p2;
wire   [15:0] select_ln340_fu_1108_p3;
wire   [15:0] select_ln388_fu_1116_p3;
wire  signed [16:0] sext_ln703_1_fu_1132_p1;
wire  signed [16:0] sext_ln703_2_fu_1135_p1;
wire   [16:0] sub_ln1193_fu_1138_p2;
wire   [0:0] tmp_41_fu_1156_p3;
wire   [0:0] tmp_40_fu_1144_p3;
wire   [0:0] xor_ln786_1_fu_1164_p2;
wire   [0:0] xor_ln340_1_fu_1182_p2;
wire   [0:0] xor_ln340_7_fu_1176_p2;
wire   [15:0] trunc_ln703_fu_1152_p1;
wire   [0:0] and_ln786_4_fu_1170_p2;
wire   [0:0] or_ln340_1_fu_1188_p2;
wire   [15:0] select_ln340_2_fu_1194_p3;
wire   [15:0] select_ln388_1_fu_1202_p3;
wire  signed [16:0] sext_ln703_3_fu_1238_p1;
wire   [16:0] add_ln1192_2_fu_1241_p2;
wire   [15:0] add_ln703_18_fu_1255_p2;
wire   [0:0] tmp_49_fu_1260_p3;
wire   [0:0] tmp_48_fu_1247_p3;
wire   [0:0] xor_ln786_4_fu_1268_p2;
wire   [0:0] xor_ln340_5_fu_1286_p2;
wire   [0:0] xor_ln340_9_fu_1280_p2;
wire   [0:0] and_ln786_7_fu_1274_p2;
wire   [0:0] or_ln340_5_fu_1292_p2;
wire   [15:0] select_ln340_5_fu_1298_p3;
wire   [15:0] select_ln388_3_fu_1306_p3;
wire  signed [16:0] sext_ln703_4_fu_1322_p1;
wire  signed [16:0] sext_ln703_5_fu_1325_p1;
wire   [16:0] sub_ln1193_1_fu_1328_p2;
wire   [0:0] tmp_51_fu_1346_p3;
wire   [0:0] tmp_50_fu_1334_p3;
wire   [0:0] xor_ln786_5_fu_1354_p2;
wire   [0:0] xor_ln340_6_fu_1372_p2;
wire   [0:0] xor_ln340_11_fu_1366_p2;
wire   [15:0] trunc_ln703_1_fu_1342_p1;
wire   [0:0] and_ln786_8_fu_1360_p2;
wire   [0:0] or_ln340_6_fu_1378_p2;
wire   [15:0] select_ln340_13_fu_1384_p3;
wire   [15:0] select_ln388_4_fu_1392_p3;
wire  signed [16:0] sext_ln703_6_fu_1428_p1;
wire   [16:0] add_ln1192_4_fu_1431_p2;
wire   [15:0] add_ln703_19_fu_1445_p2;
wire   [0:0] tmp_59_fu_1450_p3;
wire   [0:0] tmp_58_fu_1437_p3;
wire   [0:0] xor_ln786_7_fu_1458_p2;
wire   [0:0] xor_ln340_8_fu_1476_p2;
wire   [0:0] xor_ln340_12_fu_1470_p2;
wire   [0:0] and_ln786_10_fu_1464_p2;
wire   [0:0] or_ln340_10_fu_1482_p2;
wire   [15:0] select_ln340_8_fu_1488_p3;
wire   [15:0] select_ln388_6_fu_1496_p3;
wire  signed [16:0] sext_ln703_7_fu_1512_p1;
wire  signed [16:0] sext_ln703_8_fu_1515_p1;
wire   [16:0] sub_ln1193_2_fu_1518_p2;
wire   [0:0] tmp_61_fu_1536_p3;
wire   [0:0] tmp_60_fu_1524_p3;
wire   [0:0] xor_ln786_8_fu_1544_p2;
wire   [0:0] xor_ln340_2_fu_1562_p2;
wire   [0:0] xor_ln340_13_fu_1556_p2;
wire   [15:0] trunc_ln703_2_fu_1532_p1;
wire   [0:0] and_ln786_11_fu_1550_p2;
wire   [0:0] or_ln340_11_fu_1568_p2;
wire   [15:0] select_ln340_17_fu_1574_p3;
wire   [15:0] select_ln388_7_fu_1582_p3;
wire  signed [16:0] sext_ln703_9_fu_1606_p1;
wire   [16:0] add_ln1192_6_fu_1609_p2;
wire   [15:0] add_ln703_20_fu_1623_p2;
wire   [0:0] tmp_69_fu_1628_p3;
wire   [0:0] tmp_68_fu_1615_p3;
wire   [0:0] xor_ln786_3_fu_1636_p2;
wire   [0:0] xor_ln340_10_fu_1654_p2;
wire   [0:0] xor_ln340_14_fu_1648_p2;
wire   [0:0] and_ln786_13_fu_1642_p2;
wire   [0:0] or_ln340_15_fu_1660_p2;
wire   [15:0] select_ln340_10_fu_1666_p3;
wire   [15:0] select_ln388_9_fu_1674_p3;
wire  signed [16:0] sext_ln703_10_fu_1690_p1;
wire  signed [16:0] sext_ln703_11_fu_1693_p1;
wire   [16:0] sub_ln1193_3_fu_1696_p2;
wire   [0:0] tmp_71_fu_1714_p3;
wire   [0:0] tmp_70_fu_1702_p3;
wire   [0:0] xor_ln786_10_fu_1722_p2;
wire   [0:0] xor_ln340_3_fu_1740_p2;
wire   [0:0] xor_ln340_15_fu_1734_p2;
wire   [15:0] trunc_ln703_3_fu_1710_p1;
wire   [0:0] and_ln786_14_fu_1728_p2;
wire   [0:0] or_ln340_16_fu_1746_p2;
wire   [15:0] select_ln340_21_fu_1752_p3;
wire   [15:0] select_ln388_10_fu_1760_p3;
wire  signed [15:0] mul_ln1118_1_fu_1789_p0;
wire  signed [28:0] mul_ln1118_1_fu_1789_p1;
wire  signed [35:0] shl_ln_fu_1817_p3;
wire  signed [46:0] sext_ln727_fu_1814_p1;
wire  signed [46:0] sext_ln728_fu_1824_p1;
wire  signed [36:0] sext_ln1192_fu_1828_p1;
wire   [46:0] add_ln1192_1_fu_1832_p2;
wire   [15:0] zext_ln415_fu_1869_p1;
wire   [15:0] trunc_ln4_fu_1851_p4;
wire   [0:0] tmp_45_fu_1878_p3;
wire   [0:0] tmp_43_fu_1861_p3;
wire   [0:0] xor_ln416_fu_1886_p2;
wire   [9:0] tmp_1_fu_1906_p4;
wire   [10:0] tmp_2_fu_1922_p4;
wire   [36:0] add_ln1192_8_fu_1838_p2;
wire   [0:0] tmp_47_fu_1944_p3;
wire   [0:0] icmp_ln879_fu_1916_p2;
wire   [0:0] xor_ln779_fu_1952_p2;
wire   [0:0] and_ln779_fu_1958_p2;
wire   [0:0] select_ln416_fu_1964_p3;
wire  signed [15:0] mul_ln1118_3_fu_1984_p0;
wire  signed [28:0] mul_ln1118_3_fu_1984_p1;
wire   [0:0] select_ln777_fu_2009_p3;
wire   [0:0] xor_ln785_fu_2018_p2;
wire   [0:0] or_ln785_fu_2024_p2;
wire   [0:0] xor_ln785_1_fu_2029_p2;
wire   [0:0] and_ln781_fu_2014_p2;
wire   [0:0] or_ln786_fu_2040_p2;
wire   [0:0] xor_ln786_2_fu_2045_p2;
wire   [0:0] and_ln786_6_fu_2051_p2;
wire   [0:0] and_ln785_fu_2034_p2;
wire   [0:0] or_ln340_3_fu_2062_p2;
wire   [0:0] or_ln340_2_fu_2056_p2;
wire   [0:0] or_ln340_4_fu_2067_p2;
wire   [15:0] select_ln340_4_fu_2073_p3;
wire   [15:0] select_ln388_2_fu_2080_p3;
wire  signed [35:0] shl_ln728_1_fu_2098_p3;
wire  signed [46:0] sext_ln727_1_fu_2095_p1;
wire  signed [46:0] sext_ln728_1_fu_2105_p1;
wire  signed [36:0] sext_ln1192_1_fu_2109_p1;
wire   [46:0] add_ln1192_3_fu_2113_p2;
wire   [15:0] zext_ln415_1_fu_2150_p1;
wire   [15:0] trunc_ln708_s_fu_2132_p4;
wire   [0:0] tmp_55_fu_2159_p3;
wire   [0:0] tmp_53_fu_2142_p3;
wire   [0:0] xor_ln416_1_fu_2167_p2;
wire   [9:0] tmp_3_fu_2187_p4;
wire   [10:0] tmp_4_fu_2203_p4;
wire   [36:0] add_ln1192_9_fu_2119_p2;
wire   [0:0] tmp_57_fu_2225_p3;
wire   [0:0] icmp_ln879_2_fu_2197_p2;
wire   [0:0] xor_ln779_1_fu_2233_p2;
wire   [0:0] and_ln779_1_fu_2239_p2;
wire   [0:0] select_ln416_1_fu_2245_p3;
wire  signed [15:0] mul_ln1118_5_fu_2265_p0;
wire  signed [28:0] mul_ln1118_5_fu_2265_p1;
wire   [0:0] select_ln777_1_fu_2303_p3;
wire   [0:0] xor_ln785_2_fu_2312_p2;
wire   [0:0] or_ln785_1_fu_2318_p2;
wire   [0:0] xor_ln785_3_fu_2323_p2;
wire   [0:0] and_ln781_1_fu_2308_p2;
wire   [0:0] or_ln786_1_fu_2334_p2;
wire   [0:0] xor_ln786_6_fu_2339_p2;
wire   [0:0] and_ln786_9_fu_2345_p2;
wire   [0:0] and_ln785_1_fu_2328_p2;
wire   [0:0] or_ln340_8_fu_2356_p2;
wire   [0:0] or_ln340_7_fu_2350_p2;
wire   [0:0] or_ln340_9_fu_2361_p2;
wire   [15:0] select_ln340_7_fu_2367_p3;
wire   [15:0] select_ln388_5_fu_2374_p3;
wire  signed [35:0] shl_ln728_2_fu_2392_p3;
wire  signed [46:0] sext_ln727_2_fu_2389_p1;
wire  signed [46:0] sext_ln728_2_fu_2399_p1;
wire  signed [36:0] sext_ln1192_2_fu_2403_p1;
wire   [46:0] add_ln1192_5_fu_2407_p2;
wire   [15:0] zext_ln415_2_fu_2444_p1;
wire   [15:0] trunc_ln708_13_fu_2426_p4;
wire   [0:0] tmp_65_fu_2453_p3;
wire   [0:0] tmp_63_fu_2436_p3;
wire   [0:0] xor_ln416_2_fu_2461_p2;
wire   [9:0] tmp_5_fu_2481_p4;
wire   [10:0] tmp_6_fu_2497_p4;
wire   [36:0] add_ln1192_10_fu_2413_p2;
wire   [0:0] tmp_67_fu_2519_p3;
wire   [0:0] icmp_ln879_4_fu_2491_p2;
wire   [0:0] xor_ln779_2_fu_2527_p2;
wire   [0:0] and_ln779_2_fu_2533_p2;
wire   [0:0] select_ln416_2_fu_2539_p3;
wire  signed [15:0] mul_ln1118_7_fu_2559_p0;
wire  signed [28:0] mul_ln1118_7_fu_2559_p1;
wire   [0:0] select_ln777_2_fu_2607_p3;
wire   [0:0] xor_ln785_4_fu_2616_p2;
wire   [0:0] or_ln785_2_fu_2622_p2;
wire   [0:0] xor_ln785_5_fu_2627_p2;
wire   [0:0] and_ln781_2_fu_2612_p2;
wire   [0:0] or_ln786_2_fu_2638_p2;
wire   [0:0] xor_ln786_9_fu_2643_p2;
wire   [0:0] and_ln786_12_fu_2649_p2;
wire   [0:0] and_ln785_2_fu_2632_p2;
wire   [0:0] or_ln340_13_fu_2660_p2;
wire   [0:0] or_ln340_12_fu_2654_p2;
wire   [0:0] or_ln340_14_fu_2665_p2;
wire   [15:0] select_ln340_9_fu_2671_p3;
wire   [15:0] select_ln388_8_fu_2678_p3;
wire  signed [35:0] shl_ln728_3_fu_2696_p3;
wire  signed [46:0] sext_ln727_3_fu_2693_p1;
wire  signed [46:0] sext_ln728_3_fu_2703_p1;
wire  signed [36:0] sext_ln1192_3_fu_2707_p1;
wire   [46:0] add_ln1192_7_fu_2711_p2;
wire   [15:0] zext_ln415_3_fu_2748_p1;
wire   [15:0] trunc_ln708_14_fu_2730_p4;
wire   [0:0] tmp_75_fu_2757_p3;
wire   [0:0] tmp_73_fu_2740_p3;
wire   [0:0] xor_ln416_3_fu_2765_p2;
wire   [9:0] tmp_7_fu_2785_p4;
wire   [10:0] tmp_8_fu_2801_p4;
wire   [36:0] add_ln1192_11_fu_2717_p2;
wire   [0:0] tmp_77_fu_2823_p3;
wire   [0:0] icmp_ln879_6_fu_2795_p2;
wire   [0:0] xor_ln779_3_fu_2831_p2;
wire   [0:0] and_ln779_3_fu_2837_p2;
wire   [0:0] select_ln416_3_fu_2843_p3;
wire   [0:0] or_ln786_3_fu_2863_p2;
wire   [0:0] xor_ln786_11_fu_2869_p2;
wire   [0:0] select_ln777_3_fu_2911_p3;
wire   [0:0] xor_ln785_6_fu_2916_p2;
wire   [0:0] or_ln785_3_fu_2922_p2;
wire   [0:0] xor_ln785_7_fu_2927_p2;
wire   [0:0] and_ln785_3_fu_2932_p2;
wire   [0:0] or_ln340_18_fu_2943_p2;
wire   [0:0] or_ln340_17_fu_2938_p2;
wire   [0:0] or_ln340_19_fu_2948_p2;
wire   [15:0] select_ln340_11_fu_2953_p3;
wire   [15:0] select_ln388_11_fu_2960_p3;
wire   [12:0] mul_ln1118_fu_3021_p0;
wire   [12:0] mul_ln1118_2_fu_3027_p0;
wire   [12:0] mul_ln1118_4_fu_3033_p0;
wire   [12:0] mul_ln1118_6_fu_3039_p0;
wire    ap_CS_fsm_state34;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [28:0] mul_ln1118_2_fu_3027_p00;
wire   [28:0] mul_ln1118_4_fu_3033_p00;
wire   [28:0] mul_ln1118_6_fu_3039_p00;
wire   [28:0] mul_ln1118_fu_3021_p00;
reg    ap_condition_1619;
reg    ap_condition_1624;
reg    ap_condition_1250;
reg    ap_condition_1586;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

bn_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
bn_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_V(in_V),
    .beta_V(beta_V),
    .gamma_V(gamma_V),
    .moving_mean_V(moving_mean_V),
    .moving_variance_V(moving_variance_V),
    .out_V(out_V)
);

bn_IN_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
bn_IN_r_m_axi_U(
    .AWVALID(m_axi_IN_r_AWVALID),
    .AWREADY(m_axi_IN_r_AWREADY),
    .AWADDR(m_axi_IN_r_AWADDR),
    .AWID(m_axi_IN_r_AWID),
    .AWLEN(m_axi_IN_r_AWLEN),
    .AWSIZE(m_axi_IN_r_AWSIZE),
    .AWBURST(m_axi_IN_r_AWBURST),
    .AWLOCK(m_axi_IN_r_AWLOCK),
    .AWCACHE(m_axi_IN_r_AWCACHE),
    .AWPROT(m_axi_IN_r_AWPROT),
    .AWQOS(m_axi_IN_r_AWQOS),
    .AWREGION(m_axi_IN_r_AWREGION),
    .AWUSER(m_axi_IN_r_AWUSER),
    .WVALID(m_axi_IN_r_WVALID),
    .WREADY(m_axi_IN_r_WREADY),
    .WDATA(m_axi_IN_r_WDATA),
    .WSTRB(m_axi_IN_r_WSTRB),
    .WLAST(m_axi_IN_r_WLAST),
    .WID(m_axi_IN_r_WID),
    .WUSER(m_axi_IN_r_WUSER),
    .ARVALID(m_axi_IN_r_ARVALID),
    .ARREADY(m_axi_IN_r_ARREADY),
    .ARADDR(m_axi_IN_r_ARADDR),
    .ARID(m_axi_IN_r_ARID),
    .ARLEN(m_axi_IN_r_ARLEN),
    .ARSIZE(m_axi_IN_r_ARSIZE),
    .ARBURST(m_axi_IN_r_ARBURST),
    .ARLOCK(m_axi_IN_r_ARLOCK),
    .ARCACHE(m_axi_IN_r_ARCACHE),
    .ARPROT(m_axi_IN_r_ARPROT),
    .ARQOS(m_axi_IN_r_ARQOS),
    .ARREGION(m_axi_IN_r_ARREGION),
    .ARUSER(m_axi_IN_r_ARUSER),
    .RVALID(m_axi_IN_r_RVALID),
    .RREADY(m_axi_IN_r_RREADY),
    .RDATA(m_axi_IN_r_RDATA),
    .RLAST(m_axi_IN_r_RLAST),
    .RID(m_axi_IN_r_RID),
    .RUSER(m_axi_IN_r_RUSER),
    .RRESP(m_axi_IN_r_RRESP),
    .BVALID(m_axi_IN_r_BVALID),
    .BREADY(m_axi_IN_r_BREADY),
    .BRESP(m_axi_IN_r_BRESP),
    .BID(m_axi_IN_r_BID),
    .BUSER(m_axi_IN_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IN_r_ARVALID),
    .I_ARREADY(IN_r_ARREADY),
    .I_ARADDR(IN_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IN_r_RVALID),
    .I_RREADY(IN_r_RREADY),
    .I_RDATA(IN_r_RDATA),
    .I_RID(IN_r_RID),
    .I_RUSER(IN_r_RUSER),
    .I_RRESP(IN_r_RRESP),
    .I_RLAST(IN_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IN_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IN_r_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(IN_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IN_r_BRESP),
    .I_BID(IN_r_BID),
    .I_BUSER(IN_r_BUSER)
);

bn_BETA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BETA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BETA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BETA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BETA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BETA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BETA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BETA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BETA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BETA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BETA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BETA_CACHE_VALUE ))
bn_BETA_m_axi_U(
    .AWVALID(m_axi_BETA_AWVALID),
    .AWREADY(m_axi_BETA_AWREADY),
    .AWADDR(m_axi_BETA_AWADDR),
    .AWID(m_axi_BETA_AWID),
    .AWLEN(m_axi_BETA_AWLEN),
    .AWSIZE(m_axi_BETA_AWSIZE),
    .AWBURST(m_axi_BETA_AWBURST),
    .AWLOCK(m_axi_BETA_AWLOCK),
    .AWCACHE(m_axi_BETA_AWCACHE),
    .AWPROT(m_axi_BETA_AWPROT),
    .AWQOS(m_axi_BETA_AWQOS),
    .AWREGION(m_axi_BETA_AWREGION),
    .AWUSER(m_axi_BETA_AWUSER),
    .WVALID(m_axi_BETA_WVALID),
    .WREADY(m_axi_BETA_WREADY),
    .WDATA(m_axi_BETA_WDATA),
    .WSTRB(m_axi_BETA_WSTRB),
    .WLAST(m_axi_BETA_WLAST),
    .WID(m_axi_BETA_WID),
    .WUSER(m_axi_BETA_WUSER),
    .ARVALID(m_axi_BETA_ARVALID),
    .ARREADY(m_axi_BETA_ARREADY),
    .ARADDR(m_axi_BETA_ARADDR),
    .ARID(m_axi_BETA_ARID),
    .ARLEN(m_axi_BETA_ARLEN),
    .ARSIZE(m_axi_BETA_ARSIZE),
    .ARBURST(m_axi_BETA_ARBURST),
    .ARLOCK(m_axi_BETA_ARLOCK),
    .ARCACHE(m_axi_BETA_ARCACHE),
    .ARPROT(m_axi_BETA_ARPROT),
    .ARQOS(m_axi_BETA_ARQOS),
    .ARREGION(m_axi_BETA_ARREGION),
    .ARUSER(m_axi_BETA_ARUSER),
    .RVALID(m_axi_BETA_RVALID),
    .RREADY(m_axi_BETA_RREADY),
    .RDATA(m_axi_BETA_RDATA),
    .RLAST(m_axi_BETA_RLAST),
    .RID(m_axi_BETA_RID),
    .RUSER(m_axi_BETA_RUSER),
    .RRESP(m_axi_BETA_RRESP),
    .BVALID(m_axi_BETA_BVALID),
    .BREADY(m_axi_BETA_BREADY),
    .BRESP(m_axi_BETA_BRESP),
    .BID(m_axi_BETA_BID),
    .BUSER(m_axi_BETA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(BETA_ARVALID),
    .I_ARREADY(BETA_ARREADY),
    .I_ARADDR(BETA_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(BETA_RVALID),
    .I_RREADY(BETA_RREADY),
    .I_RDATA(BETA_RDATA),
    .I_RID(BETA_RID),
    .I_RUSER(BETA_RUSER),
    .I_RRESP(BETA_RRESP),
    .I_RLAST(BETA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(BETA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(BETA_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(BETA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(BETA_BRESP),
    .I_BID(BETA_BID),
    .I_BUSER(BETA_BUSER)
);

bn_GAMMA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GAMMA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GAMMA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GAMMA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GAMMA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GAMMA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GAMMA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GAMMA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GAMMA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GAMMA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GAMMA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GAMMA_CACHE_VALUE ))
bn_GAMMA_m_axi_U(
    .AWVALID(m_axi_GAMMA_AWVALID),
    .AWREADY(m_axi_GAMMA_AWREADY),
    .AWADDR(m_axi_GAMMA_AWADDR),
    .AWID(m_axi_GAMMA_AWID),
    .AWLEN(m_axi_GAMMA_AWLEN),
    .AWSIZE(m_axi_GAMMA_AWSIZE),
    .AWBURST(m_axi_GAMMA_AWBURST),
    .AWLOCK(m_axi_GAMMA_AWLOCK),
    .AWCACHE(m_axi_GAMMA_AWCACHE),
    .AWPROT(m_axi_GAMMA_AWPROT),
    .AWQOS(m_axi_GAMMA_AWQOS),
    .AWREGION(m_axi_GAMMA_AWREGION),
    .AWUSER(m_axi_GAMMA_AWUSER),
    .WVALID(m_axi_GAMMA_WVALID),
    .WREADY(m_axi_GAMMA_WREADY),
    .WDATA(m_axi_GAMMA_WDATA),
    .WSTRB(m_axi_GAMMA_WSTRB),
    .WLAST(m_axi_GAMMA_WLAST),
    .WID(m_axi_GAMMA_WID),
    .WUSER(m_axi_GAMMA_WUSER),
    .ARVALID(m_axi_GAMMA_ARVALID),
    .ARREADY(m_axi_GAMMA_ARREADY),
    .ARADDR(m_axi_GAMMA_ARADDR),
    .ARID(m_axi_GAMMA_ARID),
    .ARLEN(m_axi_GAMMA_ARLEN),
    .ARSIZE(m_axi_GAMMA_ARSIZE),
    .ARBURST(m_axi_GAMMA_ARBURST),
    .ARLOCK(m_axi_GAMMA_ARLOCK),
    .ARCACHE(m_axi_GAMMA_ARCACHE),
    .ARPROT(m_axi_GAMMA_ARPROT),
    .ARQOS(m_axi_GAMMA_ARQOS),
    .ARREGION(m_axi_GAMMA_ARREGION),
    .ARUSER(m_axi_GAMMA_ARUSER),
    .RVALID(m_axi_GAMMA_RVALID),
    .RREADY(m_axi_GAMMA_RREADY),
    .RDATA(m_axi_GAMMA_RDATA),
    .RLAST(m_axi_GAMMA_RLAST),
    .RID(m_axi_GAMMA_RID),
    .RUSER(m_axi_GAMMA_RUSER),
    .RRESP(m_axi_GAMMA_RRESP),
    .BVALID(m_axi_GAMMA_BVALID),
    .BREADY(m_axi_GAMMA_BREADY),
    .BRESP(m_axi_GAMMA_BRESP),
    .BID(m_axi_GAMMA_BID),
    .BUSER(m_axi_GAMMA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(GAMMA_ARVALID),
    .I_ARREADY(GAMMA_ARREADY),
    .I_ARADDR(GAMMA_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(GAMMA_RVALID),
    .I_RREADY(GAMMA_RREADY),
    .I_RDATA(GAMMA_RDATA),
    .I_RID(GAMMA_RID),
    .I_RUSER(GAMMA_RUSER),
    .I_RRESP(GAMMA_RRESP),
    .I_RLAST(GAMMA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(GAMMA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(GAMMA_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(GAMMA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(GAMMA_BRESP),
    .I_BID(GAMMA_BID),
    .I_BUSER(GAMMA_BUSER)
);

bn_M_M_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_M_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_M_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_M_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_M_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_M_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_M_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_M_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_M_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_M_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_M_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_M_CACHE_VALUE ))
bn_M_M_m_axi_U(
    .AWVALID(m_axi_M_M_AWVALID),
    .AWREADY(m_axi_M_M_AWREADY),
    .AWADDR(m_axi_M_M_AWADDR),
    .AWID(m_axi_M_M_AWID),
    .AWLEN(m_axi_M_M_AWLEN),
    .AWSIZE(m_axi_M_M_AWSIZE),
    .AWBURST(m_axi_M_M_AWBURST),
    .AWLOCK(m_axi_M_M_AWLOCK),
    .AWCACHE(m_axi_M_M_AWCACHE),
    .AWPROT(m_axi_M_M_AWPROT),
    .AWQOS(m_axi_M_M_AWQOS),
    .AWREGION(m_axi_M_M_AWREGION),
    .AWUSER(m_axi_M_M_AWUSER),
    .WVALID(m_axi_M_M_WVALID),
    .WREADY(m_axi_M_M_WREADY),
    .WDATA(m_axi_M_M_WDATA),
    .WSTRB(m_axi_M_M_WSTRB),
    .WLAST(m_axi_M_M_WLAST),
    .WID(m_axi_M_M_WID),
    .WUSER(m_axi_M_M_WUSER),
    .ARVALID(m_axi_M_M_ARVALID),
    .ARREADY(m_axi_M_M_ARREADY),
    .ARADDR(m_axi_M_M_ARADDR),
    .ARID(m_axi_M_M_ARID),
    .ARLEN(m_axi_M_M_ARLEN),
    .ARSIZE(m_axi_M_M_ARSIZE),
    .ARBURST(m_axi_M_M_ARBURST),
    .ARLOCK(m_axi_M_M_ARLOCK),
    .ARCACHE(m_axi_M_M_ARCACHE),
    .ARPROT(m_axi_M_M_ARPROT),
    .ARQOS(m_axi_M_M_ARQOS),
    .ARREGION(m_axi_M_M_ARREGION),
    .ARUSER(m_axi_M_M_ARUSER),
    .RVALID(m_axi_M_M_RVALID),
    .RREADY(m_axi_M_M_RREADY),
    .RDATA(m_axi_M_M_RDATA),
    .RLAST(m_axi_M_M_RLAST),
    .RID(m_axi_M_M_RID),
    .RUSER(m_axi_M_M_RUSER),
    .RRESP(m_axi_M_M_RRESP),
    .BVALID(m_axi_M_M_BVALID),
    .BREADY(m_axi_M_M_BREADY),
    .BRESP(m_axi_M_M_BRESP),
    .BID(m_axi_M_M_BID),
    .BUSER(m_axi_M_M_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(M_M_ARVALID),
    .I_ARREADY(M_M_ARREADY),
    .I_ARADDR(M_M_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(M_M_RVALID),
    .I_RREADY(M_M_RREADY),
    .I_RDATA(M_M_RDATA),
    .I_RID(M_M_RID),
    .I_RUSER(M_M_RUSER),
    .I_RRESP(M_M_RRESP),
    .I_RLAST(M_M_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(M_M_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(M_M_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(M_M_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(M_M_BRESP),
    .I_BID(M_M_BID),
    .I_BUSER(M_M_BUSER)
);

bn_M_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
bn_M_V_m_axi_U(
    .AWVALID(m_axi_M_V_AWVALID),
    .AWREADY(m_axi_M_V_AWREADY),
    .AWADDR(m_axi_M_V_AWADDR),
    .AWID(m_axi_M_V_AWID),
    .AWLEN(m_axi_M_V_AWLEN),
    .AWSIZE(m_axi_M_V_AWSIZE),
    .AWBURST(m_axi_M_V_AWBURST),
    .AWLOCK(m_axi_M_V_AWLOCK),
    .AWCACHE(m_axi_M_V_AWCACHE),
    .AWPROT(m_axi_M_V_AWPROT),
    .AWQOS(m_axi_M_V_AWQOS),
    .AWREGION(m_axi_M_V_AWREGION),
    .AWUSER(m_axi_M_V_AWUSER),
    .WVALID(m_axi_M_V_WVALID),
    .WREADY(m_axi_M_V_WREADY),
    .WDATA(m_axi_M_V_WDATA),
    .WSTRB(m_axi_M_V_WSTRB),
    .WLAST(m_axi_M_V_WLAST),
    .WID(m_axi_M_V_WID),
    .WUSER(m_axi_M_V_WUSER),
    .ARVALID(m_axi_M_V_ARVALID),
    .ARREADY(m_axi_M_V_ARREADY),
    .ARADDR(m_axi_M_V_ARADDR),
    .ARID(m_axi_M_V_ARID),
    .ARLEN(m_axi_M_V_ARLEN),
    .ARSIZE(m_axi_M_V_ARSIZE),
    .ARBURST(m_axi_M_V_ARBURST),
    .ARLOCK(m_axi_M_V_ARLOCK),
    .ARCACHE(m_axi_M_V_ARCACHE),
    .ARPROT(m_axi_M_V_ARPROT),
    .ARQOS(m_axi_M_V_ARQOS),
    .ARREGION(m_axi_M_V_ARREGION),
    .ARUSER(m_axi_M_V_ARUSER),
    .RVALID(m_axi_M_V_RVALID),
    .RREADY(m_axi_M_V_RREADY),
    .RDATA(m_axi_M_V_RDATA),
    .RLAST(m_axi_M_V_RLAST),
    .RID(m_axi_M_V_RID),
    .RUSER(m_axi_M_V_RUSER),
    .RRESP(m_axi_M_V_RRESP),
    .BVALID(m_axi_M_V_BVALID),
    .BREADY(m_axi_M_V_BREADY),
    .BRESP(m_axi_M_V_BRESP),
    .BID(m_axi_M_V_BID),
    .BUSER(m_axi_M_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(M_V_ARVALID),
    .I_ARREADY(M_V_ARREADY),
    .I_ARADDR(M_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(M_V_RVALID),
    .I_RREADY(M_V_RREADY),
    .I_RDATA(M_V_RDATA),
    .I_RID(M_V_RID),
    .I_RUSER(M_V_RUSER),
    .I_RRESP(M_V_RRESP),
    .I_RLAST(M_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(M_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(M_V_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(M_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(M_V_BRESP),
    .I_BID(M_V_BID),
    .I_BUSER(M_V_BUSER)
);

bn_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
bn_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(OUT_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(OUT_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

sqrt_fixed_16_6_s grp_sqrt_fixed_16_6_s_fu_556(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(grp_sqrt_fixed_16_6_s_fu_556_x_V),
    .ap_return(grp_sqrt_fixed_16_6_s_fu_556_ap_return),
    .ap_ce(grp_sqrt_fixed_16_6_s_fu_556_ap_ce)
);

bn_mul_mul_13ns_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
bn_mul_mul_13ns_1bkb_U2(
    .din0(mul_ln1118_fu_3021_p0),
    .din1(trunc_ln1118_reg_3403_pp0_iter4_reg),
    .dout(mul_ln1118_fu_3021_p2)
);

bn_mul_mul_13ns_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
bn_mul_mul_13ns_1bkb_U3(
    .din0(mul_ln1118_2_fu_3027_p0),
    .din1(trunc_ln1118_1_reg_3439_pp0_iter4_reg),
    .dout(mul_ln1118_2_fu_3027_p2)
);

bn_mul_mul_13ns_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
bn_mul_mul_13ns_1bkb_U4(
    .din0(mul_ln1118_4_fu_3033_p0),
    .din1(trunc_ln1118_2_reg_3475_pp0_iter4_reg),
    .dout(mul_ln1118_4_fu_3033_p2)
);

bn_mul_mul_13ns_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
bn_mul_mul_13ns_1bkb_U5(
    .din0(mul_ln1118_6_fu_3039_p0),
    .din1(trunc_ln1118_3_reg_3511_pp0_iter4_reg),
    .dout(mul_ln1118_6_fu_3039_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_544 <= i_reg_3352;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_544 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln321_10_reg_3252 <= add_ln321_10_fu_834_p2;
        add_ln321_11_reg_3257 <= add_ln321_11_fu_839_p2;
        add_ln321_12_reg_3262 <= add_ln321_12_fu_844_p2;
        add_ln321_13_reg_3267 <= add_ln321_13_fu_849_p2;
        add_ln321_14_reg_3272 <= add_ln321_14_fu_854_p2;
        zext_ln321_12_reg_3247[0] <= zext_ln321_12_fu_830_p1[0];
zext_ln321_12_reg_3247[4 : 2] <= zext_ln321_12_fu_830_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln321_15_reg_3307 <= add_ln321_15_fu_918_p2;
        add_ln321_16_reg_3312 <= add_ln321_16_fu_923_p2;
        add_ln321_17_reg_3317 <= add_ln321_17_fu_928_p2;
        add_ln321_18_reg_3322 <= add_ln321_18_fu_933_p2;
        add_ln321_19_reg_3327 <= add_ln321_19_fu_938_p2;
        add_ln321_20_reg_3332 <= add_ln321_20_fu_943_p2;
        add_ln321_21_reg_3337 <= add_ln321_21_fu_947_p2;
        add_ln321_22_reg_3342 <= add_ln321_22_fu_951_p2;
        add_ln321_23_reg_3347 <= add_ln321_23_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_fu_649_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln321_1_reg_3131 <= add_ln321_1_fu_666_p2;
        add_ln321_2_reg_3136 <= add_ln321_2_fu_671_p2;
        add_ln321_3_reg_3141 <= add_ln321_3_fu_676_p2;
        add_ln321_4_reg_3146 <= add_ln321_4_fu_681_p2;
        add_ln321_reg_3126 <= add_ln321_fu_661_p2;
        zext_ln321_reg_3121[5 : 0] <= zext_ln321_fu_657_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln321_20_reg_3332_pp0_iter1_reg <= add_ln321_20_reg_3332;
        add_ln321_20_reg_3332_pp0_iter2_reg <= add_ln321_20_reg_3332_pp0_iter1_reg;
        add_ln321_20_reg_3332_pp0_iter3_reg <= add_ln321_20_reg_3332_pp0_iter2_reg;
        add_ln321_20_reg_3332_pp0_iter4_reg <= add_ln321_20_reg_3332_pp0_iter3_reg;
        add_ln321_21_reg_3337_pp0_iter1_reg <= add_ln321_21_reg_3337;
        add_ln321_21_reg_3337_pp0_iter2_reg <= add_ln321_21_reg_3337_pp0_iter1_reg;
        add_ln321_21_reg_3337_pp0_iter3_reg <= add_ln321_21_reg_3337_pp0_iter2_reg;
        add_ln321_21_reg_3337_pp0_iter4_reg <= add_ln321_21_reg_3337_pp0_iter3_reg;
        add_ln321_22_reg_3342_pp0_iter1_reg <= add_ln321_22_reg_3342;
        add_ln321_22_reg_3342_pp0_iter2_reg <= add_ln321_22_reg_3342_pp0_iter1_reg;
        add_ln321_22_reg_3342_pp0_iter3_reg <= add_ln321_22_reg_3342_pp0_iter2_reg;
        add_ln321_22_reg_3342_pp0_iter4_reg <= add_ln321_22_reg_3342_pp0_iter3_reg;
        add_ln321_22_reg_3342_pp0_iter5_reg <= add_ln321_22_reg_3342_pp0_iter4_reg;
        add_ln321_23_reg_3347_pp0_iter1_reg <= add_ln321_23_reg_3347;
        add_ln321_23_reg_3347_pp0_iter2_reg <= add_ln321_23_reg_3347_pp0_iter1_reg;
        add_ln321_23_reg_3347_pp0_iter3_reg <= add_ln321_23_reg_3347_pp0_iter2_reg;
        add_ln321_23_reg_3347_pp0_iter4_reg <= add_ln321_23_reg_3347_pp0_iter3_reg;
        add_ln321_23_reg_3347_pp0_iter5_reg <= add_ln321_23_reg_3347_pp0_iter4_reg;
        select_ln340_18_reg_3506_pp0_iter3_reg <= select_ln340_18_reg_3506;
        select_ln340_18_reg_3506_pp0_iter4_reg <= select_ln340_18_reg_3506_pp0_iter3_reg;
        trunc_ln1118_3_reg_3511_pp0_iter3_reg <= trunc_ln1118_3_reg_3511;
        trunc_ln1118_3_reg_3511_pp0_iter4_reg <= trunc_ln1118_3_reg_3511_pp0_iter3_reg;
        trunc_ln728_3_reg_3516_pp0_iter3_reg <= trunc_ln728_3_reg_3516;
        trunc_ln728_3_reg_3516_pp0_iter4_reg <= trunc_ln728_3_reg_3516_pp0_iter3_reg;
        trunc_ln728_3_reg_3516_pp0_iter5_reg <= trunc_ln728_3_reg_3516_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln321_5_reg_3192 <= add_ln321_5_fu_750_p2;
        add_ln321_6_reg_3197 <= add_ln321_6_fu_755_p2;
        add_ln321_7_reg_3202 <= add_ln321_7_fu_760_p2;
        add_ln321_8_reg_3207 <= add_ln321_8_fu_765_p2;
        add_ln321_9_reg_3212 <= add_ln321_9_fu_770_p2;
        trunc_ln321_reg_3151 <= trunc_ln321_fu_686_p1;
        zext_ln321_6_reg_3187[4 : 1] <= zext_ln321_6_fu_746_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln415_1_reg_3627 <= add_ln415_1_fu_2153_p2;
        and_ln416_1_reg_3633 <= and_ln416_1_fu_2173_p2;
        and_ln786_1_reg_3655 <= and_ln786_1_fu_2253_p2;
        icmp_ln768_1_reg_3650 <= icmp_ln768_1_fu_2219_p2;
        icmp_ln879_3_reg_3644 <= icmp_ln879_3_fu_2213_p2;
        mul_ln1118_5_reg_3661 <= mul_ln1118_5_fu_2265_p2;
        mul_ln1118_6_reg_3676 <= mul_ln1118_6_fu_3039_p2;
        result_0_V_reg_3616 <= result_0_V_fu_2087_p3;
        tmp_52_reg_3621 <= add_ln1192_3_fu_2113_p2[32'd46];
        tmp_56_reg_3639 <= add_ln415_1_fu_2153_p2[32'd15];
        tmp_64_reg_3671 <= mul_ln1118_5_fu_2265_p2[32'd19];
        trunc_ln1192_2_reg_3666 <= trunc_ln1192_2_fu_2271_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln415_2_reg_3698 <= add_ln415_2_fu_2447_p2;
        and_ln416_2_reg_3704 <= and_ln416_2_fu_2467_p2;
        and_ln786_2_reg_3726 <= and_ln786_2_fu_2547_p2;
        icmp_ln768_2_reg_3721 <= icmp_ln768_2_fu_2513_p2;
        icmp_ln879_5_reg_3715 <= icmp_ln879_5_fu_2507_p2;
        mul_ln1118_7_reg_3732 <= mul_ln1118_7_fu_2559_p2;
        result_1_V_reg_3687 <= result_1_V_fu_2381_p3;
        tmp_62_reg_3692 <= add_ln1192_5_fu_2407_p2[32'd46];
        tmp_66_reg_3710 <= add_ln415_2_fu_2447_p2[32'd15];
        tmp_74_reg_3742 <= mul_ln1118_7_fu_2559_p2[32'd19];
        trunc_ln1192_3_reg_3737 <= trunc_ln1192_3_fu_2565_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_3_reg_3763 <= add_ln415_3_fu_2751_p2;
        and_ln416_3_reg_3769 <= and_ln416_3_fu_2771_p2;
        and_ln781_3_reg_3789 <= and_ln781_3_fu_2851_p2;
        and_ln786_15_reg_3799 <= and_ln786_15_fu_2875_p2;
        and_ln786_3_reg_3794 <= and_ln786_3_fu_2857_p2;
        icmp_ln768_3_reg_3784 <= icmp_ln768_3_fu_2817_p2;
        icmp_ln879_7_reg_3779 <= icmp_ln879_7_fu_2811_p2;
        result_2_V_reg_3753 <= result_2_V_fu_2685_p3;
        tmp_72_reg_3758 <= add_ln1192_7_fu_2711_p2[32'd46];
        tmp_76_reg_3774 <= add_ln415_3_fu_2751_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln415_reg_3562 <= add_ln415_fu_1872_p2;
        and_ln416_reg_3568 <= and_ln416_fu_1892_p2;
        and_ln786_5_reg_3590 <= and_ln786_5_fu_1972_p2;
        icmp_ln768_reg_3585 <= icmp_ln768_fu_1938_p2;
        icmp_ln879_1_reg_3579 <= icmp_ln879_1_fu_1932_p2;
        mul_ln1118_3_reg_3596 <= mul_ln1118_3_fu_1984_p2;
        mul_ln1118_4_reg_3611 <= mul_ln1118_4_fu_3033_p2;
        tmp_42_reg_3556 <= add_ln1192_1_fu_1832_p2[32'd46];
        tmp_46_reg_3574 <= add_ln415_fu_1872_p2[32'd15];
        tmp_54_reg_3606 <= mul_ln1118_3_fu_1984_p2[32'd19];
        trunc_ln1192_1_reg_3601 <= trunc_ln1192_1_fu_1990_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        i_reg_3352 <= i_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        in_m_1_V_reg_3413 <= in_m_1_V_fu_1036_p1;
        moving_mean_m_1_V_reg_3418 <= moving_mean_m_1_V_fu_1040_p1;
        moving_variance_m_1_reg_3423 <= moving_variance_m_1_fu_1044_p1;
        select_ln340_3_reg_3434 <= select_ln340_3_fu_1210_p3;
        trunc_ln1118_1_reg_3439 <= trunc_ln1118_1_fu_1218_p1;
        trunc_ln728_1_reg_3444 <= trunc_ln728_1_fu_1222_p1;
        x_V_reg_3429 <= x_V_fu_1124_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        in_m_2_V_reg_3449 <= in_m_2_V_fu_1226_p1;
        moving_mean_m_2_V_reg_3454 <= moving_mean_m_2_V_fu_1230_p1;
        moving_variance_m_2_reg_3459 <= moving_variance_m_2_fu_1234_p1;
        select_ln340_14_reg_3470 <= select_ln340_14_fu_1400_p3;
        trunc_ln1118_2_reg_3475 <= trunc_ln1118_2_fu_1408_p1;
        trunc_ln728_2_reg_3480 <= trunc_ln728_2_fu_1412_p1;
        x_V_1_reg_3465 <= x_V_1_fu_1314_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        in_m_3_V_reg_3485 <= in_m_3_V_fu_1416_p1;
        moving_mean_m_3_V_reg_3490 <= moving_mean_m_3_V_fu_1420_p1;
        moving_variance_m_3_reg_3495 <= moving_variance_m_3_fu_1424_p1;
        select_ln340_18_reg_3506 <= select_ln340_18_fu_1590_p3;
        trunc_ln1118_3_reg_3511 <= trunc_ln1118_3_fu_1598_p1;
        trunc_ln728_3_reg_3516 <= trunc_ln728_3_fu_1602_p1;
        x_V_2_reg_3501 <= x_V_2_fu_1504_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1118_1_reg_3536 <= mul_ln1118_1_fu_1789_p2;
        mul_ln1118_2_reg_3551 <= mul_ln1118_2_fu_3027_p2;
        tmp_44_reg_3546 <= mul_ln1118_1_fu_1789_p2[32'd19];
        trunc_ln1192_reg_3541 <= trunc_ln1192_fu_1795_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_ln1118_reg_3531 <= mul_ln1118_fu_3021_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_cast31_reg_3101[28 : 0] <= p_cast31_fu_631_p1[28 : 0];
        p_cast32_reg_3093[28 : 0] <= p_cast32_fu_617_p1[28 : 0];
        p_cast33_reg_3085[28 : 0] <= p_cast33_fu_603_p1[28 : 0];
        p_cast34_reg_3077[28 : 0] <= p_cast34_fu_589_p1[28 : 0];
        p_cast35_reg_3069[28 : 0] <= p_cast35_fu_575_p1[28 : 0];
        p_cast_reg_3109[28 : 0] <= p_cast_fu_645_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_37_reg_3117_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((tmp_37_reg_3117_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_561 <= grp_sqrt_fixed_16_6_s_fu_556_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        result_pack_0_V_1_fu_188 <= result_pack_0_V_fu_2577_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        result_pack_1_V_1_fu_192 <= result_pack_1_V_fu_2881_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        result_pack_2_V_1_fu_196 <= result_pack_2_V_fu_2974_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        result_pack_3_V_1_fu_200 <= result_pack_3_V_fu_3004_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln340_14_reg_3470_pp0_iter3_reg <= select_ln340_14_reg_3470;
        select_ln340_14_reg_3470_pp0_iter4_reg <= select_ln340_14_reg_3470_pp0_iter3_reg;
        trunc_ln1118_2_reg_3475_pp0_iter3_reg <= trunc_ln1118_2_reg_3475;
        trunc_ln1118_2_reg_3475_pp0_iter4_reg <= trunc_ln1118_2_reg_3475_pp0_iter3_reg;
        trunc_ln728_2_reg_3480_pp0_iter3_reg <= trunc_ln728_2_reg_3480;
        trunc_ln728_2_reg_3480_pp0_iter4_reg <= trunc_ln728_2_reg_3480_pp0_iter3_reg;
        trunc_ln728_2_reg_3480_pp0_iter5_reg <= trunc_ln728_2_reg_3480_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln340_22_reg_3526 <= select_ln340_22_fu_1768_p3;
        x_V_3_reg_3521 <= x_V_3_fu_1682_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln340_22_reg_3526_pp0_iter4_reg <= select_ln340_22_reg_3526;
        select_ln340_22_reg_3526_pp0_iter5_reg <= select_ln340_22_reg_3526_pp0_iter4_reg;
        tmp_37_reg_3117 <= ap_phi_mux_i_0_phi_fu_548_p4[32'd5];
        tmp_37_reg_3117_pp0_iter1_reg <= tmp_37_reg_3117;
        tmp_37_reg_3117_pp0_iter2_reg <= tmp_37_reg_3117_pp0_iter1_reg;
        tmp_37_reg_3117_pp0_iter3_reg <= tmp_37_reg_3117_pp0_iter2_reg;
        tmp_37_reg_3117_pp0_iter4_reg <= tmp_37_reg_3117_pp0_iter3_reg;
        tmp_37_reg_3117_pp0_iter5_reg <= tmp_37_reg_3117_pp0_iter4_reg;
        tmp_37_reg_3117_pp0_iter6_reg <= tmp_37_reg_3117_pp0_iter5_reg;
        tmp_37_reg_3117_pp0_iter7_reg <= tmp_37_reg_3117_pp0_iter6_reg;
        trunc_ln1118_reg_3403_pp0_iter3_reg <= trunc_ln1118_reg_3403;
        trunc_ln1118_reg_3403_pp0_iter4_reg <= trunc_ln1118_reg_3403_pp0_iter3_reg;
        trunc_ln728_reg_3408_pp0_iter3_reg <= trunc_ln728_reg_3408;
        trunc_ln728_reg_3408_pp0_iter4_reg <= trunc_ln728_reg_3408_pp0_iter3_reg;
        trunc_ln728_reg_3408_pp0_iter5_reg <= trunc_ln728_reg_3408_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln340_23_reg_3811 <= select_ln340_23_fu_2966_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln340_3_reg_3434_pp0_iter3_reg <= select_ln340_3_reg_3434;
        select_ln340_3_reg_3434_pp0_iter4_reg <= select_ln340_3_reg_3434_pp0_iter3_reg;
        trunc_ln1118_1_reg_3439_pp0_iter3_reg <= trunc_ln1118_1_reg_3439;
        trunc_ln1118_1_reg_3439_pp0_iter4_reg <= trunc_ln1118_1_reg_3439_pp0_iter3_reg;
        trunc_ln728_1_reg_3444_pp0_iter3_reg <= trunc_ln728_1_reg_3444;
        trunc_ln728_1_reg_3444_pp0_iter4_reg <= trunc_ln728_1_reg_3444_pp0_iter3_reg;
        trunc_ln728_1_reg_3444_pp0_iter5_reg <= trunc_ln728_1_reg_3444_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln1118_reg_3403 <= trunc_ln1118_fu_1028_p1;
        trunc_ln339_1_reg_3392 <= trunc_ln339_1_fu_1020_p1;
        trunc_ln339_2_reg_3397 <= trunc_ln339_2_fu_1024_p1;
        trunc_ln339_reg_3387 <= trunc_ln339_fu_1016_p1;
        trunc_ln728_reg_3408 <= trunc_ln728_fu_1032_p1;
    end
end

always @ (*) begin
    if ((tmp_37_reg_3117 == 1'd0)) begin
        if ((1'b1 == ap_condition_1586)) begin
            BETA_ARADDR = zext_ln321_20_fu_976_p1;
        end else if ((1'b1 == ap_condition_1250)) begin
            BETA_ARADDR = zext_ln321_14_fu_869_p1;
        end else if ((1'b1 == ap_condition_1624)) begin
            BETA_ARADDR = zext_ln321_8_fu_785_p1;
        end else if ((1'b1 == ap_condition_1619)) begin
            BETA_ARADDR = zext_ln321_2_fu_700_p1;
        end else begin
            BETA_ARADDR = 'bx;
        end
    end else begin
        BETA_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        BETA_ARVALID = 1'b1;
    end else begin
        BETA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        BETA_RREADY = 1'b1;
    end else begin
        BETA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        BETA_blk_n_AR = m_axi_BETA_ARREADY;
    end else begin
        BETA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        BETA_blk_n_R = m_axi_BETA_RVALID;
    end else begin
        BETA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_37_reg_3117 == 1'd0)) begin
        if ((1'b1 == ap_condition_1586)) begin
            GAMMA_ARADDR = zext_ln321_21_fu_986_p1;
        end else if ((1'b1 == ap_condition_1250)) begin
            GAMMA_ARADDR = zext_ln321_15_fu_879_p1;
        end else if ((1'b1 == ap_condition_1624)) begin
            GAMMA_ARADDR = zext_ln321_9_fu_795_p1;
        end else if ((1'b1 == ap_condition_1619)) begin
            GAMMA_ARADDR = zext_ln321_3_fu_710_p1;
        end else begin
            GAMMA_ARADDR = 'bx;
        end
    end else begin
        GAMMA_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        GAMMA_ARVALID = 1'b1;
    end else begin
        GAMMA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        GAMMA_RREADY = 1'b1;
    end else begin
        GAMMA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        GAMMA_blk_n_AR = m_axi_GAMMA_ARREADY;
    end else begin
        GAMMA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        GAMMA_blk_n_R = m_axi_GAMMA_RVALID;
    end else begin
        GAMMA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_37_reg_3117 == 1'd0)) begin
        if ((1'b1 == ap_condition_1586)) begin
            IN_r_ARADDR = zext_ln321_19_fu_966_p1;
        end else if ((1'b1 == ap_condition_1250)) begin
            IN_r_ARADDR = zext_ln321_13_fu_859_p1;
        end else if ((1'b1 == ap_condition_1624)) begin
            IN_r_ARADDR = zext_ln321_7_fu_775_p1;
        end else if ((1'b1 == ap_condition_1619)) begin
            IN_r_ARADDR = zext_ln321_1_fu_690_p1;
        end else begin
            IN_r_ARADDR = 'bx;
        end
    end else begin
        IN_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        IN_r_ARVALID = 1'b1;
    end else begin
        IN_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        IN_r_RREADY = 1'b1;
    end else begin
        IN_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        IN_r_blk_n_AR = m_axi_IN_r_ARREADY;
    end else begin
        IN_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        IN_r_blk_n_R = m_axi_IN_r_RVALID;
    end else begin
        IN_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_37_reg_3117 == 1'd0)) begin
        if ((1'b1 == ap_condition_1586)) begin
            M_M_ARADDR = zext_ln321_22_fu_996_p1;
        end else if ((1'b1 == ap_condition_1250)) begin
            M_M_ARADDR = zext_ln321_16_fu_889_p1;
        end else if ((1'b1 == ap_condition_1624)) begin
            M_M_ARADDR = zext_ln321_10_fu_805_p1;
        end else if ((1'b1 == ap_condition_1619)) begin
            M_M_ARADDR = zext_ln321_4_fu_720_p1;
        end else begin
            M_M_ARADDR = 'bx;
        end
    end else begin
        M_M_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        M_M_ARVALID = 1'b1;
    end else begin
        M_M_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        M_M_RREADY = 1'b1;
    end else begin
        M_M_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        M_M_blk_n_AR = m_axi_M_M_ARREADY;
    end else begin
        M_M_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        M_M_blk_n_R = m_axi_M_M_RVALID;
    end else begin
        M_M_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_37_reg_3117 == 1'd0)) begin
        if ((1'b1 == ap_condition_1586)) begin
            M_V_ARADDR = zext_ln321_23_fu_1006_p1;
        end else if ((1'b1 == ap_condition_1250)) begin
            M_V_ARADDR = zext_ln321_17_fu_899_p1;
        end else if ((1'b1 == ap_condition_1624)) begin
            M_V_ARADDR = zext_ln321_11_fu_815_p1;
        end else if ((1'b1 == ap_condition_1619)) begin
            M_V_ARADDR = zext_ln321_5_fu_730_p1;
        end else begin
            M_V_ARADDR = 'bx;
        end
    end else begin
        M_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        M_V_ARVALID = 1'b1;
    end else begin
        M_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        M_V_RREADY = 1'b1;
    end else begin
        M_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        M_V_blk_n_AR = m_axi_M_V_ARREADY;
    end else begin
        M_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        M_V_blk_n_R = m_axi_M_V_RVALID;
    end else begin
        M_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        OUT_r_AWADDR = zext_ln321_27_fu_2986_p1;
    end else if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_r_AWADDR = zext_ln321_26_fu_2893_p1;
    end else if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        OUT_r_AWADDR = zext_ln321_25_fu_2589_p1;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        OUT_r_AWADDR = zext_ln321_24_fu_2290_p1;
    end else begin
        OUT_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        OUT_r_WDATA = result_pack_3_V_fu_3004_p5;
    end else if (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        OUT_r_WDATA = result_pack_2_V_fu_2974_p5;
    end else if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        OUT_r_WDATA = result_pack_1_V_fu_2881_p5;
    end else if (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        OUT_r_WDATA = result_pack_0_V_fu_2577_p5;
    end else begin
        OUT_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((tmp_37_fu_649_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_548_p4 = i_reg_3352;
    end else begin
        ap_phi_mux_i_0_phi_fu_548_p4 = i_0_reg_544;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp388)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp350)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp419)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp449)))) begin
        grp_sqrt_fixed_16_6_s_fu_556_ap_ce = 1'b1;
    end else begin
        grp_sqrt_fixed_16_6_s_fu_556_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_37_reg_3117_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_sqrt_fixed_16_6_s_fu_556_x_V = x_V_3_reg_3521;
    end else if (((1'b0 == ap_block_pp0_stage0) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_sqrt_fixed_16_6_s_fu_556_x_V = x_V_2_reg_3501;
    end else if (((1'b0 == ap_block_pp0_stage3) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_sqrt_fixed_16_6_s_fu_556_x_V = x_V_1_reg_3465;
    end else if (((1'b0 == ap_block_pp0_stage2) & (tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_sqrt_fixed_16_6_s_fu_556_x_V = x_V_reg_3429;
    end else begin
        grp_sqrt_fixed_16_6_s_fu_556_x_V = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_37_fu_649_p3 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_37_fu_649_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_10_fu_2413_p2 = ($signed(sext_ln1192_2_fu_2403_p1) + $signed(trunc_ln1192_2_reg_3666));

assign add_ln1192_11_fu_2717_p2 = ($signed(sext_ln1192_3_fu_2707_p1) + $signed(trunc_ln1192_3_reg_3737));

assign add_ln1192_1_fu_1832_p2 = ($signed(sext_ln727_fu_1814_p1) + $signed(sext_ln728_fu_1824_p1));

assign add_ln1192_2_fu_1241_p2 = ($signed(17'd1) + $signed(sext_ln703_3_fu_1238_p1));

assign add_ln1192_3_fu_2113_p2 = ($signed(sext_ln727_1_fu_2095_p1) + $signed(sext_ln728_1_fu_2105_p1));

assign add_ln1192_4_fu_1431_p2 = ($signed(17'd1) + $signed(sext_ln703_6_fu_1428_p1));

assign add_ln1192_5_fu_2407_p2 = ($signed(sext_ln727_2_fu_2389_p1) + $signed(sext_ln728_2_fu_2399_p1));

assign add_ln1192_6_fu_1609_p2 = ($signed(17'd1) + $signed(sext_ln703_9_fu_1606_p1));

assign add_ln1192_7_fu_2711_p2 = ($signed(sext_ln727_3_fu_2693_p1) + $signed(sext_ln728_3_fu_2703_p1));

assign add_ln1192_8_fu_1838_p2 = ($signed(sext_ln1192_fu_1828_p1) + $signed(trunc_ln1192_reg_3541));

assign add_ln1192_9_fu_2119_p2 = ($signed(sext_ln1192_1_fu_2109_p1) + $signed(trunc_ln1192_1_reg_3601));

assign add_ln1192_fu_1051_p2 = ($signed(17'd1) + $signed(sext_ln703_fu_1048_p1));

assign add_ln321_10_fu_834_p2 = (p_cast_reg_3109 + zext_ln321_12_fu_830_p1);

assign add_ln321_11_fu_839_p2 = (p_cast31_reg_3101 + zext_ln321_12_fu_830_p1);

assign add_ln321_12_fu_844_p2 = (p_cast32_reg_3093 + zext_ln321_12_fu_830_p1);

assign add_ln321_13_fu_849_p2 = (p_cast33_reg_3085 + zext_ln321_12_fu_830_p1);

assign add_ln321_14_fu_854_p2 = (p_cast34_reg_3077 + zext_ln321_12_fu_830_p1);

assign add_ln321_15_fu_918_p2 = (p_cast_reg_3109 + zext_ln321_18_fu_914_p1);

assign add_ln321_16_fu_923_p2 = (p_cast31_reg_3101 + zext_ln321_18_fu_914_p1);

assign add_ln321_17_fu_928_p2 = (p_cast32_reg_3093 + zext_ln321_18_fu_914_p1);

assign add_ln321_18_fu_933_p2 = (p_cast33_reg_3085 + zext_ln321_18_fu_914_p1);

assign add_ln321_19_fu_938_p2 = (p_cast34_reg_3077 + zext_ln321_18_fu_914_p1);

assign add_ln321_1_fu_666_p2 = (p_cast31_reg_3101 + zext_ln321_fu_657_p1);

assign add_ln321_20_fu_943_p2 = (p_cast35_reg_3069 + zext_ln321_reg_3121);

assign add_ln321_21_fu_947_p2 = (p_cast35_reg_3069 + zext_ln321_6_reg_3187);

assign add_ln321_22_fu_951_p2 = (p_cast35_reg_3069 + zext_ln321_12_reg_3247);

assign add_ln321_23_fu_955_p2 = (p_cast35_reg_3069 + zext_ln321_18_fu_914_p1);

assign add_ln321_2_fu_671_p2 = (p_cast32_reg_3093 + zext_ln321_fu_657_p1);

assign add_ln321_3_fu_676_p2 = (p_cast33_reg_3085 + zext_ln321_fu_657_p1);

assign add_ln321_4_fu_681_p2 = (p_cast34_reg_3077 + zext_ln321_fu_657_p1);

assign add_ln321_5_fu_750_p2 = (p_cast_reg_3109 + zext_ln321_6_fu_746_p1);

assign add_ln321_6_fu_755_p2 = (p_cast31_reg_3101 + zext_ln321_6_fu_746_p1);

assign add_ln321_7_fu_760_p2 = (p_cast32_reg_3093 + zext_ln321_6_fu_746_p1);

assign add_ln321_8_fu_765_p2 = (p_cast33_reg_3085 + zext_ln321_6_fu_746_p1);

assign add_ln321_9_fu_770_p2 = (p_cast34_reg_3077 + zext_ln321_6_fu_746_p1);

assign add_ln321_fu_661_p2 = (p_cast_reg_3109 + zext_ln321_fu_657_p1);

assign add_ln415_1_fu_2153_p2 = (zext_ln415_1_fu_2150_p1 + trunc_ln708_s_fu_2132_p4);

assign add_ln415_2_fu_2447_p2 = (zext_ln415_2_fu_2444_p1 + trunc_ln708_13_fu_2426_p4);

assign add_ln415_3_fu_2751_p2 = (zext_ln415_3_fu_2748_p1 + trunc_ln708_14_fu_2730_p4);

assign add_ln415_fu_1872_p2 = (zext_ln415_fu_1869_p1 + trunc_ln4_fu_1851_p4);

assign add_ln703_18_fu_1255_p2 = ($signed(16'd1) + $signed(moving_variance_m_1_reg_3423));

assign add_ln703_19_fu_1445_p2 = ($signed(16'd1) + $signed(moving_variance_m_2_reg_3459));

assign add_ln703_20_fu_1623_p2 = ($signed(16'd1) + $signed(moving_variance_m_3_reg_3495));

assign add_ln703_fu_1065_p2 = ($signed(16'd1) + $signed(trunc_ln339_2_reg_3397));

assign and_ln416_1_fu_2173_p2 = (xor_ln416_1_fu_2167_p2 & tmp_53_fu_2142_p3);

assign and_ln416_2_fu_2467_p2 = (xor_ln416_2_fu_2461_p2 & tmp_63_fu_2436_p3);

assign and_ln416_3_fu_2771_p2 = (xor_ln416_3_fu_2765_p2 & tmp_73_fu_2740_p3);

assign and_ln416_fu_1892_p2 = (xor_ln416_fu_1886_p2 & tmp_43_fu_1861_p3);

assign and_ln779_1_fu_2239_p2 = (xor_ln779_1_fu_2233_p2 & icmp_ln879_2_fu_2197_p2);

assign and_ln779_2_fu_2533_p2 = (xor_ln779_2_fu_2527_p2 & icmp_ln879_4_fu_2491_p2);

assign and_ln779_3_fu_2837_p2 = (xor_ln779_3_fu_2831_p2 & icmp_ln879_6_fu_2795_p2);

assign and_ln779_fu_1958_p2 = (xor_ln779_fu_1952_p2 & icmp_ln879_fu_1916_p2);

assign and_ln781_1_fu_2308_p2 = (icmp_ln879_3_reg_3644 & and_ln416_1_reg_3633);

assign and_ln781_2_fu_2612_p2 = (icmp_ln879_5_reg_3715 & and_ln416_2_reg_3704);

assign and_ln781_3_fu_2851_p2 = (icmp_ln879_7_fu_2811_p2 & and_ln416_3_fu_2771_p2);

assign and_ln781_fu_2014_p2 = (icmp_ln879_1_reg_3579 & and_ln416_reg_3568);

assign and_ln785_1_fu_2328_p2 = (xor_ln785_3_fu_2323_p2 & or_ln785_1_fu_2318_p2);

assign and_ln785_2_fu_2632_p2 = (xor_ln785_5_fu_2627_p2 & or_ln785_2_fu_2622_p2);

assign and_ln785_3_fu_2932_p2 = (xor_ln785_7_fu_2927_p2 & or_ln785_3_fu_2922_p2);

assign and_ln785_fu_2034_p2 = (xor_ln785_1_fu_2029_p2 & or_ln785_fu_2024_p2);

assign and_ln786_10_fu_1464_p2 = (xor_ln786_7_fu_1458_p2 & tmp_58_fu_1437_p3);

assign and_ln786_11_fu_1550_p2 = (xor_ln786_8_fu_1544_p2 & tmp_60_fu_1524_p3);

assign and_ln786_12_fu_2649_p2 = (xor_ln786_9_fu_2643_p2 & tmp_62_reg_3692);

assign and_ln786_13_fu_1642_p2 = (xor_ln786_3_fu_1636_p2 & tmp_68_fu_1615_p3);

assign and_ln786_14_fu_1728_p2 = (xor_ln786_10_fu_1722_p2 & tmp_70_fu_1702_p3);

assign and_ln786_15_fu_2875_p2 = (xor_ln786_11_fu_2869_p2 & tmp_72_fu_2722_p3);

assign and_ln786_1_fu_2253_p2 = (tmp_56_fu_2179_p3 & select_ln416_1_fu_2245_p3);

assign and_ln786_2_fu_2547_p2 = (tmp_66_fu_2473_p3 & select_ln416_2_fu_2539_p3);

assign and_ln786_3_fu_2857_p2 = (tmp_76_fu_2777_p3 & select_ln416_3_fu_2843_p3);

assign and_ln786_4_fu_1170_p2 = (xor_ln786_1_fu_1164_p2 & tmp_40_fu_1144_p3);

assign and_ln786_5_fu_1972_p2 = (tmp_46_fu_1898_p3 & select_ln416_fu_1964_p3);

assign and_ln786_6_fu_2051_p2 = (xor_ln786_2_fu_2045_p2 & tmp_42_reg_3556);

assign and_ln786_7_fu_1274_p2 = (xor_ln786_4_fu_1268_p2 & tmp_48_fu_1247_p3);

assign and_ln786_8_fu_1360_p2 = (xor_ln786_5_fu_1354_p2 & tmp_50_fu_1334_p3);

assign and_ln786_9_fu_2345_p2 = (xor_ln786_6_fu_2339_p2 & tmp_52_reg_3621);

assign and_ln786_fu_1084_p2 = (xor_ln786_fu_1078_p2 & tmp_38_fu_1057_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp419 = (((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp449 = (((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = (((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp350 = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = (((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001_ignoreCallOp388 = (((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)))) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter2 = (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter2_ignore_call150 = (((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter1_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter2 = (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter2_ignore_call150 = (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter2 = (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter2_ignore_call150 = (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter2 = (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter2_ignore_call150 = (((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_V_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == BETA_RVALID)) | ((tmp_37_reg_3117_pp0_iter2_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter3_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter3_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter3_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter4_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter4_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter4_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter4_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter5_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter5_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b0 == OUT_r_AWREADY));
end

assign ap_block_state24_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage2_iter5_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_io = (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b0 == OUT_r_WREADY)) | ((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b0 == OUT_r_AWREADY)));
end

assign ap_block_state25_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage3_iter5_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = (((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b0 == OUT_r_WREADY)) | ((tmp_37_reg_3117_pp0_iter5_reg == 1'd0) & (1'b0 == OUT_r_AWREADY)));
end

assign ap_block_state26_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter6_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = (((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_WREADY)) | ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_AWREADY)));
end

assign ap_block_state27_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter6_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_WREADY));
end

assign ap_block_state28_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter6_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage3_iter6_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_pp0_stage0_iter7 = ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state30_pp0_stage0_iter7_ignore_call150 = ((tmp_37_reg_3117_pp0_iter6_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state31_pp0_stage1_iter7 = ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state31_pp0_stage1_iter7_ignore_call150 = ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state32_pp0_stage2_iter7 = ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state32_pp0_stage2_iter7_ignore_call150 = ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state33_pp0_stage3_iter7 = ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state33_pp0_stage3_iter7_ignore_call150 = ((tmp_37_reg_3117_pp0_iter7_reg == 1'd0) & (1'b0 == OUT_r_BVALID));
end

always @ (*) begin
    ap_block_state3_io = (((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_V_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_M_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == GAMMA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == BETA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == IN_r_ARREADY)));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_V_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_M_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == GAMMA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == BETA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == IN_r_ARREADY)));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_V_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_M_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == GAMMA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == BETA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == IN_r_ARREADY)));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_V_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == M_M_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == GAMMA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == BETA_ARREADY)) | ((tmp_37_reg_3117 == 1'd0) & (1'b0 == IN_r_ARREADY)));
end

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1_ignore_call150 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1_ignore_call150 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1250 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001));
end

always @ (*) begin
    ap_condition_1586 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1619 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_1624 = ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_960_p2 = (6'd4 + i_0_reg_544);

assign icmp_ln768_1_fu_2219_p2 = ((tmp_4_fu_2203_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_2513_p2 = ((tmp_6_fu_2497_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_2817_p2 = ((tmp_8_fu_2801_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_1938_p2 = ((tmp_2_fu_1922_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_1932_p2 = ((tmp_2_fu_1922_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_2197_p2 = ((tmp_3_fu_2187_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_2213_p2 = ((tmp_4_fu_2203_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_2491_p2 = ((tmp_5_fu_2481_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_2507_p2 = ((tmp_6_fu_2497_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_2795_p2 = ((tmp_7_fu_2785_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_2811_p2 = ((tmp_8_fu_2801_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1916_p2 = ((tmp_1_fu_1906_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign in_m_1_V_fu_1036_p1 = IN_r_RDATA[15:0];

assign in_m_2_V_fu_1226_p1 = IN_r_RDATA[15:0];

assign in_m_3_V_fu_1416_p1 = IN_r_RDATA[15:0];

assign moving_mean_m_1_V_fu_1040_p1 = M_M_RDATA[15:0];

assign moving_mean_m_2_V_fu_1230_p1 = M_M_RDATA[15:0];

assign moving_mean_m_3_V_fu_1420_p1 = M_M_RDATA[15:0];

assign moving_variance_m_1_fu_1044_p1 = M_V_RDATA[15:0];

assign moving_variance_m_2_fu_1234_p1 = M_V_RDATA[15:0];

assign moving_variance_m_3_fu_1424_p1 = M_V_RDATA[15:0];

assign mul_ln1118_1_fu_1789_p0 = select_ln340_3_reg_3434_pp0_iter4_reg;

assign mul_ln1118_1_fu_1789_p1 = mul_ln1118_reg_3531;

assign mul_ln1118_1_fu_1789_p2 = ($signed(mul_ln1118_1_fu_1789_p0) * $signed(mul_ln1118_1_fu_1789_p1));

assign mul_ln1118_2_fu_3027_p0 = mul_ln1118_2_fu_3027_p00;

assign mul_ln1118_2_fu_3027_p00 = reg_561;

assign mul_ln1118_3_fu_1984_p0 = select_ln340_14_reg_3470_pp0_iter4_reg;

assign mul_ln1118_3_fu_1984_p1 = mul_ln1118_2_reg_3551;

assign mul_ln1118_3_fu_1984_p2 = ($signed(mul_ln1118_3_fu_1984_p0) * $signed(mul_ln1118_3_fu_1984_p1));

assign mul_ln1118_4_fu_3033_p0 = mul_ln1118_4_fu_3033_p00;

assign mul_ln1118_4_fu_3033_p00 = reg_561;

assign mul_ln1118_5_fu_2265_p0 = select_ln340_18_reg_3506_pp0_iter4_reg;

assign mul_ln1118_5_fu_2265_p1 = mul_ln1118_4_reg_3611;

assign mul_ln1118_5_fu_2265_p2 = ($signed(mul_ln1118_5_fu_2265_p0) * $signed(mul_ln1118_5_fu_2265_p1));

assign mul_ln1118_6_fu_3039_p0 = mul_ln1118_6_fu_3039_p00;

assign mul_ln1118_6_fu_3039_p00 = reg_561;

assign mul_ln1118_7_fu_2559_p0 = select_ln340_22_reg_3526_pp0_iter5_reg;

assign mul_ln1118_7_fu_2559_p1 = mul_ln1118_6_reg_3676;

assign mul_ln1118_7_fu_2559_p2 = ($signed(mul_ln1118_7_fu_2559_p0) * $signed(mul_ln1118_7_fu_2559_p1));

assign mul_ln1118_fu_3021_p0 = mul_ln1118_fu_3021_p00;

assign mul_ln1118_fu_3021_p00 = reg_561;

assign or_ln340_10_fu_1482_p2 = (xor_ln340_8_fu_1476_p2 | tmp_59_fu_1450_p3);

assign or_ln340_11_fu_1568_p2 = (xor_ln340_2_fu_1562_p2 | tmp_61_fu_1536_p3);

assign or_ln340_12_fu_2654_p2 = (and_ln786_12_fu_2649_p2 | and_ln785_2_fu_2632_p2);

assign or_ln340_13_fu_2660_p2 = (xor_ln785_5_fu_2627_p2 | and_ln786_2_reg_3726);

assign or_ln340_14_fu_2665_p2 = (or_ln340_13_fu_2660_p2 | and_ln781_2_fu_2612_p2);

assign or_ln340_15_fu_1660_p2 = (xor_ln340_10_fu_1654_p2 | tmp_69_fu_1628_p3);

assign or_ln340_16_fu_1746_p2 = (xor_ln340_3_fu_1740_p2 | tmp_71_fu_1714_p3);

assign or_ln340_17_fu_2938_p2 = (and_ln786_15_reg_3799 | and_ln785_3_fu_2932_p2);

assign or_ln340_18_fu_2943_p2 = (xor_ln785_7_fu_2927_p2 | and_ln786_3_reg_3794);

assign or_ln340_19_fu_2948_p2 = (or_ln340_18_fu_2943_p2 | and_ln781_3_reg_3789);

assign or_ln340_1_fu_1188_p2 = (xor_ln340_1_fu_1182_p2 | tmp_41_fu_1156_p3);

assign or_ln340_2_fu_2056_p2 = (and_ln786_6_fu_2051_p2 | and_ln785_fu_2034_p2);

assign or_ln340_3_fu_2062_p2 = (xor_ln785_1_fu_2029_p2 | and_ln786_5_reg_3590);

assign or_ln340_4_fu_2067_p2 = (or_ln340_3_fu_2062_p2 | and_ln781_fu_2014_p2);

assign or_ln340_5_fu_1292_p2 = (xor_ln340_5_fu_1286_p2 | tmp_49_fu_1260_p3);

assign or_ln340_6_fu_1378_p2 = (xor_ln340_6_fu_1372_p2 | tmp_51_fu_1346_p3);

assign or_ln340_7_fu_2350_p2 = (and_ln786_9_fu_2345_p2 | and_ln785_1_fu_2328_p2);

assign or_ln340_8_fu_2356_p2 = (xor_ln785_3_fu_2323_p2 | and_ln786_1_reg_3655);

assign or_ln340_9_fu_2361_p2 = (or_ln340_8_fu_2356_p2 | and_ln781_1_fu_2308_p2);

assign or_ln340_fu_1102_p2 = (xor_ln340_fu_1096_p2 | tmp_39_fu_1070_p3);

assign or_ln785_1_fu_2318_p2 = (xor_ln785_2_fu_2312_p2 | tmp_56_reg_3639);

assign or_ln785_2_fu_2622_p2 = (xor_ln785_4_fu_2616_p2 | tmp_66_reg_3710);

assign or_ln785_3_fu_2922_p2 = (xor_ln785_6_fu_2916_p2 | tmp_76_reg_3774);

assign or_ln785_fu_2024_p2 = (xor_ln785_fu_2018_p2 | tmp_46_reg_3574);

assign or_ln786_1_fu_2334_p2 = (and_ln786_1_reg_3655 | and_ln781_1_fu_2308_p2);

assign or_ln786_2_fu_2638_p2 = (and_ln786_2_reg_3726 | and_ln781_2_fu_2612_p2);

assign or_ln786_3_fu_2863_p2 = (and_ln786_3_fu_2857_p2 | and_ln781_3_fu_2851_p2);

assign or_ln786_fu_2040_p2 = (and_ln786_5_reg_3590 | and_ln781_fu_2014_p2);

assign or_ln91_1_fu_825_p2 = (trunc_ln321_reg_3151 | 5'd2);

assign or_ln91_2_fu_909_p2 = (trunc_ln321_reg_3151 | 5'd3);

assign or_ln91_fu_740_p2 = (trunc_ln321_fu_686_p1 | 5'd1);

assign p_cast31_fu_631_p1 = tmp_35_fu_621_p4;

assign p_cast32_fu_617_p1 = tmp_34_fu_607_p4;

assign p_cast33_fu_603_p1 = tmp_33_fu_593_p4;

assign p_cast34_fu_589_p1 = tmp_32_fu_579_p4;

assign p_cast35_fu_575_p1 = tmp_31_fu_565_p4;

assign p_cast_fu_645_p1 = tmp_36_fu_635_p4;

assign result_0_V_fu_2087_p3 = ((or_ln340_4_fu_2067_p2[0:0] === 1'b1) ? select_ln340_4_fu_2073_p3 : select_ln388_2_fu_2080_p3);

assign result_1_V_fu_2381_p3 = ((or_ln340_9_fu_2361_p2[0:0] === 1'b1) ? select_ln340_7_fu_2367_p3 : select_ln388_5_fu_2374_p3);

assign result_2_V_fu_2685_p3 = ((or_ln340_14_fu_2665_p2[0:0] === 1'b1) ? select_ln340_9_fu_2671_p3 : select_ln388_8_fu_2678_p3);

assign result_pack_0_V_fu_2577_p5 = {{result_pack_0_V_1_fu_188[63:16]}, {result_0_V_reg_3616}};

assign result_pack_1_V_fu_2881_p5 = {{result_pack_1_V_1_fu_192[63:16]}, {result_1_V_reg_3687}};

assign result_pack_2_V_fu_2974_p5 = {{result_pack_2_V_1_fu_196[63:16]}, {result_2_V_reg_3753}};

assign result_pack_3_V_fu_3004_p5 = {{result_pack_3_V_1_fu_200[63:16]}, {select_ln340_23_reg_3811}};

assign select_ln340_10_fu_1666_p3 = ((xor_ln340_14_fu_1648_p2[0:0] === 1'b1) ? 16'd32767 : add_ln703_20_fu_1623_p2);

assign select_ln340_11_fu_2953_p3 = ((or_ln340_17_fu_2938_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_3_reg_3763);

assign select_ln340_13_fu_1384_p3 = ((xor_ln340_11_fu_1366_p2[0:0] === 1'b1) ? 16'd32767 : trunc_ln703_1_fu_1342_p1);

assign select_ln340_14_fu_1400_p3 = ((or_ln340_6_fu_1378_p2[0:0] === 1'b1) ? select_ln340_13_fu_1384_p3 : select_ln388_4_fu_1392_p3);

assign select_ln340_17_fu_1574_p3 = ((xor_ln340_13_fu_1556_p2[0:0] === 1'b1) ? 16'd32767 : trunc_ln703_2_fu_1532_p1);

assign select_ln340_18_fu_1590_p3 = ((or_ln340_11_fu_1568_p2[0:0] === 1'b1) ? select_ln340_17_fu_1574_p3 : select_ln388_7_fu_1582_p3);

assign select_ln340_21_fu_1752_p3 = ((xor_ln340_15_fu_1734_p2[0:0] === 1'b1) ? 16'd32767 : trunc_ln703_3_fu_1710_p1);

assign select_ln340_22_fu_1768_p3 = ((or_ln340_16_fu_1746_p2[0:0] === 1'b1) ? select_ln340_21_fu_1752_p3 : select_ln388_10_fu_1760_p3);

assign select_ln340_23_fu_2966_p3 = ((or_ln340_19_fu_2948_p2[0:0] === 1'b1) ? select_ln340_11_fu_2953_p3 : select_ln388_11_fu_2960_p3);

assign select_ln340_2_fu_1194_p3 = ((xor_ln340_7_fu_1176_p2[0:0] === 1'b1) ? 16'd32767 : trunc_ln703_fu_1152_p1);

assign select_ln340_3_fu_1210_p3 = ((or_ln340_1_fu_1188_p2[0:0] === 1'b1) ? select_ln340_2_fu_1194_p3 : select_ln388_1_fu_1202_p3);

assign select_ln340_4_fu_2073_p3 = ((or_ln340_2_fu_2056_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_reg_3562);

assign select_ln340_5_fu_1298_p3 = ((xor_ln340_9_fu_1280_p2[0:0] === 1'b1) ? 16'd32767 : add_ln703_18_fu_1255_p2);

assign select_ln340_7_fu_2367_p3 = ((or_ln340_7_fu_2350_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_1_reg_3627);

assign select_ln340_8_fu_1488_p3 = ((xor_ln340_12_fu_1470_p2[0:0] === 1'b1) ? 16'd32767 : add_ln703_19_fu_1445_p2);

assign select_ln340_9_fu_2671_p3 = ((or_ln340_12_fu_2654_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_2_reg_3698);

assign select_ln340_fu_1108_p3 = ((xor_ln340_4_fu_1090_p2[0:0] === 1'b1) ? 16'd32767 : add_ln703_fu_1065_p2);

assign select_ln388_10_fu_1760_p3 = ((and_ln786_14_fu_1728_p2[0:0] === 1'b1) ? 16'd32768 : trunc_ln703_3_fu_1710_p1);

assign select_ln388_11_fu_2960_p3 = ((and_ln786_15_reg_3799[0:0] === 1'b1) ? 16'd32768 : add_ln415_3_reg_3763);

assign select_ln388_1_fu_1202_p3 = ((and_ln786_4_fu_1170_p2[0:0] === 1'b1) ? 16'd32768 : trunc_ln703_fu_1152_p1);

assign select_ln388_2_fu_2080_p3 = ((and_ln786_6_fu_2051_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_reg_3562);

assign select_ln388_3_fu_1306_p3 = ((and_ln786_7_fu_1274_p2[0:0] === 1'b1) ? 16'd32768 : add_ln703_18_fu_1255_p2);

assign select_ln388_4_fu_1392_p3 = ((and_ln786_8_fu_1360_p2[0:0] === 1'b1) ? 16'd32768 : trunc_ln703_1_fu_1342_p1);

assign select_ln388_5_fu_2374_p3 = ((and_ln786_9_fu_2345_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_1_reg_3627);

assign select_ln388_6_fu_1496_p3 = ((and_ln786_10_fu_1464_p2[0:0] === 1'b1) ? 16'd32768 : add_ln703_19_fu_1445_p2);

assign select_ln388_7_fu_1582_p3 = ((and_ln786_11_fu_1550_p2[0:0] === 1'b1) ? 16'd32768 : trunc_ln703_2_fu_1532_p1);

assign select_ln388_8_fu_2678_p3 = ((and_ln786_12_fu_2649_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_2_reg_3698);

assign select_ln388_9_fu_1674_p3 = ((and_ln786_13_fu_1642_p2[0:0] === 1'b1) ? 16'd32768 : add_ln703_20_fu_1623_p2);

assign select_ln388_fu_1116_p3 = ((and_ln786_fu_1084_p2[0:0] === 1'b1) ? 16'd32768 : add_ln703_fu_1065_p2);

assign select_ln416_1_fu_2245_p3 = ((and_ln416_1_fu_2173_p2[0:0] === 1'b1) ? and_ln779_1_fu_2239_p2 : icmp_ln879_3_fu_2213_p2);

assign select_ln416_2_fu_2539_p3 = ((and_ln416_2_fu_2467_p2[0:0] === 1'b1) ? and_ln779_2_fu_2533_p2 : icmp_ln879_5_fu_2507_p2);

assign select_ln416_3_fu_2843_p3 = ((and_ln416_3_fu_2771_p2[0:0] === 1'b1) ? and_ln779_3_fu_2837_p2 : icmp_ln879_7_fu_2811_p2);

assign select_ln416_fu_1964_p3 = ((and_ln416_fu_1892_p2[0:0] === 1'b1) ? and_ln779_fu_1958_p2 : icmp_ln879_1_fu_1932_p2);

assign select_ln777_1_fu_2303_p3 = ((and_ln416_1_reg_3633[0:0] === 1'b1) ? icmp_ln879_3_reg_3644 : icmp_ln768_1_reg_3650);

assign select_ln777_2_fu_2607_p3 = ((and_ln416_2_reg_3704[0:0] === 1'b1) ? icmp_ln879_5_reg_3715 : icmp_ln768_2_reg_3721);

assign select_ln777_3_fu_2911_p3 = ((and_ln416_3_reg_3769[0:0] === 1'b1) ? icmp_ln879_7_reg_3779 : icmp_ln768_3_reg_3784);

assign select_ln777_fu_2009_p3 = ((and_ln416_reg_3568[0:0] === 1'b1) ? icmp_ln879_1_reg_3579 : icmp_ln768_reg_3585);

assign sext_ln1192_1_fu_2109_p1 = shl_ln728_1_fu_2098_p3;

assign sext_ln1192_2_fu_2403_p1 = shl_ln728_2_fu_2392_p3;

assign sext_ln1192_3_fu_2707_p1 = shl_ln728_3_fu_2696_p3;

assign sext_ln1192_fu_1828_p1 = shl_ln_fu_1817_p3;

assign sext_ln703_10_fu_1690_p1 = $signed(in_m_3_V_reg_3485);

assign sext_ln703_11_fu_1693_p1 = $signed(moving_mean_m_3_V_reg_3490);

assign sext_ln703_1_fu_1132_p1 = $signed(trunc_ln339_reg_3387);

assign sext_ln703_2_fu_1135_p1 = $signed(trunc_ln339_1_reg_3392);

assign sext_ln703_3_fu_1238_p1 = moving_variance_m_1_reg_3423;

assign sext_ln703_4_fu_1322_p1 = $signed(in_m_1_V_reg_3413);

assign sext_ln703_5_fu_1325_p1 = $signed(moving_mean_m_1_V_reg_3418);

assign sext_ln703_6_fu_1428_p1 = moving_variance_m_2_reg_3459;

assign sext_ln703_7_fu_1512_p1 = $signed(in_m_2_V_reg_3449);

assign sext_ln703_8_fu_1515_p1 = $signed(moving_mean_m_2_V_reg_3454);

assign sext_ln703_9_fu_1606_p1 = moving_variance_m_3_reg_3495;

assign sext_ln703_fu_1048_p1 = trunc_ln339_2_reg_3397;

assign sext_ln727_1_fu_2095_p1 = mul_ln1118_3_reg_3596;

assign sext_ln727_2_fu_2389_p1 = mul_ln1118_5_reg_3661;

assign sext_ln727_3_fu_2693_p1 = mul_ln1118_7_reg_3732;

assign sext_ln727_fu_1814_p1 = mul_ln1118_1_reg_3536;

assign sext_ln728_1_fu_2105_p1 = shl_ln728_1_fu_2098_p3;

assign sext_ln728_2_fu_2399_p1 = shl_ln728_2_fu_2392_p3;

assign sext_ln728_3_fu_2703_p1 = shl_ln728_3_fu_2696_p3;

assign sext_ln728_fu_1824_p1 = shl_ln_fu_1817_p3;

assign shl_ln728_1_fu_2098_p3 = {{trunc_ln728_1_reg_3444_pp0_iter5_reg}, {20'd0}};

assign shl_ln728_2_fu_2392_p3 = {{trunc_ln728_2_reg_3480_pp0_iter5_reg}, {20'd0}};

assign shl_ln728_3_fu_2696_p3 = {{trunc_ln728_3_reg_3516_pp0_iter5_reg}, {20'd0}};

assign shl_ln_fu_1817_p3 = {{trunc_ln728_reg_3408_pp0_iter5_reg}, {20'd0}};

assign sub_ln1193_1_fu_1328_p2 = ($signed(sext_ln703_4_fu_1322_p1) - $signed(sext_ln703_5_fu_1325_p1));

assign sub_ln1193_2_fu_1518_p2 = ($signed(sext_ln703_7_fu_1512_p1) - $signed(sext_ln703_8_fu_1515_p1));

assign sub_ln1193_3_fu_1696_p2 = ($signed(sext_ln703_10_fu_1690_p1) - $signed(sext_ln703_11_fu_1693_p1));

assign sub_ln1193_fu_1138_p2 = ($signed(sext_ln703_1_fu_1132_p1) - $signed(sext_ln703_2_fu_1135_p1));

assign tmp_1_fu_1906_p4 = {{add_ln1192_1_fu_1832_p2[46:37]}};

assign tmp_2_fu_1922_p4 = {{add_ln1192_1_fu_1832_p2[46:36]}};

assign tmp_31_fu_565_p4 = {{out_V[31:3]}};

assign tmp_32_fu_579_p4 = {{moving_variance_V[31:3]}};

assign tmp_33_fu_593_p4 = {{moving_mean_V[31:3]}};

assign tmp_34_fu_607_p4 = {{gamma_V[31:3]}};

assign tmp_35_fu_621_p4 = {{beta_V[31:3]}};

assign tmp_36_fu_635_p4 = {{in_V[31:3]}};

assign tmp_37_fu_649_p3 = ap_phi_mux_i_0_phi_fu_548_p4[32'd5];

assign tmp_38_fu_1057_p3 = add_ln1192_fu_1051_p2[32'd16];

assign tmp_39_fu_1070_p3 = add_ln703_fu_1065_p2[32'd15];

assign tmp_3_fu_2187_p4 = {{add_ln1192_3_fu_2113_p2[46:37]}};

assign tmp_40_fu_1144_p3 = sub_ln1193_fu_1138_p2[32'd16];

assign tmp_41_fu_1156_p3 = sub_ln1193_fu_1138_p2[32'd15];

assign tmp_43_fu_1861_p3 = add_ln1192_1_fu_1832_p2[32'd35];

assign tmp_45_fu_1878_p3 = add_ln415_fu_1872_p2[32'd15];

assign tmp_46_fu_1898_p3 = add_ln415_fu_1872_p2[32'd15];

assign tmp_47_fu_1944_p3 = add_ln1192_8_fu_1838_p2[32'd36];

assign tmp_48_fu_1247_p3 = add_ln1192_2_fu_1241_p2[32'd16];

assign tmp_49_fu_1260_p3 = add_ln703_18_fu_1255_p2[32'd15];

assign tmp_4_fu_2203_p4 = {{add_ln1192_3_fu_2113_p2[46:36]}};

assign tmp_50_fu_1334_p3 = sub_ln1193_1_fu_1328_p2[32'd16];

assign tmp_51_fu_1346_p3 = sub_ln1193_1_fu_1328_p2[32'd15];

assign tmp_53_fu_2142_p3 = add_ln1192_3_fu_2113_p2[32'd35];

assign tmp_55_fu_2159_p3 = add_ln415_1_fu_2153_p2[32'd15];

assign tmp_56_fu_2179_p3 = add_ln415_1_fu_2153_p2[32'd15];

assign tmp_57_fu_2225_p3 = add_ln1192_9_fu_2119_p2[32'd36];

assign tmp_58_fu_1437_p3 = add_ln1192_4_fu_1431_p2[32'd16];

assign tmp_59_fu_1450_p3 = add_ln703_19_fu_1445_p2[32'd15];

assign tmp_5_fu_2481_p4 = {{add_ln1192_5_fu_2407_p2[46:37]}};

assign tmp_60_fu_1524_p3 = sub_ln1193_2_fu_1518_p2[32'd16];

assign tmp_61_fu_1536_p3 = sub_ln1193_2_fu_1518_p2[32'd15];

assign tmp_63_fu_2436_p3 = add_ln1192_5_fu_2407_p2[32'd35];

assign tmp_65_fu_2453_p3 = add_ln415_2_fu_2447_p2[32'd15];

assign tmp_66_fu_2473_p3 = add_ln415_2_fu_2447_p2[32'd15];

assign tmp_67_fu_2519_p3 = add_ln1192_10_fu_2413_p2[32'd36];

assign tmp_68_fu_1615_p3 = add_ln1192_6_fu_1609_p2[32'd16];

assign tmp_69_fu_1628_p3 = add_ln703_20_fu_1623_p2[32'd15];

assign tmp_6_fu_2497_p4 = {{add_ln1192_5_fu_2407_p2[46:36]}};

assign tmp_70_fu_1702_p3 = sub_ln1193_3_fu_1696_p2[32'd16];

assign tmp_71_fu_1714_p3 = sub_ln1193_3_fu_1696_p2[32'd15];

assign tmp_72_fu_2722_p3 = add_ln1192_7_fu_2711_p2[32'd46];

assign tmp_73_fu_2740_p3 = add_ln1192_7_fu_2711_p2[32'd35];

assign tmp_75_fu_2757_p3 = add_ln415_3_fu_2751_p2[32'd15];

assign tmp_76_fu_2777_p3 = add_ln415_3_fu_2751_p2[32'd15];

assign tmp_77_fu_2823_p3 = add_ln1192_11_fu_2717_p2[32'd36];

assign tmp_7_fu_2785_p4 = {{add_ln1192_7_fu_2711_p2[46:37]}};

assign tmp_8_fu_2801_p4 = {{add_ln1192_7_fu_2711_p2[46:36]}};

assign trunc_ln1118_1_fu_1218_p1 = GAMMA_RDATA[15:0];

assign trunc_ln1118_2_fu_1408_p1 = GAMMA_RDATA[15:0];

assign trunc_ln1118_3_fu_1598_p1 = GAMMA_RDATA[15:0];

assign trunc_ln1118_fu_1028_p1 = GAMMA_RDATA[15:0];

assign trunc_ln1192_1_fu_1990_p1 = mul_ln1118_3_fu_1984_p2[36:0];

assign trunc_ln1192_2_fu_2271_p1 = mul_ln1118_5_fu_2265_p2[36:0];

assign trunc_ln1192_3_fu_2565_p1 = mul_ln1118_7_fu_2559_p2[36:0];

assign trunc_ln1192_fu_1795_p1 = mul_ln1118_1_fu_1789_p2[36:0];

assign trunc_ln321_fu_686_p1 = i_0_reg_544[4:0];

assign trunc_ln339_1_fu_1020_p1 = M_M_RDATA[15:0];

assign trunc_ln339_2_fu_1024_p1 = M_V_RDATA[15:0];

assign trunc_ln339_fu_1016_p1 = IN_r_RDATA[15:0];

assign trunc_ln4_fu_1851_p4 = {{add_ln1192_1_fu_1832_p2[35:20]}};

assign trunc_ln703_1_fu_1342_p1 = sub_ln1193_1_fu_1328_p2[15:0];

assign trunc_ln703_2_fu_1532_p1 = sub_ln1193_2_fu_1518_p2[15:0];

assign trunc_ln703_3_fu_1710_p1 = sub_ln1193_3_fu_1696_p2[15:0];

assign trunc_ln703_fu_1152_p1 = sub_ln1193_fu_1138_p2[15:0];

assign trunc_ln708_13_fu_2426_p4 = {{add_ln1192_5_fu_2407_p2[35:20]}};

assign trunc_ln708_14_fu_2730_p4 = {{add_ln1192_7_fu_2711_p2[35:20]}};

assign trunc_ln708_s_fu_2132_p4 = {{add_ln1192_3_fu_2113_p2[35:20]}};

assign trunc_ln728_1_fu_1222_p1 = BETA_RDATA[15:0];

assign trunc_ln728_2_fu_1412_p1 = BETA_RDATA[15:0];

assign trunc_ln728_3_fu_1602_p1 = BETA_RDATA[15:0];

assign trunc_ln728_fu_1032_p1 = BETA_RDATA[15:0];

assign x_V_1_fu_1314_p3 = ((or_ln340_5_fu_1292_p2[0:0] === 1'b1) ? select_ln340_5_fu_1298_p3 : select_ln388_3_fu_1306_p3);

assign x_V_2_fu_1504_p3 = ((or_ln340_10_fu_1482_p2[0:0] === 1'b1) ? select_ln340_8_fu_1488_p3 : select_ln388_6_fu_1496_p3);

assign x_V_3_fu_1682_p3 = ((or_ln340_15_fu_1660_p2[0:0] === 1'b1) ? select_ln340_10_fu_1666_p3 : select_ln388_9_fu_1674_p3);

assign x_V_fu_1124_p3 = ((or_ln340_fu_1102_p2[0:0] === 1'b1) ? select_ln340_fu_1108_p3 : select_ln388_fu_1116_p3);

assign xor_ln340_10_fu_1654_p2 = (tmp_68_fu_1615_p3 ^ 1'd1);

assign xor_ln340_11_fu_1366_p2 = (tmp_51_fu_1346_p3 ^ tmp_50_fu_1334_p3);

assign xor_ln340_12_fu_1470_p2 = (tmp_59_fu_1450_p3 ^ tmp_58_fu_1437_p3);

assign xor_ln340_13_fu_1556_p2 = (tmp_61_fu_1536_p3 ^ tmp_60_fu_1524_p3);

assign xor_ln340_14_fu_1648_p2 = (tmp_69_fu_1628_p3 ^ tmp_68_fu_1615_p3);

assign xor_ln340_15_fu_1734_p2 = (tmp_71_fu_1714_p3 ^ tmp_70_fu_1702_p3);

assign xor_ln340_1_fu_1182_p2 = (tmp_40_fu_1144_p3 ^ 1'd1);

assign xor_ln340_2_fu_1562_p2 = (tmp_60_fu_1524_p3 ^ 1'd1);

assign xor_ln340_3_fu_1740_p2 = (tmp_70_fu_1702_p3 ^ 1'd1);

assign xor_ln340_4_fu_1090_p2 = (tmp_39_fu_1070_p3 ^ tmp_38_fu_1057_p3);

assign xor_ln340_5_fu_1286_p2 = (tmp_48_fu_1247_p3 ^ 1'd1);

assign xor_ln340_6_fu_1372_p2 = (tmp_50_fu_1334_p3 ^ 1'd1);

assign xor_ln340_7_fu_1176_p2 = (tmp_41_fu_1156_p3 ^ tmp_40_fu_1144_p3);

assign xor_ln340_8_fu_1476_p2 = (tmp_58_fu_1437_p3 ^ 1'd1);

assign xor_ln340_9_fu_1280_p2 = (tmp_49_fu_1260_p3 ^ tmp_48_fu_1247_p3);

assign xor_ln340_fu_1096_p2 = (tmp_38_fu_1057_p3 ^ 1'd1);

assign xor_ln416_1_fu_2167_p2 = (tmp_55_fu_2159_p3 ^ 1'd1);

assign xor_ln416_2_fu_2461_p2 = (tmp_65_fu_2453_p3 ^ 1'd1);

assign xor_ln416_3_fu_2765_p2 = (tmp_75_fu_2757_p3 ^ 1'd1);

assign xor_ln416_fu_1886_p2 = (tmp_45_fu_1878_p3 ^ 1'd1);

assign xor_ln779_1_fu_2233_p2 = (tmp_57_fu_2225_p3 ^ 1'd1);

assign xor_ln779_2_fu_2527_p2 = (tmp_67_fu_2519_p3 ^ 1'd1);

assign xor_ln779_3_fu_2831_p2 = (tmp_77_fu_2823_p3 ^ 1'd1);

assign xor_ln779_fu_1952_p2 = (tmp_47_fu_1944_p3 ^ 1'd1);

assign xor_ln785_1_fu_2029_p2 = (tmp_42_reg_3556 ^ 1'd1);

assign xor_ln785_2_fu_2312_p2 = (select_ln777_1_fu_2303_p3 ^ 1'd1);

assign xor_ln785_3_fu_2323_p2 = (tmp_52_reg_3621 ^ 1'd1);

assign xor_ln785_4_fu_2616_p2 = (select_ln777_2_fu_2607_p3 ^ 1'd1);

assign xor_ln785_5_fu_2627_p2 = (tmp_62_reg_3692 ^ 1'd1);

assign xor_ln785_6_fu_2916_p2 = (select_ln777_3_fu_2911_p3 ^ 1'd1);

assign xor_ln785_7_fu_2927_p2 = (tmp_72_reg_3758 ^ 1'd1);

assign xor_ln785_fu_2018_p2 = (select_ln777_fu_2009_p3 ^ 1'd1);

assign xor_ln786_10_fu_1722_p2 = (tmp_71_fu_1714_p3 ^ 1'd1);

assign xor_ln786_11_fu_2869_p2 = (or_ln786_3_fu_2863_p2 ^ 1'd1);

assign xor_ln786_1_fu_1164_p2 = (tmp_41_fu_1156_p3 ^ 1'd1);

assign xor_ln786_2_fu_2045_p2 = (or_ln786_fu_2040_p2 ^ 1'd1);

assign xor_ln786_3_fu_1636_p2 = (tmp_69_fu_1628_p3 ^ 1'd1);

assign xor_ln786_4_fu_1268_p2 = (tmp_49_fu_1260_p3 ^ 1'd1);

assign xor_ln786_5_fu_1354_p2 = (tmp_51_fu_1346_p3 ^ 1'd1);

assign xor_ln786_6_fu_2339_p2 = (or_ln786_1_fu_2334_p2 ^ 1'd1);

assign xor_ln786_7_fu_1458_p2 = (tmp_59_fu_1450_p3 ^ 1'd1);

assign xor_ln786_8_fu_1544_p2 = (tmp_61_fu_1536_p3 ^ 1'd1);

assign xor_ln786_9_fu_2643_p2 = (or_ln786_2_fu_2638_p2 ^ 1'd1);

assign xor_ln786_fu_1078_p2 = (tmp_39_fu_1070_p3 ^ 1'd1);

assign zext_ln321_10_fu_805_p1 = add_ln321_8_reg_3207;

assign zext_ln321_11_fu_815_p1 = add_ln321_9_reg_3212;

assign zext_ln321_12_fu_830_p1 = or_ln91_1_fu_825_p2;

assign zext_ln321_13_fu_859_p1 = add_ln321_10_reg_3252;

assign zext_ln321_14_fu_869_p1 = add_ln321_11_reg_3257;

assign zext_ln321_15_fu_879_p1 = add_ln321_12_reg_3262;

assign zext_ln321_16_fu_889_p1 = add_ln321_13_reg_3267;

assign zext_ln321_17_fu_899_p1 = add_ln321_14_reg_3272;

assign zext_ln321_18_fu_914_p1 = or_ln91_2_fu_909_p2;

assign zext_ln321_19_fu_966_p1 = add_ln321_15_reg_3307;

assign zext_ln321_1_fu_690_p1 = add_ln321_reg_3126;

assign zext_ln321_20_fu_976_p1 = add_ln321_16_reg_3312;

assign zext_ln321_21_fu_986_p1 = add_ln321_17_reg_3317;

assign zext_ln321_22_fu_996_p1 = add_ln321_18_reg_3322;

assign zext_ln321_23_fu_1006_p1 = add_ln321_19_reg_3327;

assign zext_ln321_24_fu_2290_p1 = add_ln321_20_reg_3332_pp0_iter4_reg;

assign zext_ln321_25_fu_2589_p1 = add_ln321_21_reg_3337_pp0_iter4_reg;

assign zext_ln321_26_fu_2893_p1 = add_ln321_22_reg_3342_pp0_iter5_reg;

assign zext_ln321_27_fu_2986_p1 = add_ln321_23_reg_3347_pp0_iter5_reg;

assign zext_ln321_2_fu_700_p1 = add_ln321_1_reg_3131;

assign zext_ln321_3_fu_710_p1 = add_ln321_2_reg_3136;

assign zext_ln321_4_fu_720_p1 = add_ln321_3_reg_3141;

assign zext_ln321_5_fu_730_p1 = add_ln321_4_reg_3146;

assign zext_ln321_6_fu_746_p1 = or_ln91_fu_740_p2;

assign zext_ln321_7_fu_775_p1 = add_ln321_5_reg_3192;

assign zext_ln321_8_fu_785_p1 = add_ln321_6_reg_3197;

assign zext_ln321_9_fu_795_p1 = add_ln321_7_reg_3202;

assign zext_ln321_fu_657_p1 = ap_phi_mux_i_0_phi_fu_548_p4;

assign zext_ln415_1_fu_2150_p1 = tmp_54_reg_3606;

assign zext_ln415_2_fu_2444_p1 = tmp_64_reg_3671;

assign zext_ln415_3_fu_2748_p1 = tmp_74_reg_3742;

assign zext_ln415_fu_1869_p1 = tmp_44_reg_3546;

always @ (posedge ap_clk) begin
    p_cast35_reg_3069[29] <= 1'b0;
    p_cast34_reg_3077[29] <= 1'b0;
    p_cast33_reg_3085[29] <= 1'b0;
    p_cast32_reg_3093[29] <= 1'b0;
    p_cast31_reg_3101[29] <= 1'b0;
    p_cast_reg_3109[29] <= 1'b0;
    zext_ln321_reg_3121[29:6] <= 24'b000000000000000000000000;
    zext_ln321_6_reg_3187[0] <= 1'b1;
    zext_ln321_6_reg_3187[29:5] <= 25'b0000000000000000000000000;
    zext_ln321_12_reg_3247[1] <= 1'b1;
    zext_ln321_12_reg_3247[29:5] <= 25'b0000000000000000000000000;
end

endmodule //bn
