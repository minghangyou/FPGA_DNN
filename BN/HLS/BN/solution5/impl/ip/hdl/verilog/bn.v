// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=184,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=1,HLS_SYN_FF=6281,HLS_SYN_LUT=8486,HLS_VERSION=2019_1}" *)

module bn (
        ap_clk,
        ap_rst_n,
        m_axi_IN_r_AWVALID,
        m_axi_IN_r_AWREADY,
        m_axi_IN_r_AWADDR,
        m_axi_IN_r_AWID,
        m_axi_IN_r_AWLEN,
        m_axi_IN_r_AWSIZE,
        m_axi_IN_r_AWBURST,
        m_axi_IN_r_AWLOCK,
        m_axi_IN_r_AWCACHE,
        m_axi_IN_r_AWPROT,
        m_axi_IN_r_AWQOS,
        m_axi_IN_r_AWREGION,
        m_axi_IN_r_AWUSER,
        m_axi_IN_r_WVALID,
        m_axi_IN_r_WREADY,
        m_axi_IN_r_WDATA,
        m_axi_IN_r_WSTRB,
        m_axi_IN_r_WLAST,
        m_axi_IN_r_WID,
        m_axi_IN_r_WUSER,
        m_axi_IN_r_ARVALID,
        m_axi_IN_r_ARREADY,
        m_axi_IN_r_ARADDR,
        m_axi_IN_r_ARID,
        m_axi_IN_r_ARLEN,
        m_axi_IN_r_ARSIZE,
        m_axi_IN_r_ARBURST,
        m_axi_IN_r_ARLOCK,
        m_axi_IN_r_ARCACHE,
        m_axi_IN_r_ARPROT,
        m_axi_IN_r_ARQOS,
        m_axi_IN_r_ARREGION,
        m_axi_IN_r_ARUSER,
        m_axi_IN_r_RVALID,
        m_axi_IN_r_RREADY,
        m_axi_IN_r_RDATA,
        m_axi_IN_r_RLAST,
        m_axi_IN_r_RID,
        m_axi_IN_r_RUSER,
        m_axi_IN_r_RRESP,
        m_axi_IN_r_BVALID,
        m_axi_IN_r_BREADY,
        m_axi_IN_r_BRESP,
        m_axi_IN_r_BID,
        m_axi_IN_r_BUSER,
        m_axi_BETA_AWVALID,
        m_axi_BETA_AWREADY,
        m_axi_BETA_AWADDR,
        m_axi_BETA_AWID,
        m_axi_BETA_AWLEN,
        m_axi_BETA_AWSIZE,
        m_axi_BETA_AWBURST,
        m_axi_BETA_AWLOCK,
        m_axi_BETA_AWCACHE,
        m_axi_BETA_AWPROT,
        m_axi_BETA_AWQOS,
        m_axi_BETA_AWREGION,
        m_axi_BETA_AWUSER,
        m_axi_BETA_WVALID,
        m_axi_BETA_WREADY,
        m_axi_BETA_WDATA,
        m_axi_BETA_WSTRB,
        m_axi_BETA_WLAST,
        m_axi_BETA_WID,
        m_axi_BETA_WUSER,
        m_axi_BETA_ARVALID,
        m_axi_BETA_ARREADY,
        m_axi_BETA_ARADDR,
        m_axi_BETA_ARID,
        m_axi_BETA_ARLEN,
        m_axi_BETA_ARSIZE,
        m_axi_BETA_ARBURST,
        m_axi_BETA_ARLOCK,
        m_axi_BETA_ARCACHE,
        m_axi_BETA_ARPROT,
        m_axi_BETA_ARQOS,
        m_axi_BETA_ARREGION,
        m_axi_BETA_ARUSER,
        m_axi_BETA_RVALID,
        m_axi_BETA_RREADY,
        m_axi_BETA_RDATA,
        m_axi_BETA_RLAST,
        m_axi_BETA_RID,
        m_axi_BETA_RUSER,
        m_axi_BETA_RRESP,
        m_axi_BETA_BVALID,
        m_axi_BETA_BREADY,
        m_axi_BETA_BRESP,
        m_axi_BETA_BID,
        m_axi_BETA_BUSER,
        m_axi_GAMMA_AWVALID,
        m_axi_GAMMA_AWREADY,
        m_axi_GAMMA_AWADDR,
        m_axi_GAMMA_AWID,
        m_axi_GAMMA_AWLEN,
        m_axi_GAMMA_AWSIZE,
        m_axi_GAMMA_AWBURST,
        m_axi_GAMMA_AWLOCK,
        m_axi_GAMMA_AWCACHE,
        m_axi_GAMMA_AWPROT,
        m_axi_GAMMA_AWQOS,
        m_axi_GAMMA_AWREGION,
        m_axi_GAMMA_AWUSER,
        m_axi_GAMMA_WVALID,
        m_axi_GAMMA_WREADY,
        m_axi_GAMMA_WDATA,
        m_axi_GAMMA_WSTRB,
        m_axi_GAMMA_WLAST,
        m_axi_GAMMA_WID,
        m_axi_GAMMA_WUSER,
        m_axi_GAMMA_ARVALID,
        m_axi_GAMMA_ARREADY,
        m_axi_GAMMA_ARADDR,
        m_axi_GAMMA_ARID,
        m_axi_GAMMA_ARLEN,
        m_axi_GAMMA_ARSIZE,
        m_axi_GAMMA_ARBURST,
        m_axi_GAMMA_ARLOCK,
        m_axi_GAMMA_ARCACHE,
        m_axi_GAMMA_ARPROT,
        m_axi_GAMMA_ARQOS,
        m_axi_GAMMA_ARREGION,
        m_axi_GAMMA_ARUSER,
        m_axi_GAMMA_RVALID,
        m_axi_GAMMA_RREADY,
        m_axi_GAMMA_RDATA,
        m_axi_GAMMA_RLAST,
        m_axi_GAMMA_RID,
        m_axi_GAMMA_RUSER,
        m_axi_GAMMA_RRESP,
        m_axi_GAMMA_BVALID,
        m_axi_GAMMA_BREADY,
        m_axi_GAMMA_BRESP,
        m_axi_GAMMA_BID,
        m_axi_GAMMA_BUSER,
        m_axi_M_M_AWVALID,
        m_axi_M_M_AWREADY,
        m_axi_M_M_AWADDR,
        m_axi_M_M_AWID,
        m_axi_M_M_AWLEN,
        m_axi_M_M_AWSIZE,
        m_axi_M_M_AWBURST,
        m_axi_M_M_AWLOCK,
        m_axi_M_M_AWCACHE,
        m_axi_M_M_AWPROT,
        m_axi_M_M_AWQOS,
        m_axi_M_M_AWREGION,
        m_axi_M_M_AWUSER,
        m_axi_M_M_WVALID,
        m_axi_M_M_WREADY,
        m_axi_M_M_WDATA,
        m_axi_M_M_WSTRB,
        m_axi_M_M_WLAST,
        m_axi_M_M_WID,
        m_axi_M_M_WUSER,
        m_axi_M_M_ARVALID,
        m_axi_M_M_ARREADY,
        m_axi_M_M_ARADDR,
        m_axi_M_M_ARID,
        m_axi_M_M_ARLEN,
        m_axi_M_M_ARSIZE,
        m_axi_M_M_ARBURST,
        m_axi_M_M_ARLOCK,
        m_axi_M_M_ARCACHE,
        m_axi_M_M_ARPROT,
        m_axi_M_M_ARQOS,
        m_axi_M_M_ARREGION,
        m_axi_M_M_ARUSER,
        m_axi_M_M_RVALID,
        m_axi_M_M_RREADY,
        m_axi_M_M_RDATA,
        m_axi_M_M_RLAST,
        m_axi_M_M_RID,
        m_axi_M_M_RUSER,
        m_axi_M_M_RRESP,
        m_axi_M_M_BVALID,
        m_axi_M_M_BREADY,
        m_axi_M_M_BRESP,
        m_axi_M_M_BID,
        m_axi_M_M_BUSER,
        m_axi_M_V_AWVALID,
        m_axi_M_V_AWREADY,
        m_axi_M_V_AWADDR,
        m_axi_M_V_AWID,
        m_axi_M_V_AWLEN,
        m_axi_M_V_AWSIZE,
        m_axi_M_V_AWBURST,
        m_axi_M_V_AWLOCK,
        m_axi_M_V_AWCACHE,
        m_axi_M_V_AWPROT,
        m_axi_M_V_AWQOS,
        m_axi_M_V_AWREGION,
        m_axi_M_V_AWUSER,
        m_axi_M_V_WVALID,
        m_axi_M_V_WREADY,
        m_axi_M_V_WDATA,
        m_axi_M_V_WSTRB,
        m_axi_M_V_WLAST,
        m_axi_M_V_WID,
        m_axi_M_V_WUSER,
        m_axi_M_V_ARVALID,
        m_axi_M_V_ARREADY,
        m_axi_M_V_ARADDR,
        m_axi_M_V_ARID,
        m_axi_M_V_ARLEN,
        m_axi_M_V_ARSIZE,
        m_axi_M_V_ARBURST,
        m_axi_M_V_ARLOCK,
        m_axi_M_V_ARCACHE,
        m_axi_M_V_ARPROT,
        m_axi_M_V_ARQOS,
        m_axi_M_V_ARREGION,
        m_axi_M_V_ARUSER,
        m_axi_M_V_RVALID,
        m_axi_M_V_RREADY,
        m_axi_M_V_RDATA,
        m_axi_M_V_RLAST,
        m_axi_M_V_RID,
        m_axi_M_V_RUSER,
        m_axi_M_V_RRESP,
        m_axi_M_V_BVALID,
        m_axi_M_V_BREADY,
        m_axi_M_V_BRESP,
        m_axi_M_V_BID,
        m_axi_M_V_BUSER,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_pp0_stage0 = 14'd256;
parameter    ap_ST_fsm_state54 = 14'd512;
parameter    ap_ST_fsm_state55 = 14'd1024;
parameter    ap_ST_fsm_state56 = 14'd2048;
parameter    ap_ST_fsm_state57 = 14'd4096;
parameter    ap_ST_fsm_state58 = 14'd8192;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BETA_ID_WIDTH = 1;
parameter    C_M_AXI_BETA_ADDR_WIDTH = 32;
parameter    C_M_AXI_BETA_DATA_WIDTH = 32;
parameter    C_M_AXI_BETA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_WUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_RUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_BUSER_WIDTH = 1;
parameter    C_M_AXI_BETA_USER_VALUE = 0;
parameter    C_M_AXI_BETA_PROT_VALUE = 0;
parameter    C_M_AXI_BETA_CACHE_VALUE = 3;
parameter    C_M_AXI_GAMMA_ID_WIDTH = 1;
parameter    C_M_AXI_GAMMA_ADDR_WIDTH = 32;
parameter    C_M_AXI_GAMMA_DATA_WIDTH = 32;
parameter    C_M_AXI_GAMMA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_WUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_RUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_BUSER_WIDTH = 1;
parameter    C_M_AXI_GAMMA_USER_VALUE = 0;
parameter    C_M_AXI_GAMMA_PROT_VALUE = 0;
parameter    C_M_AXI_GAMMA_CACHE_VALUE = 3;
parameter    C_M_AXI_M_M_ID_WIDTH = 1;
parameter    C_M_AXI_M_M_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_M_DATA_WIDTH = 32;
parameter    C_M_AXI_M_M_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_M_USER_VALUE = 0;
parameter    C_M_AXI_M_M_PROT_VALUE = 0;
parameter    C_M_AXI_M_M_CACHE_VALUE = 3;
parameter    C_M_AXI_M_V_ID_WIDTH = 1;
parameter    C_M_AXI_M_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_M_V_DATA_WIDTH = 32;
parameter    C_M_AXI_M_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_M_V_USER_VALUE = 0;
parameter    C_M_AXI_M_V_PROT_VALUE = 0;
parameter    C_M_AXI_M_V_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BETA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GAMMA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_M_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_M_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IN_r_AWVALID;
input   m_axi_IN_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_AWID;
output  [7:0] m_axi_IN_r_AWLEN;
output  [2:0] m_axi_IN_r_AWSIZE;
output  [1:0] m_axi_IN_r_AWBURST;
output  [1:0] m_axi_IN_r_AWLOCK;
output  [3:0] m_axi_IN_r_AWCACHE;
output  [2:0] m_axi_IN_r_AWPROT;
output  [3:0] m_axi_IN_r_AWQOS;
output  [3:0] m_axi_IN_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_IN_r_AWUSER;
output   m_axi_IN_r_WVALID;
input   m_axi_IN_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_IN_r_WSTRB;
output   m_axi_IN_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_IN_r_WUSER;
output   m_axi_IN_r_ARVALID;
input   m_axi_IN_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_ARID;
output  [7:0] m_axi_IN_r_ARLEN;
output  [2:0] m_axi_IN_r_ARSIZE;
output  [1:0] m_axi_IN_r_ARBURST;
output  [1:0] m_axi_IN_r_ARLOCK;
output  [3:0] m_axi_IN_r_ARCACHE;
output  [2:0] m_axi_IN_r_ARPROT;
output  [3:0] m_axi_IN_r_ARQOS;
output  [3:0] m_axi_IN_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_IN_r_ARUSER;
input   m_axi_IN_r_RVALID;
output   m_axi_IN_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_RDATA;
input   m_axi_IN_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_IN_r_RUSER;
input  [1:0] m_axi_IN_r_RRESP;
input   m_axi_IN_r_BVALID;
output   m_axi_IN_r_BREADY;
input  [1:0] m_axi_IN_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_IN_r_BUSER;
output   m_axi_BETA_AWVALID;
input   m_axi_BETA_AWREADY;
output  [C_M_AXI_BETA_ADDR_WIDTH - 1:0] m_axi_BETA_AWADDR;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_AWID;
output  [7:0] m_axi_BETA_AWLEN;
output  [2:0] m_axi_BETA_AWSIZE;
output  [1:0] m_axi_BETA_AWBURST;
output  [1:0] m_axi_BETA_AWLOCK;
output  [3:0] m_axi_BETA_AWCACHE;
output  [2:0] m_axi_BETA_AWPROT;
output  [3:0] m_axi_BETA_AWQOS;
output  [3:0] m_axi_BETA_AWREGION;
output  [C_M_AXI_BETA_AWUSER_WIDTH - 1:0] m_axi_BETA_AWUSER;
output   m_axi_BETA_WVALID;
input   m_axi_BETA_WREADY;
output  [C_M_AXI_BETA_DATA_WIDTH - 1:0] m_axi_BETA_WDATA;
output  [C_M_AXI_BETA_WSTRB_WIDTH - 1:0] m_axi_BETA_WSTRB;
output   m_axi_BETA_WLAST;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_WID;
output  [C_M_AXI_BETA_WUSER_WIDTH - 1:0] m_axi_BETA_WUSER;
output   m_axi_BETA_ARVALID;
input   m_axi_BETA_ARREADY;
output  [C_M_AXI_BETA_ADDR_WIDTH - 1:0] m_axi_BETA_ARADDR;
output  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_ARID;
output  [7:0] m_axi_BETA_ARLEN;
output  [2:0] m_axi_BETA_ARSIZE;
output  [1:0] m_axi_BETA_ARBURST;
output  [1:0] m_axi_BETA_ARLOCK;
output  [3:0] m_axi_BETA_ARCACHE;
output  [2:0] m_axi_BETA_ARPROT;
output  [3:0] m_axi_BETA_ARQOS;
output  [3:0] m_axi_BETA_ARREGION;
output  [C_M_AXI_BETA_ARUSER_WIDTH - 1:0] m_axi_BETA_ARUSER;
input   m_axi_BETA_RVALID;
output   m_axi_BETA_RREADY;
input  [C_M_AXI_BETA_DATA_WIDTH - 1:0] m_axi_BETA_RDATA;
input   m_axi_BETA_RLAST;
input  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_RID;
input  [C_M_AXI_BETA_RUSER_WIDTH - 1:0] m_axi_BETA_RUSER;
input  [1:0] m_axi_BETA_RRESP;
input   m_axi_BETA_BVALID;
output   m_axi_BETA_BREADY;
input  [1:0] m_axi_BETA_BRESP;
input  [C_M_AXI_BETA_ID_WIDTH - 1:0] m_axi_BETA_BID;
input  [C_M_AXI_BETA_BUSER_WIDTH - 1:0] m_axi_BETA_BUSER;
output   m_axi_GAMMA_AWVALID;
input   m_axi_GAMMA_AWREADY;
output  [C_M_AXI_GAMMA_ADDR_WIDTH - 1:0] m_axi_GAMMA_AWADDR;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_AWID;
output  [7:0] m_axi_GAMMA_AWLEN;
output  [2:0] m_axi_GAMMA_AWSIZE;
output  [1:0] m_axi_GAMMA_AWBURST;
output  [1:0] m_axi_GAMMA_AWLOCK;
output  [3:0] m_axi_GAMMA_AWCACHE;
output  [2:0] m_axi_GAMMA_AWPROT;
output  [3:0] m_axi_GAMMA_AWQOS;
output  [3:0] m_axi_GAMMA_AWREGION;
output  [C_M_AXI_GAMMA_AWUSER_WIDTH - 1:0] m_axi_GAMMA_AWUSER;
output   m_axi_GAMMA_WVALID;
input   m_axi_GAMMA_WREADY;
output  [C_M_AXI_GAMMA_DATA_WIDTH - 1:0] m_axi_GAMMA_WDATA;
output  [C_M_AXI_GAMMA_WSTRB_WIDTH - 1:0] m_axi_GAMMA_WSTRB;
output   m_axi_GAMMA_WLAST;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_WID;
output  [C_M_AXI_GAMMA_WUSER_WIDTH - 1:0] m_axi_GAMMA_WUSER;
output   m_axi_GAMMA_ARVALID;
input   m_axi_GAMMA_ARREADY;
output  [C_M_AXI_GAMMA_ADDR_WIDTH - 1:0] m_axi_GAMMA_ARADDR;
output  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_ARID;
output  [7:0] m_axi_GAMMA_ARLEN;
output  [2:0] m_axi_GAMMA_ARSIZE;
output  [1:0] m_axi_GAMMA_ARBURST;
output  [1:0] m_axi_GAMMA_ARLOCK;
output  [3:0] m_axi_GAMMA_ARCACHE;
output  [2:0] m_axi_GAMMA_ARPROT;
output  [3:0] m_axi_GAMMA_ARQOS;
output  [3:0] m_axi_GAMMA_ARREGION;
output  [C_M_AXI_GAMMA_ARUSER_WIDTH - 1:0] m_axi_GAMMA_ARUSER;
input   m_axi_GAMMA_RVALID;
output   m_axi_GAMMA_RREADY;
input  [C_M_AXI_GAMMA_DATA_WIDTH - 1:0] m_axi_GAMMA_RDATA;
input   m_axi_GAMMA_RLAST;
input  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_RID;
input  [C_M_AXI_GAMMA_RUSER_WIDTH - 1:0] m_axi_GAMMA_RUSER;
input  [1:0] m_axi_GAMMA_RRESP;
input   m_axi_GAMMA_BVALID;
output   m_axi_GAMMA_BREADY;
input  [1:0] m_axi_GAMMA_BRESP;
input  [C_M_AXI_GAMMA_ID_WIDTH - 1:0] m_axi_GAMMA_BID;
input  [C_M_AXI_GAMMA_BUSER_WIDTH - 1:0] m_axi_GAMMA_BUSER;
output   m_axi_M_M_AWVALID;
input   m_axi_M_M_AWREADY;
output  [C_M_AXI_M_M_ADDR_WIDTH - 1:0] m_axi_M_M_AWADDR;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_AWID;
output  [7:0] m_axi_M_M_AWLEN;
output  [2:0] m_axi_M_M_AWSIZE;
output  [1:0] m_axi_M_M_AWBURST;
output  [1:0] m_axi_M_M_AWLOCK;
output  [3:0] m_axi_M_M_AWCACHE;
output  [2:0] m_axi_M_M_AWPROT;
output  [3:0] m_axi_M_M_AWQOS;
output  [3:0] m_axi_M_M_AWREGION;
output  [C_M_AXI_M_M_AWUSER_WIDTH - 1:0] m_axi_M_M_AWUSER;
output   m_axi_M_M_WVALID;
input   m_axi_M_M_WREADY;
output  [C_M_AXI_M_M_DATA_WIDTH - 1:0] m_axi_M_M_WDATA;
output  [C_M_AXI_M_M_WSTRB_WIDTH - 1:0] m_axi_M_M_WSTRB;
output   m_axi_M_M_WLAST;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_WID;
output  [C_M_AXI_M_M_WUSER_WIDTH - 1:0] m_axi_M_M_WUSER;
output   m_axi_M_M_ARVALID;
input   m_axi_M_M_ARREADY;
output  [C_M_AXI_M_M_ADDR_WIDTH - 1:0] m_axi_M_M_ARADDR;
output  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_ARID;
output  [7:0] m_axi_M_M_ARLEN;
output  [2:0] m_axi_M_M_ARSIZE;
output  [1:0] m_axi_M_M_ARBURST;
output  [1:0] m_axi_M_M_ARLOCK;
output  [3:0] m_axi_M_M_ARCACHE;
output  [2:0] m_axi_M_M_ARPROT;
output  [3:0] m_axi_M_M_ARQOS;
output  [3:0] m_axi_M_M_ARREGION;
output  [C_M_AXI_M_M_ARUSER_WIDTH - 1:0] m_axi_M_M_ARUSER;
input   m_axi_M_M_RVALID;
output   m_axi_M_M_RREADY;
input  [C_M_AXI_M_M_DATA_WIDTH - 1:0] m_axi_M_M_RDATA;
input   m_axi_M_M_RLAST;
input  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_RID;
input  [C_M_AXI_M_M_RUSER_WIDTH - 1:0] m_axi_M_M_RUSER;
input  [1:0] m_axi_M_M_RRESP;
input   m_axi_M_M_BVALID;
output   m_axi_M_M_BREADY;
input  [1:0] m_axi_M_M_BRESP;
input  [C_M_AXI_M_M_ID_WIDTH - 1:0] m_axi_M_M_BID;
input  [C_M_AXI_M_M_BUSER_WIDTH - 1:0] m_axi_M_M_BUSER;
output   m_axi_M_V_AWVALID;
input   m_axi_M_V_AWREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_M_V_AWADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_AWID;
output  [7:0] m_axi_M_V_AWLEN;
output  [2:0] m_axi_M_V_AWSIZE;
output  [1:0] m_axi_M_V_AWBURST;
output  [1:0] m_axi_M_V_AWLOCK;
output  [3:0] m_axi_M_V_AWCACHE;
output  [2:0] m_axi_M_V_AWPROT;
output  [3:0] m_axi_M_V_AWQOS;
output  [3:0] m_axi_M_V_AWREGION;
output  [C_M_AXI_M_V_AWUSER_WIDTH - 1:0] m_axi_M_V_AWUSER;
output   m_axi_M_V_WVALID;
input   m_axi_M_V_WREADY;
output  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_M_V_WDATA;
output  [C_M_AXI_M_V_WSTRB_WIDTH - 1:0] m_axi_M_V_WSTRB;
output   m_axi_M_V_WLAST;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_WID;
output  [C_M_AXI_M_V_WUSER_WIDTH - 1:0] m_axi_M_V_WUSER;
output   m_axi_M_V_ARVALID;
input   m_axi_M_V_ARREADY;
output  [C_M_AXI_M_V_ADDR_WIDTH - 1:0] m_axi_M_V_ARADDR;
output  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_ARID;
output  [7:0] m_axi_M_V_ARLEN;
output  [2:0] m_axi_M_V_ARSIZE;
output  [1:0] m_axi_M_V_ARBURST;
output  [1:0] m_axi_M_V_ARLOCK;
output  [3:0] m_axi_M_V_ARCACHE;
output  [2:0] m_axi_M_V_ARPROT;
output  [3:0] m_axi_M_V_ARQOS;
output  [3:0] m_axi_M_V_ARREGION;
output  [C_M_AXI_M_V_ARUSER_WIDTH - 1:0] m_axi_M_V_ARUSER;
input   m_axi_M_V_RVALID;
output   m_axi_M_V_RREADY;
input  [C_M_AXI_M_V_DATA_WIDTH - 1:0] m_axi_M_V_RDATA;
input   m_axi_M_V_RLAST;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_RID;
input  [C_M_AXI_M_V_RUSER_WIDTH - 1:0] m_axi_M_V_RUSER;
input  [1:0] m_axi_M_V_RRESP;
input   m_axi_M_V_BVALID;
output   m_axi_M_V_BREADY;
input  [1:0] m_axi_M_V_BRESP;
input  [C_M_AXI_M_V_ID_WIDTH - 1:0] m_axi_M_V_BID;
input  [C_M_AXI_M_V_BUSER_WIDTH - 1:0] m_axi_M_V_BUSER;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_V;
wire   [31:0] beta_V;
wire   [31:0] gamma_V;
wire   [31:0] moving_mean_V;
wire   [31:0] moving_variance_V;
wire   [31:0] out_V;
reg    IN_r_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    IN_r_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln330_reg_952;
reg   [0:0] icmp_ln330_reg_952_pp0_iter8_reg;
reg    BETA_blk_n_AR;
reg    BETA_blk_n_R;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] icmp_ln330_reg_952_pp0_iter10_reg;
reg    GAMMA_blk_n_AR;
reg    GAMMA_blk_n_R;
reg    M_M_blk_n_AR;
reg    M_M_blk_n_R;
reg    M_V_blk_n_AR;
reg    M_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    OUT_r_blk_n_AW;
wire    ap_CS_fsm_state8;
reg    OUT_r_blk_n_W;
reg    ap_enable_reg_pp0_iter44;
reg   [0:0] icmp_ln330_reg_952_pp0_iter43_reg;
reg    OUT_r_blk_n_B;
wire    ap_CS_fsm_state58;
wire    IN_r_AWREADY;
wire    IN_r_WREADY;
reg    IN_r_ARVALID;
wire    IN_r_ARREADY;
wire    IN_r_RVALID;
reg    IN_r_RREADY;
wire   [15:0] IN_r_RDATA;
wire    IN_r_RLAST;
wire   [0:0] IN_r_RID;
wire   [0:0] IN_r_RUSER;
wire   [1:0] IN_r_RRESP;
wire    IN_r_BVALID;
wire   [1:0] IN_r_BRESP;
wire   [0:0] IN_r_BID;
wire   [0:0] IN_r_BUSER;
wire    BETA_AWREADY;
wire    BETA_WREADY;
reg    BETA_ARVALID;
wire    BETA_ARREADY;
wire    BETA_RVALID;
reg    BETA_RREADY;
wire   [15:0] BETA_RDATA;
wire    BETA_RLAST;
wire   [0:0] BETA_RID;
wire   [0:0] BETA_RUSER;
wire   [1:0] BETA_RRESP;
wire    BETA_BVALID;
wire   [1:0] BETA_BRESP;
wire   [0:0] BETA_BID;
wire   [0:0] BETA_BUSER;
wire    GAMMA_AWREADY;
wire    GAMMA_WREADY;
reg    GAMMA_ARVALID;
wire    GAMMA_ARREADY;
wire    GAMMA_RVALID;
reg    GAMMA_RREADY;
wire   [15:0] GAMMA_RDATA;
wire    GAMMA_RLAST;
wire   [0:0] GAMMA_RID;
wire   [0:0] GAMMA_RUSER;
wire   [1:0] GAMMA_RRESP;
wire    GAMMA_BVALID;
wire   [1:0] GAMMA_BRESP;
wire   [0:0] GAMMA_BID;
wire   [0:0] GAMMA_BUSER;
wire    M_M_AWREADY;
wire    M_M_WREADY;
reg    M_M_ARVALID;
wire    M_M_ARREADY;
wire    M_M_RVALID;
reg    M_M_RREADY;
wire   [15:0] M_M_RDATA;
wire    M_M_RLAST;
wire   [0:0] M_M_RID;
wire   [0:0] M_M_RUSER;
wire   [1:0] M_M_RRESP;
wire    M_M_BVALID;
wire   [1:0] M_M_BRESP;
wire   [0:0] M_M_BID;
wire   [0:0] M_M_BUSER;
wire    M_V_AWREADY;
wire    M_V_WREADY;
reg    M_V_ARVALID;
wire    M_V_ARREADY;
wire    M_V_RVALID;
reg    M_V_RREADY;
wire   [15:0] M_V_RDATA;
wire    M_V_RLAST;
wire   [0:0] M_V_RID;
wire   [0:0] M_V_RUSER;
wire   [1:0] M_V_RRESP;
wire    M_V_BVALID;
wire   [1:0] M_V_BRESP;
wire   [0:0] M_V_BID;
wire   [0:0] M_V_BUSER;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [15:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
reg   [7:0] i_0_reg_292;
reg   [31:0] OUT_addr_reg_916;
reg   [31:0] M_V_addr_reg_922;
reg   [31:0] M_M_addr_reg_928;
reg   [31:0] GAMMA_addr_reg_934;
reg   [31:0] BETA_addr_reg_940;
reg   [31:0] IN_addr_reg_946;
wire   [0:0] icmp_ln330_fu_428_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state14_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
reg    ap_block_state18_pp0_stage0_iter9;
wire    ap_block_state19_pp0_stage0_iter10;
reg    ap_block_state20_pp0_stage0_iter11;
wire    ap_block_state21_pp0_stage0_iter12;
wire    ap_block_state22_pp0_stage0_iter13;
wire    ap_block_state23_pp0_stage0_iter14;
wire    ap_block_state24_pp0_stage0_iter15;
wire    ap_block_state25_pp0_stage0_iter16;
wire    ap_block_state26_pp0_stage0_iter17;
wire    ap_block_state27_pp0_stage0_iter18;
wire    ap_block_state28_pp0_stage0_iter19;
wire    ap_block_state29_pp0_stage0_iter20;
wire    ap_block_state30_pp0_stage0_iter21;
wire    ap_block_state31_pp0_stage0_iter22;
wire    ap_block_state32_pp0_stage0_iter23;
wire    ap_block_state33_pp0_stage0_iter24;
wire    ap_block_state34_pp0_stage0_iter25;
wire    ap_block_state35_pp0_stage0_iter26;
wire    ap_block_state36_pp0_stage0_iter27;
wire    ap_block_state37_pp0_stage0_iter28;
wire    ap_block_state38_pp0_stage0_iter29;
wire    ap_block_state39_pp0_stage0_iter30;
wire    ap_block_state40_pp0_stage0_iter31;
wire    ap_block_state41_pp0_stage0_iter32;
wire    ap_block_state42_pp0_stage0_iter33;
wire    ap_block_state43_pp0_stage0_iter34;
wire    ap_block_state44_pp0_stage0_iter35;
wire    ap_block_state45_pp0_stage0_iter36;
wire    ap_block_state46_pp0_stage0_iter37;
wire    ap_block_state47_pp0_stage0_iter38;
wire    ap_block_state48_pp0_stage0_iter39;
wire    ap_block_state49_pp0_stage0_iter40;
wire    ap_block_state50_pp0_stage0_iter41;
wire    ap_block_state51_pp0_stage0_iter42;
wire    ap_block_state52_pp0_stage0_iter43;
wire    ap_block_state53_pp0_stage0_iter44;
reg    ap_block_state53_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln330_reg_952_pp0_iter1_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter2_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter3_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter4_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter5_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter6_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter7_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter9_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter11_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter12_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter13_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter14_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter15_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter16_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter17_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter18_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter19_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter20_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter21_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter22_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter23_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter24_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter25_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter26_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter27_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter28_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter29_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter30_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter31_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter32_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter33_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter34_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter35_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter36_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter37_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter38_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter39_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter40_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter41_reg;
reg   [0:0] icmp_ln330_reg_952_pp0_iter42_reg;
wire   [7:0] i_fu_434_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [15:0] p_Val2_s_reg_961;
wire   [15:0] tmp_num_V_fu_516_p3;
reg   [15:0] tmp_num_V_reg_967;
reg  signed [15:0] p_Val2_12_reg_972;
reg  signed [15:0] p_Val2_25_reg_977;
reg  signed [15:0] p_Val2_15_reg_982;
wire  signed [32:0] grp_fu_903_p3;
reg  signed [32:0] r_V_3_reg_987;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] p_Result_6_reg_993;
reg   [15:0] p_Val2_17_reg_999;
reg   [0:0] tmp_35_reg_1004;
reg   [5:0] p_Result_s_reg_1009;
reg   [6:0] p_Result_1_reg_1014;
reg   [15:0] p_Val2_20_reg_1020;
wire   [12:0] grp_sqrt_fixed_16_6_s_fu_303_ap_return;
reg   [12:0] x_sqrt_V_reg_1025;
wire   [15:0] norm_V_fu_753_p3;
reg   [15:0] norm_V_reg_1030;
wire   [15:0] p_Val2_23_fu_798_p1;
reg   [15:0] p_Val2_23_reg_1045;
wire   [0:0] overflow_1_fu_838_p2;
reg   [0:0] overflow_1_reg_1051;
wire   [0:0] underflow_2_fu_862_p2;
reg   [0:0] underflow_2_reg_1057;
wire   [15:0] tmp_V_fu_895_p3;
reg   [15:0] tmp_V_reg_1064;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    grp_sqrt_fixed_16_6_s_fu_303_ap_ce;
wire    ap_block_state9_pp0_stage0_iter0_ignore_call20;
reg    ap_block_state10_pp0_stage0_iter1_ignore_call20;
wire    ap_block_state11_pp0_stage0_iter2_ignore_call20;
wire    ap_block_state12_pp0_stage0_iter3_ignore_call20;
wire    ap_block_state13_pp0_stage0_iter4_ignore_call20;
wire    ap_block_state14_pp0_stage0_iter5_ignore_call20;
wire    ap_block_state15_pp0_stage0_iter6_ignore_call20;
wire    ap_block_state16_pp0_stage0_iter7_ignore_call20;
wire    ap_block_state17_pp0_stage0_iter8_ignore_call20;
reg    ap_block_state18_pp0_stage0_iter9_ignore_call20;
wire    ap_block_state19_pp0_stage0_iter10_ignore_call20;
reg    ap_block_state20_pp0_stage0_iter11_ignore_call20;
wire    ap_block_state21_pp0_stage0_iter12_ignore_call20;
wire    ap_block_state22_pp0_stage0_iter13_ignore_call20;
wire    ap_block_state23_pp0_stage0_iter14_ignore_call20;
wire    ap_block_state24_pp0_stage0_iter15_ignore_call20;
wire    ap_block_state25_pp0_stage0_iter16_ignore_call20;
wire    ap_block_state26_pp0_stage0_iter17_ignore_call20;
wire    ap_block_state27_pp0_stage0_iter18_ignore_call20;
wire    ap_block_state28_pp0_stage0_iter19_ignore_call20;
wire    ap_block_state29_pp0_stage0_iter20_ignore_call20;
wire    ap_block_state30_pp0_stage0_iter21_ignore_call20;
wire    ap_block_state31_pp0_stage0_iter22_ignore_call20;
wire    ap_block_state32_pp0_stage0_iter23_ignore_call20;
wire    ap_block_state33_pp0_stage0_iter24_ignore_call20;
wire    ap_block_state34_pp0_stage0_iter25_ignore_call20;
wire    ap_block_state35_pp0_stage0_iter26_ignore_call20;
wire    ap_block_state36_pp0_stage0_iter27_ignore_call20;
wire    ap_block_state37_pp0_stage0_iter28_ignore_call20;
wire    ap_block_state38_pp0_stage0_iter29_ignore_call20;
wire    ap_block_state39_pp0_stage0_iter30_ignore_call20;
wire    ap_block_state40_pp0_stage0_iter31_ignore_call20;
wire    ap_block_state41_pp0_stage0_iter32_ignore_call20;
wire    ap_block_state42_pp0_stage0_iter33_ignore_call20;
wire    ap_block_state43_pp0_stage0_iter34_ignore_call20;
wire    ap_block_state44_pp0_stage0_iter35_ignore_call20;
wire    ap_block_state45_pp0_stage0_iter36_ignore_call20;
wire    ap_block_state46_pp0_stage0_iter37_ignore_call20;
wire    ap_block_state47_pp0_stage0_iter38_ignore_call20;
wire    ap_block_state48_pp0_stage0_iter39_ignore_call20;
wire    ap_block_state49_pp0_stage0_iter40_ignore_call20;
wire    ap_block_state50_pp0_stage0_iter41_ignore_call20;
wire    ap_block_state51_pp0_stage0_iter42_ignore_call20;
wire    ap_block_state52_pp0_stage0_iter43_ignore_call20;
wire    ap_block_state53_pp0_stage0_iter44_ignore_call20;
reg    ap_block_pp0_stage0_11001_ignoreCallOp159;
wire   [63:0] empty_fu_318_p1;
wire   [63:0] empty_26_fu_338_p1;
wire   [63:0] empty_27_fu_358_p1;
wire   [63:0] empty_28_fu_378_p1;
wire   [63:0] empty_29_fu_398_p1;
wire   [63:0] empty_30_fu_418_p1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] out_V1_fu_308_p4;
wire   [30:0] moving_variance_V9_fu_328_p4;
wire   [30:0] moving_mean_V7_fu_348_p4;
wire   [30:0] gamma_V5_fu_368_p4;
wire   [30:0] beta_V3_fu_388_p4;
wire   [30:0] in_V1_fu_408_p4;
wire  signed [16:0] lhs_V_fu_440_p1;
wire   [16:0] ret_V_10_fu_443_p2;
wire   [15:0] p_Val2_10_fu_457_p2;
wire   [0:0] p_Result_5_fu_462_p3;
wire   [0:0] p_Result_4_fu_449_p3;
wire   [0:0] xor_ln786_fu_470_p2;
wire   [0:0] xor_ln340_fu_488_p2;
wire   [0:0] xor_ln340_1_fu_482_p2;
wire   [0:0] underflow_fu_476_p2;
wire   [0:0] or_ln340_fu_494_p2;
wire   [15:0] select_ln340_fu_500_p3;
wire   [15:0] select_ln388_fu_508_p3;
wire   [15:0] zext_ln415_fu_581_p1;
wire   [15:0] p_Val2_18_fu_584_p2;
wire   [0:0] tmp_36_fu_589_p3;
wire   [0:0] p_Result_7_fu_574_p3;
wire   [0:0] xor_ln416_fu_597_p2;
wire   [0:0] carry_1_fu_603_p2;
wire   [0:0] Range1_all_ones_fu_622_p2;
wire   [0:0] Range1_all_zeros_fu_627_p2;
wire   [0:0] tmp_38_fu_640_p3;
wire   [0:0] Range2_all_ones_fu_617_p2;
wire   [0:0] xor_ln779_fu_647_p2;
wire   [0:0] and_ln779_fu_653_p2;
wire   [0:0] deleted_zeros_fu_632_p3;
wire   [0:0] p_Result_8_fu_609_p3;
wire   [0:0] xor_ln785_fu_673_p2;
wire   [0:0] or_ln785_fu_679_p2;
wire   [0:0] xor_ln785_1_fu_685_p2;
wire   [0:0] deleted_ones_fu_659_p3;
wire   [0:0] and_ln781_fu_667_p2;
wire   [0:0] and_ln786_fu_696_p2;
wire   [0:0] or_ln786_1_fu_702_p2;
wire   [0:0] xor_ln786_1_fu_708_p2;
wire   [0:0] underflow_1_fu_714_p2;
wire   [0:0] overflow_fu_690_p2;
wire   [0:0] or_ln340_2_fu_725_p2;
wire   [0:0] or_ln340_1_fu_719_p2;
wire   [0:0] or_ln340_3_fu_731_p2;
wire   [15:0] select_ln340_1_fu_737_p3;
wire   [15:0] select_ln388_1_fu_745_p3;
wire  signed [16:0] lhs_V_2_fu_761_p1;
wire  signed [16:0] rhs_V_1_fu_764_p1;
wire   [16:0] ret_V_11_fu_767_p2;
wire   [26:0] grp_fu_784_p0;
wire   [13:0] grp_fu_784_p1;
wire   [26:0] grp_fu_784_p2;
wire   [10:0] tmp_1_fu_810_p4;
wire   [0:0] p_Result_10_fu_802_p3;
wire   [0:0] icmp_ln785_fu_820_p2;
wire   [0:0] p_Result_9_fu_790_p3;
wire   [0:0] or_ln785_1_fu_826_p2;
wire   [0:0] xor_ln785_2_fu_832_p2;
wire   [0:0] icmp_ln786_fu_850_p2;
wire   [0:0] xor_ln786_2_fu_844_p2;
wire   [0:0] or_ln786_fu_856_p2;
wire   [0:0] xor_ln340_2_fu_872_p2;
wire   [0:0] or_ln340_4_fu_868_p2;
wire   [0:0] or_ln340_5_fu_877_p2;
wire   [15:0] select_ln340_2_fu_882_p3;
wire   [15:0] select_ln388_2_fu_889_p3;
reg    grp_fu_784_ce;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [26:0] grp_fu_784_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
end

bn_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
bn_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_V(in_V),
    .beta_V(beta_V),
    .gamma_V(gamma_V),
    .moving_mean_V(moving_mean_V),
    .moving_variance_V(moving_variance_V),
    .out_V(out_V)
);

bn_IN_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
bn_IN_r_m_axi_U(
    .AWVALID(m_axi_IN_r_AWVALID),
    .AWREADY(m_axi_IN_r_AWREADY),
    .AWADDR(m_axi_IN_r_AWADDR),
    .AWID(m_axi_IN_r_AWID),
    .AWLEN(m_axi_IN_r_AWLEN),
    .AWSIZE(m_axi_IN_r_AWSIZE),
    .AWBURST(m_axi_IN_r_AWBURST),
    .AWLOCK(m_axi_IN_r_AWLOCK),
    .AWCACHE(m_axi_IN_r_AWCACHE),
    .AWPROT(m_axi_IN_r_AWPROT),
    .AWQOS(m_axi_IN_r_AWQOS),
    .AWREGION(m_axi_IN_r_AWREGION),
    .AWUSER(m_axi_IN_r_AWUSER),
    .WVALID(m_axi_IN_r_WVALID),
    .WREADY(m_axi_IN_r_WREADY),
    .WDATA(m_axi_IN_r_WDATA),
    .WSTRB(m_axi_IN_r_WSTRB),
    .WLAST(m_axi_IN_r_WLAST),
    .WID(m_axi_IN_r_WID),
    .WUSER(m_axi_IN_r_WUSER),
    .ARVALID(m_axi_IN_r_ARVALID),
    .ARREADY(m_axi_IN_r_ARREADY),
    .ARADDR(m_axi_IN_r_ARADDR),
    .ARID(m_axi_IN_r_ARID),
    .ARLEN(m_axi_IN_r_ARLEN),
    .ARSIZE(m_axi_IN_r_ARSIZE),
    .ARBURST(m_axi_IN_r_ARBURST),
    .ARLOCK(m_axi_IN_r_ARLOCK),
    .ARCACHE(m_axi_IN_r_ARCACHE),
    .ARPROT(m_axi_IN_r_ARPROT),
    .ARQOS(m_axi_IN_r_ARQOS),
    .ARREGION(m_axi_IN_r_ARREGION),
    .ARUSER(m_axi_IN_r_ARUSER),
    .RVALID(m_axi_IN_r_RVALID),
    .RREADY(m_axi_IN_r_RREADY),
    .RDATA(m_axi_IN_r_RDATA),
    .RLAST(m_axi_IN_r_RLAST),
    .RID(m_axi_IN_r_RID),
    .RUSER(m_axi_IN_r_RUSER),
    .RRESP(m_axi_IN_r_RRESP),
    .BVALID(m_axi_IN_r_BVALID),
    .BREADY(m_axi_IN_r_BREADY),
    .BRESP(m_axi_IN_r_BRESP),
    .BID(m_axi_IN_r_BID),
    .BUSER(m_axi_IN_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IN_r_ARVALID),
    .I_ARREADY(IN_r_ARREADY),
    .I_ARADDR(IN_addr_reg_946),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IN_r_RVALID),
    .I_RREADY(IN_r_RREADY),
    .I_RDATA(IN_r_RDATA),
    .I_RID(IN_r_RID),
    .I_RUSER(IN_r_RUSER),
    .I_RRESP(IN_r_RRESP),
    .I_RLAST(IN_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IN_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IN_r_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(IN_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IN_r_BRESP),
    .I_BID(IN_r_BID),
    .I_BUSER(IN_r_BUSER)
);

bn_BETA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BETA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BETA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BETA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BETA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BETA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BETA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BETA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BETA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BETA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BETA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BETA_CACHE_VALUE ))
bn_BETA_m_axi_U(
    .AWVALID(m_axi_BETA_AWVALID),
    .AWREADY(m_axi_BETA_AWREADY),
    .AWADDR(m_axi_BETA_AWADDR),
    .AWID(m_axi_BETA_AWID),
    .AWLEN(m_axi_BETA_AWLEN),
    .AWSIZE(m_axi_BETA_AWSIZE),
    .AWBURST(m_axi_BETA_AWBURST),
    .AWLOCK(m_axi_BETA_AWLOCK),
    .AWCACHE(m_axi_BETA_AWCACHE),
    .AWPROT(m_axi_BETA_AWPROT),
    .AWQOS(m_axi_BETA_AWQOS),
    .AWREGION(m_axi_BETA_AWREGION),
    .AWUSER(m_axi_BETA_AWUSER),
    .WVALID(m_axi_BETA_WVALID),
    .WREADY(m_axi_BETA_WREADY),
    .WDATA(m_axi_BETA_WDATA),
    .WSTRB(m_axi_BETA_WSTRB),
    .WLAST(m_axi_BETA_WLAST),
    .WID(m_axi_BETA_WID),
    .WUSER(m_axi_BETA_WUSER),
    .ARVALID(m_axi_BETA_ARVALID),
    .ARREADY(m_axi_BETA_ARREADY),
    .ARADDR(m_axi_BETA_ARADDR),
    .ARID(m_axi_BETA_ARID),
    .ARLEN(m_axi_BETA_ARLEN),
    .ARSIZE(m_axi_BETA_ARSIZE),
    .ARBURST(m_axi_BETA_ARBURST),
    .ARLOCK(m_axi_BETA_ARLOCK),
    .ARCACHE(m_axi_BETA_ARCACHE),
    .ARPROT(m_axi_BETA_ARPROT),
    .ARQOS(m_axi_BETA_ARQOS),
    .ARREGION(m_axi_BETA_ARREGION),
    .ARUSER(m_axi_BETA_ARUSER),
    .RVALID(m_axi_BETA_RVALID),
    .RREADY(m_axi_BETA_RREADY),
    .RDATA(m_axi_BETA_RDATA),
    .RLAST(m_axi_BETA_RLAST),
    .RID(m_axi_BETA_RID),
    .RUSER(m_axi_BETA_RUSER),
    .RRESP(m_axi_BETA_RRESP),
    .BVALID(m_axi_BETA_BVALID),
    .BREADY(m_axi_BETA_BREADY),
    .BRESP(m_axi_BETA_BRESP),
    .BID(m_axi_BETA_BID),
    .BUSER(m_axi_BETA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(BETA_ARVALID),
    .I_ARREADY(BETA_ARREADY),
    .I_ARADDR(BETA_addr_reg_940),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(BETA_RVALID),
    .I_RREADY(BETA_RREADY),
    .I_RDATA(BETA_RDATA),
    .I_RID(BETA_RID),
    .I_RUSER(BETA_RUSER),
    .I_RRESP(BETA_RRESP),
    .I_RLAST(BETA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(BETA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(BETA_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(BETA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(BETA_BRESP),
    .I_BID(BETA_BID),
    .I_BUSER(BETA_BUSER)
);

bn_GAMMA_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GAMMA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GAMMA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GAMMA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GAMMA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GAMMA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GAMMA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GAMMA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GAMMA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GAMMA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GAMMA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GAMMA_CACHE_VALUE ))
bn_GAMMA_m_axi_U(
    .AWVALID(m_axi_GAMMA_AWVALID),
    .AWREADY(m_axi_GAMMA_AWREADY),
    .AWADDR(m_axi_GAMMA_AWADDR),
    .AWID(m_axi_GAMMA_AWID),
    .AWLEN(m_axi_GAMMA_AWLEN),
    .AWSIZE(m_axi_GAMMA_AWSIZE),
    .AWBURST(m_axi_GAMMA_AWBURST),
    .AWLOCK(m_axi_GAMMA_AWLOCK),
    .AWCACHE(m_axi_GAMMA_AWCACHE),
    .AWPROT(m_axi_GAMMA_AWPROT),
    .AWQOS(m_axi_GAMMA_AWQOS),
    .AWREGION(m_axi_GAMMA_AWREGION),
    .AWUSER(m_axi_GAMMA_AWUSER),
    .WVALID(m_axi_GAMMA_WVALID),
    .WREADY(m_axi_GAMMA_WREADY),
    .WDATA(m_axi_GAMMA_WDATA),
    .WSTRB(m_axi_GAMMA_WSTRB),
    .WLAST(m_axi_GAMMA_WLAST),
    .WID(m_axi_GAMMA_WID),
    .WUSER(m_axi_GAMMA_WUSER),
    .ARVALID(m_axi_GAMMA_ARVALID),
    .ARREADY(m_axi_GAMMA_ARREADY),
    .ARADDR(m_axi_GAMMA_ARADDR),
    .ARID(m_axi_GAMMA_ARID),
    .ARLEN(m_axi_GAMMA_ARLEN),
    .ARSIZE(m_axi_GAMMA_ARSIZE),
    .ARBURST(m_axi_GAMMA_ARBURST),
    .ARLOCK(m_axi_GAMMA_ARLOCK),
    .ARCACHE(m_axi_GAMMA_ARCACHE),
    .ARPROT(m_axi_GAMMA_ARPROT),
    .ARQOS(m_axi_GAMMA_ARQOS),
    .ARREGION(m_axi_GAMMA_ARREGION),
    .ARUSER(m_axi_GAMMA_ARUSER),
    .RVALID(m_axi_GAMMA_RVALID),
    .RREADY(m_axi_GAMMA_RREADY),
    .RDATA(m_axi_GAMMA_RDATA),
    .RLAST(m_axi_GAMMA_RLAST),
    .RID(m_axi_GAMMA_RID),
    .RUSER(m_axi_GAMMA_RUSER),
    .RRESP(m_axi_GAMMA_RRESP),
    .BVALID(m_axi_GAMMA_BVALID),
    .BREADY(m_axi_GAMMA_BREADY),
    .BRESP(m_axi_GAMMA_BRESP),
    .BID(m_axi_GAMMA_BID),
    .BUSER(m_axi_GAMMA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(GAMMA_ARVALID),
    .I_ARREADY(GAMMA_ARREADY),
    .I_ARADDR(GAMMA_addr_reg_934),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(GAMMA_RVALID),
    .I_RREADY(GAMMA_RREADY),
    .I_RDATA(GAMMA_RDATA),
    .I_RID(GAMMA_RID),
    .I_RUSER(GAMMA_RUSER),
    .I_RRESP(GAMMA_RRESP),
    .I_RLAST(GAMMA_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(GAMMA_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(GAMMA_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(GAMMA_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(GAMMA_BRESP),
    .I_BID(GAMMA_BID),
    .I_BUSER(GAMMA_BUSER)
);

bn_M_M_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_M_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_M_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_M_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_M_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_M_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_M_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_M_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_M_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_M_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_M_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_M_CACHE_VALUE ))
bn_M_M_m_axi_U(
    .AWVALID(m_axi_M_M_AWVALID),
    .AWREADY(m_axi_M_M_AWREADY),
    .AWADDR(m_axi_M_M_AWADDR),
    .AWID(m_axi_M_M_AWID),
    .AWLEN(m_axi_M_M_AWLEN),
    .AWSIZE(m_axi_M_M_AWSIZE),
    .AWBURST(m_axi_M_M_AWBURST),
    .AWLOCK(m_axi_M_M_AWLOCK),
    .AWCACHE(m_axi_M_M_AWCACHE),
    .AWPROT(m_axi_M_M_AWPROT),
    .AWQOS(m_axi_M_M_AWQOS),
    .AWREGION(m_axi_M_M_AWREGION),
    .AWUSER(m_axi_M_M_AWUSER),
    .WVALID(m_axi_M_M_WVALID),
    .WREADY(m_axi_M_M_WREADY),
    .WDATA(m_axi_M_M_WDATA),
    .WSTRB(m_axi_M_M_WSTRB),
    .WLAST(m_axi_M_M_WLAST),
    .WID(m_axi_M_M_WID),
    .WUSER(m_axi_M_M_WUSER),
    .ARVALID(m_axi_M_M_ARVALID),
    .ARREADY(m_axi_M_M_ARREADY),
    .ARADDR(m_axi_M_M_ARADDR),
    .ARID(m_axi_M_M_ARID),
    .ARLEN(m_axi_M_M_ARLEN),
    .ARSIZE(m_axi_M_M_ARSIZE),
    .ARBURST(m_axi_M_M_ARBURST),
    .ARLOCK(m_axi_M_M_ARLOCK),
    .ARCACHE(m_axi_M_M_ARCACHE),
    .ARPROT(m_axi_M_M_ARPROT),
    .ARQOS(m_axi_M_M_ARQOS),
    .ARREGION(m_axi_M_M_ARREGION),
    .ARUSER(m_axi_M_M_ARUSER),
    .RVALID(m_axi_M_M_RVALID),
    .RREADY(m_axi_M_M_RREADY),
    .RDATA(m_axi_M_M_RDATA),
    .RLAST(m_axi_M_M_RLAST),
    .RID(m_axi_M_M_RID),
    .RUSER(m_axi_M_M_RUSER),
    .RRESP(m_axi_M_M_RRESP),
    .BVALID(m_axi_M_M_BVALID),
    .BREADY(m_axi_M_M_BREADY),
    .BRESP(m_axi_M_M_BRESP),
    .BID(m_axi_M_M_BID),
    .BUSER(m_axi_M_M_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(M_M_ARVALID),
    .I_ARREADY(M_M_ARREADY),
    .I_ARADDR(M_M_addr_reg_928),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(M_M_RVALID),
    .I_RREADY(M_M_RREADY),
    .I_RDATA(M_M_RDATA),
    .I_RID(M_M_RID),
    .I_RUSER(M_M_RUSER),
    .I_RRESP(M_M_RRESP),
    .I_RLAST(M_M_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(M_M_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(M_M_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(M_M_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(M_M_BRESP),
    .I_BID(M_M_BID),
    .I_BUSER(M_M_BUSER)
);

bn_M_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_M_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_M_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_M_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_M_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_M_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_M_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_M_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_M_V_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_M_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_M_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_M_V_CACHE_VALUE ))
bn_M_V_m_axi_U(
    .AWVALID(m_axi_M_V_AWVALID),
    .AWREADY(m_axi_M_V_AWREADY),
    .AWADDR(m_axi_M_V_AWADDR),
    .AWID(m_axi_M_V_AWID),
    .AWLEN(m_axi_M_V_AWLEN),
    .AWSIZE(m_axi_M_V_AWSIZE),
    .AWBURST(m_axi_M_V_AWBURST),
    .AWLOCK(m_axi_M_V_AWLOCK),
    .AWCACHE(m_axi_M_V_AWCACHE),
    .AWPROT(m_axi_M_V_AWPROT),
    .AWQOS(m_axi_M_V_AWQOS),
    .AWREGION(m_axi_M_V_AWREGION),
    .AWUSER(m_axi_M_V_AWUSER),
    .WVALID(m_axi_M_V_WVALID),
    .WREADY(m_axi_M_V_WREADY),
    .WDATA(m_axi_M_V_WDATA),
    .WSTRB(m_axi_M_V_WSTRB),
    .WLAST(m_axi_M_V_WLAST),
    .WID(m_axi_M_V_WID),
    .WUSER(m_axi_M_V_WUSER),
    .ARVALID(m_axi_M_V_ARVALID),
    .ARREADY(m_axi_M_V_ARREADY),
    .ARADDR(m_axi_M_V_ARADDR),
    .ARID(m_axi_M_V_ARID),
    .ARLEN(m_axi_M_V_ARLEN),
    .ARSIZE(m_axi_M_V_ARSIZE),
    .ARBURST(m_axi_M_V_ARBURST),
    .ARLOCK(m_axi_M_V_ARLOCK),
    .ARCACHE(m_axi_M_V_ARCACHE),
    .ARPROT(m_axi_M_V_ARPROT),
    .ARQOS(m_axi_M_V_ARQOS),
    .ARREGION(m_axi_M_V_ARREGION),
    .ARUSER(m_axi_M_V_ARUSER),
    .RVALID(m_axi_M_V_RVALID),
    .RREADY(m_axi_M_V_RREADY),
    .RDATA(m_axi_M_V_RDATA),
    .RLAST(m_axi_M_V_RLAST),
    .RID(m_axi_M_V_RID),
    .RUSER(m_axi_M_V_RUSER),
    .RRESP(m_axi_M_V_RRESP),
    .BVALID(m_axi_M_V_BVALID),
    .BREADY(m_axi_M_V_BREADY),
    .BRESP(m_axi_M_V_BRESP),
    .BID(m_axi_M_V_BID),
    .BUSER(m_axi_M_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(M_V_ARVALID),
    .I_ARREADY(M_V_ARREADY),
    .I_ARADDR(M_V_addr_reg_922),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(M_V_RVALID),
    .I_RREADY(M_V_RREADY),
    .I_RDATA(M_V_RDATA),
    .I_RID(M_V_RID),
    .I_RUSER(M_V_RUSER),
    .I_RRESP(M_V_RRESP),
    .I_RLAST(M_V_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(M_V_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(M_V_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(M_V_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(M_V_BRESP),
    .I_BID(M_V_BID),
    .I_BUSER(M_V_BUSER)
);

bn_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
bn_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(OUT_addr_reg_916),
    .I_AWID(1'd0),
    .I_AWLEN(32'd128),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(tmp_V_reg_1064),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

sqrt_fixed_16_6_s grp_sqrt_fixed_16_6_s_fu_303(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .x_V(tmp_num_V_reg_967),
    .ap_return(grp_sqrt_fixed_16_6_s_fu_303_ap_return),
    .ap_ce(grp_sqrt_fixed_16_6_s_fu_303_ap_ce)
);

bn_sdiv_27ns_14nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 27 ))
bn_sdiv_27ns_14nsbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_784_p0),
    .din1(grp_fu_784_p1),
    .ce(grp_fu_784_ce),
    .dout(grp_fu_784_p2)
);

bn_am_submul_16s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 33 ))
bn_am_submul_16s_cud_U3(
    .din0(p_Val2_12_reg_972),
    .din1(p_Val2_15_reg_982),
    .din2(p_Val2_25_reg_977),
    .dout(grp_fu_903_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end else if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter44 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_fu_428_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_292 <= i_fu_434_p2;
    end else if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        i_0_reg_292 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        BETA_addr_reg_940[30 : 0] <= empty_29_fu_398_p1[30 : 0];
        GAMMA_addr_reg_934[30 : 0] <= empty_28_fu_378_p1[30 : 0];
        IN_addr_reg_946[30 : 0] <= empty_30_fu_418_p1[30 : 0];
        M_M_addr_reg_928[30 : 0] <= empty_27_fu_358_p1[30 : 0];
        M_V_addr_reg_922[30 : 0] <= empty_26_fu_338_p1[30 : 0];
        OUT_addr_reg_916[30 : 0] <= empty_fu_318_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln330_reg_952 <= icmp_ln330_fu_428_p2;
        icmp_ln330_reg_952_pp0_iter1_reg <= icmp_ln330_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln330_reg_952_pp0_iter10_reg <= icmp_ln330_reg_952_pp0_iter9_reg;
        icmp_ln330_reg_952_pp0_iter11_reg <= icmp_ln330_reg_952_pp0_iter10_reg;
        icmp_ln330_reg_952_pp0_iter12_reg <= icmp_ln330_reg_952_pp0_iter11_reg;
        icmp_ln330_reg_952_pp0_iter13_reg <= icmp_ln330_reg_952_pp0_iter12_reg;
        icmp_ln330_reg_952_pp0_iter14_reg <= icmp_ln330_reg_952_pp0_iter13_reg;
        icmp_ln330_reg_952_pp0_iter15_reg <= icmp_ln330_reg_952_pp0_iter14_reg;
        icmp_ln330_reg_952_pp0_iter16_reg <= icmp_ln330_reg_952_pp0_iter15_reg;
        icmp_ln330_reg_952_pp0_iter17_reg <= icmp_ln330_reg_952_pp0_iter16_reg;
        icmp_ln330_reg_952_pp0_iter18_reg <= icmp_ln330_reg_952_pp0_iter17_reg;
        icmp_ln330_reg_952_pp0_iter19_reg <= icmp_ln330_reg_952_pp0_iter18_reg;
        icmp_ln330_reg_952_pp0_iter20_reg <= icmp_ln330_reg_952_pp0_iter19_reg;
        icmp_ln330_reg_952_pp0_iter21_reg <= icmp_ln330_reg_952_pp0_iter20_reg;
        icmp_ln330_reg_952_pp0_iter22_reg <= icmp_ln330_reg_952_pp0_iter21_reg;
        icmp_ln330_reg_952_pp0_iter23_reg <= icmp_ln330_reg_952_pp0_iter22_reg;
        icmp_ln330_reg_952_pp0_iter24_reg <= icmp_ln330_reg_952_pp0_iter23_reg;
        icmp_ln330_reg_952_pp0_iter25_reg <= icmp_ln330_reg_952_pp0_iter24_reg;
        icmp_ln330_reg_952_pp0_iter26_reg <= icmp_ln330_reg_952_pp0_iter25_reg;
        icmp_ln330_reg_952_pp0_iter27_reg <= icmp_ln330_reg_952_pp0_iter26_reg;
        icmp_ln330_reg_952_pp0_iter28_reg <= icmp_ln330_reg_952_pp0_iter27_reg;
        icmp_ln330_reg_952_pp0_iter29_reg <= icmp_ln330_reg_952_pp0_iter28_reg;
        icmp_ln330_reg_952_pp0_iter2_reg <= icmp_ln330_reg_952_pp0_iter1_reg;
        icmp_ln330_reg_952_pp0_iter30_reg <= icmp_ln330_reg_952_pp0_iter29_reg;
        icmp_ln330_reg_952_pp0_iter31_reg <= icmp_ln330_reg_952_pp0_iter30_reg;
        icmp_ln330_reg_952_pp0_iter32_reg <= icmp_ln330_reg_952_pp0_iter31_reg;
        icmp_ln330_reg_952_pp0_iter33_reg <= icmp_ln330_reg_952_pp0_iter32_reg;
        icmp_ln330_reg_952_pp0_iter34_reg <= icmp_ln330_reg_952_pp0_iter33_reg;
        icmp_ln330_reg_952_pp0_iter35_reg <= icmp_ln330_reg_952_pp0_iter34_reg;
        icmp_ln330_reg_952_pp0_iter36_reg <= icmp_ln330_reg_952_pp0_iter35_reg;
        icmp_ln330_reg_952_pp0_iter37_reg <= icmp_ln330_reg_952_pp0_iter36_reg;
        icmp_ln330_reg_952_pp0_iter38_reg <= icmp_ln330_reg_952_pp0_iter37_reg;
        icmp_ln330_reg_952_pp0_iter39_reg <= icmp_ln330_reg_952_pp0_iter38_reg;
        icmp_ln330_reg_952_pp0_iter3_reg <= icmp_ln330_reg_952_pp0_iter2_reg;
        icmp_ln330_reg_952_pp0_iter40_reg <= icmp_ln330_reg_952_pp0_iter39_reg;
        icmp_ln330_reg_952_pp0_iter41_reg <= icmp_ln330_reg_952_pp0_iter40_reg;
        icmp_ln330_reg_952_pp0_iter42_reg <= icmp_ln330_reg_952_pp0_iter41_reg;
        icmp_ln330_reg_952_pp0_iter43_reg <= icmp_ln330_reg_952_pp0_iter42_reg;
        icmp_ln330_reg_952_pp0_iter4_reg <= icmp_ln330_reg_952_pp0_iter3_reg;
        icmp_ln330_reg_952_pp0_iter5_reg <= icmp_ln330_reg_952_pp0_iter4_reg;
        icmp_ln330_reg_952_pp0_iter6_reg <= icmp_ln330_reg_952_pp0_iter5_reg;
        icmp_ln330_reg_952_pp0_iter7_reg <= icmp_ln330_reg_952_pp0_iter6_reg;
        icmp_ln330_reg_952_pp0_iter8_reg <= icmp_ln330_reg_952_pp0_iter7_reg;
        icmp_ln330_reg_952_pp0_iter9_reg <= icmp_ln330_reg_952_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter10_reg == 1'd0))) begin
        norm_V_reg_1030 <= norm_V_fu_753_p3;
        p_Val2_20_reg_1020 <= BETA_RDATA;
        x_sqrt_V_reg_1025 <= grp_sqrt_fixed_16_6_s_fu_303_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter41_reg == 1'd0))) begin
        overflow_1_reg_1051 <= overflow_1_fu_838_p2;
        p_Val2_23_reg_1045 <= p_Val2_23_fu_798_p1;
        underflow_2_reg_1057 <= underflow_2_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter9_reg == 1'd0))) begin
        p_Result_1_reg_1014 <= {{grp_fu_903_p3[32:26]}};
        p_Result_6_reg_993 <= grp_fu_903_p3[32'd31];
        p_Result_s_reg_1009 <= {{grp_fu_903_p3[32:27]}};
        p_Val2_17_reg_999 <= {{grp_fu_903_p3[25:10]}};
        tmp_35_reg_1004 <= grp_fu_903_p3[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter8_reg == 1'd0))) begin
        p_Val2_12_reg_972 <= IN_r_RDATA;
        p_Val2_15_reg_982 <= M_M_RDATA;
        p_Val2_25_reg_977 <= GAMMA_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_s_reg_961 <= M_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        r_V_3_reg_987 <= grp_fu_903_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter42_reg == 1'd0))) begin
        tmp_V_reg_1064 <= tmp_V_fu_895_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter1_reg == 1'd0))) begin
        tmp_num_V_reg_967 <= tmp_num_V_fu_516_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        BETA_ARVALID = 1'b1;
    end else begin
        BETA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        BETA_RREADY = 1'b1;
    end else begin
        BETA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        BETA_blk_n_AR = m_axi_BETA_ARREADY;
    end else begin
        BETA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        BETA_blk_n_R = m_axi_BETA_RVALID;
    end else begin
        BETA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        GAMMA_ARVALID = 1'b1;
    end else begin
        GAMMA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        GAMMA_RREADY = 1'b1;
    end else begin
        GAMMA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        GAMMA_blk_n_AR = m_axi_GAMMA_ARREADY;
    end else begin
        GAMMA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        GAMMA_blk_n_R = m_axi_GAMMA_RVALID;
    end else begin
        GAMMA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        IN_r_ARVALID = 1'b1;
    end else begin
        IN_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        IN_r_RREADY = 1'b1;
    end else begin
        IN_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IN_r_blk_n_AR = m_axi_IN_r_ARREADY;
    end else begin
        IN_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        IN_r_blk_n_R = m_axi_IN_r_RVALID;
    end else begin
        IN_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        M_M_ARVALID = 1'b1;
    end else begin
        M_M_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        M_M_RREADY = 1'b1;
    end else begin
        M_M_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        M_M_blk_n_AR = m_axi_M_M_ARREADY;
    end else begin
        M_M_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        M_M_blk_n_R = m_axi_M_M_RVALID;
    end else begin
        M_M_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        M_V_ARVALID = 1'b1;
    end else begin
        M_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_V_RREADY = 1'b1;
    end else begin
        M_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        M_V_blk_n_AR = m_axi_M_V_ARREADY;
    end else begin
        M_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_952 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_V_blk_n_R = m_axi_M_V_RVALID;
    end else begin
        M_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state58))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln330_reg_952_pp0_iter43_reg == 1'd0) & (ap_enable_reg_pp0_iter44 == 1'b1))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_952_pp0_iter43_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter44 == 1'b1))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln330_fu_428_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_784_ce = 1'b1;
    end else begin
        grp_fu_784_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp159))) begin
        grp_sqrt_fixed_16_6_s_fu_303_ap_ce = 1'b1;
    end else begin
        grp_sqrt_fixed_16_6_s_fu_303_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln330_fu_428_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter44 == 1'b1) & (ap_enable_reg_pp0_iter43 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln330_fu_428_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter44 == 1'b1) & (ap_enable_reg_pp0_iter43 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_622_p2 = ((p_Result_1_reg_1014 == 7'd127) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_627_p2 = ((p_Result_1_reg_1014 == 7'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_617_p2 = ((p_Result_s_reg_1009 == 6'd63) ? 1'b1 : 1'b0);

assign and_ln779_fu_653_p2 = (xor_ln779_fu_647_p2 & Range2_all_ones_fu_617_p2);

assign and_ln781_fu_667_p2 = (carry_1_fu_603_p2 & Range1_all_ones_fu_622_p2);

assign and_ln786_fu_696_p2 = (p_Result_8_fu_609_p3 & deleted_ones_fu_659_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln330_reg_952 == 1'd0) & (1'b0 == M_V_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == BETA_RVALID) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter44 == 1'b1)) | ((icmp_ln330_reg_952 == 1'd0) & (1'b0 == M_V_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == BETA_RVALID) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp159 = (((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter44 == 1'b1)) | ((icmp_ln330_reg_952 == 1'd0) & (1'b0 == M_V_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == BETA_RVALID) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter44 == 1'b1)) | ((icmp_ln330_reg_952 == 1'd0) & (1'b0 == M_V_RVALID) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == BETA_RVALID) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == IN_r_RVALID)))));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln330_reg_952 == 1'd0) & (1'b0 == M_V_RVALID));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1_ignore_call20 = ((icmp_ln330_reg_952 == 1'd0) & (1'b0 == M_V_RVALID));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter9 = (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter9_ignore_call20 = (((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == M_M_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == GAMMA_RVALID)) | ((icmp_ln330_reg_952_pp0_iter8_reg == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state19_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter10_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter11 = ((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == BETA_RVALID));
end

always @ (*) begin
    ap_block_state20_pp0_stage0_iter11_ignore_call20 = ((icmp_ln330_reg_952_pp0_iter10_reg == 1'd0) & (1'b0 == BETA_RVALID));
end

assign ap_block_state21_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter12_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter13_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter14_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter15_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter16_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter17_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter18_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter19_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter20_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((1'b0 == M_V_ARREADY) | (1'b0 == M_M_ARREADY) | (1'b0 == GAMMA_ARREADY) | (1'b0 == BETA_ARREADY) | (1'b0 == IN_r_ARREADY));
end

assign ap_block_state30_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter21_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter22_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter23_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter24_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter25_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter26_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter27_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter28_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter29_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter30_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter31_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter32_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter33_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter34_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter35_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter36_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter37_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter38_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter39_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter40_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter41_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter42_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter43_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state53_io = ((icmp_ln330_reg_952_pp0_iter43_reg == 1'd0) & (1'b0 == OUT_r_WREADY));
end

assign ap_block_state53_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter44_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_V3_fu_388_p4 = {{beta_V[31:1]}};

assign carry_1_fu_603_p2 = (xor_ln416_fu_597_p2 & p_Result_7_fu_574_p3);

assign deleted_ones_fu_659_p3 = ((carry_1_fu_603_p2[0:0] === 1'b1) ? and_ln779_fu_653_p2 : Range1_all_ones_fu_622_p2);

assign deleted_zeros_fu_632_p3 = ((carry_1_fu_603_p2[0:0] === 1'b1) ? Range1_all_ones_fu_622_p2 : Range1_all_zeros_fu_627_p2);

assign empty_26_fu_338_p1 = moving_variance_V9_fu_328_p4;

assign empty_27_fu_358_p1 = moving_mean_V7_fu_348_p4;

assign empty_28_fu_378_p1 = gamma_V5_fu_368_p4;

assign empty_29_fu_398_p1 = beta_V3_fu_388_p4;

assign empty_30_fu_418_p1 = in_V1_fu_408_p4;

assign empty_fu_318_p1 = out_V1_fu_308_p4;

assign gamma_V5_fu_368_p4 = {{gamma_V[31:1]}};

assign grp_fu_784_p0 = {{ret_V_11_fu_767_p2}, {10'd0}};

assign grp_fu_784_p1 = grp_fu_784_p10;

assign grp_fu_784_p10 = x_sqrt_V_reg_1025;

assign i_fu_434_p2 = (i_0_reg_292 + 8'd1);

assign icmp_ln330_fu_428_p2 = ((i_0_reg_292 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_820_p2 = ((tmp_1_fu_810_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln786_fu_850_p2 = ((tmp_1_fu_810_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign in_V1_fu_408_p4 = {{in_V[31:1]}};

assign lhs_V_2_fu_761_p1 = $signed(norm_V_reg_1030);

assign lhs_V_fu_440_p1 = p_Val2_s_reg_961;

assign moving_mean_V7_fu_348_p4 = {{moving_mean_V[31:1]}};

assign moving_variance_V9_fu_328_p4 = {{moving_variance_V[31:1]}};

assign norm_V_fu_753_p3 = ((or_ln340_3_fu_731_p2[0:0] === 1'b1) ? select_ln340_1_fu_737_p3 : select_ln388_1_fu_745_p3);

assign or_ln340_1_fu_719_p2 = (underflow_1_fu_714_p2 | overflow_fu_690_p2);

assign or_ln340_2_fu_725_p2 = (xor_ln785_1_fu_685_p2 | and_ln786_fu_696_p2);

assign or_ln340_3_fu_731_p2 = (or_ln340_2_fu_725_p2 | and_ln781_fu_667_p2);

assign or_ln340_4_fu_868_p2 = (underflow_2_reg_1057 | overflow_1_reg_1051);

assign or_ln340_5_fu_877_p2 = (xor_ln340_2_fu_872_p2 | overflow_1_reg_1051);

assign or_ln340_fu_494_p2 = (xor_ln340_fu_488_p2 | p_Result_5_fu_462_p3);

assign or_ln785_1_fu_826_p2 = (p_Result_10_fu_802_p3 | icmp_ln785_fu_820_p2);

assign or_ln785_fu_679_p2 = (xor_ln785_fu_673_p2 | p_Result_8_fu_609_p3);

assign or_ln786_1_fu_702_p2 = (and_ln786_fu_696_p2 | and_ln781_fu_667_p2);

assign or_ln786_fu_856_p2 = (xor_ln786_2_fu_844_p2 | icmp_ln786_fu_850_p2);

assign out_V1_fu_308_p4 = {{out_V[31:1]}};

assign overflow_1_fu_838_p2 = (xor_ln785_2_fu_832_p2 & or_ln785_1_fu_826_p2);

assign overflow_fu_690_p2 = (xor_ln785_1_fu_685_p2 & or_ln785_fu_679_p2);

assign p_Result_10_fu_802_p3 = grp_fu_784_p2[32'd15];

assign p_Result_4_fu_449_p3 = ret_V_10_fu_443_p2[32'd16];

assign p_Result_5_fu_462_p3 = p_Val2_10_fu_457_p2[32'd15];

assign p_Result_7_fu_574_p3 = r_V_3_reg_987[32'd25];

assign p_Result_8_fu_609_p3 = p_Val2_18_fu_584_p2[32'd15];

assign p_Result_9_fu_790_p3 = grp_fu_784_p2[32'd26];

assign p_Val2_10_fu_457_p2 = ($signed(16'd1) + $signed(p_Val2_s_reg_961));

assign p_Val2_18_fu_584_p2 = (zext_ln415_fu_581_p1 + p_Val2_17_reg_999);

assign p_Val2_23_fu_798_p1 = grp_fu_784_p2[15:0];

assign ret_V_10_fu_443_p2 = ($signed(17'd1) + $signed(lhs_V_fu_440_p1));

assign ret_V_11_fu_767_p2 = ($signed(lhs_V_2_fu_761_p1) + $signed(rhs_V_1_fu_764_p1));

assign rhs_V_1_fu_764_p1 = $signed(p_Val2_20_reg_1020);

assign select_ln340_1_fu_737_p3 = ((or_ln340_1_fu_719_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_18_fu_584_p2);

assign select_ln340_2_fu_882_p3 = ((or_ln340_4_fu_868_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_23_reg_1045);

assign select_ln340_fu_500_p3 = ((xor_ln340_1_fu_482_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_10_fu_457_p2);

assign select_ln388_1_fu_745_p3 = ((underflow_1_fu_714_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_18_fu_584_p2);

assign select_ln388_2_fu_889_p3 = ((underflow_2_reg_1057[0:0] === 1'b1) ? 16'd32768 : p_Val2_23_reg_1045);

assign select_ln388_fu_508_p3 = ((underflow_fu_476_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_10_fu_457_p2);

assign tmp_1_fu_810_p4 = {{grp_fu_784_p2[26:16]}};

assign tmp_36_fu_589_p3 = p_Val2_18_fu_584_p2[32'd15];

assign tmp_38_fu_640_p3 = r_V_3_reg_987[32'd26];

assign tmp_V_fu_895_p3 = ((or_ln340_5_fu_877_p2[0:0] === 1'b1) ? select_ln340_2_fu_882_p3 : select_ln388_2_fu_889_p3);

assign tmp_num_V_fu_516_p3 = ((or_ln340_fu_494_p2[0:0] === 1'b1) ? select_ln340_fu_500_p3 : select_ln388_fu_508_p3);

assign underflow_1_fu_714_p2 = (xor_ln786_1_fu_708_p2 & p_Result_6_reg_993);

assign underflow_2_fu_862_p2 = (p_Result_9_fu_790_p3 & or_ln786_fu_856_p2);

assign underflow_fu_476_p2 = (xor_ln786_fu_470_p2 & p_Result_4_fu_449_p3);

assign xor_ln340_1_fu_482_p2 = (p_Result_5_fu_462_p3 ^ p_Result_4_fu_449_p3);

assign xor_ln340_2_fu_872_p2 = (underflow_2_reg_1057 ^ 1'd1);

assign xor_ln340_fu_488_p2 = (p_Result_4_fu_449_p3 ^ 1'd1);

assign xor_ln416_fu_597_p2 = (tmp_36_fu_589_p3 ^ 1'd1);

assign xor_ln779_fu_647_p2 = (tmp_38_fu_640_p3 ^ 1'd1);

assign xor_ln785_1_fu_685_p2 = (p_Result_6_reg_993 ^ 1'd1);

assign xor_ln785_2_fu_832_p2 = (p_Result_9_fu_790_p3 ^ 1'd1);

assign xor_ln785_fu_673_p2 = (deleted_zeros_fu_632_p3 ^ 1'd1);

assign xor_ln786_1_fu_708_p2 = (or_ln786_1_fu_702_p2 ^ 1'd1);

assign xor_ln786_2_fu_844_p2 = (p_Result_10_fu_802_p3 ^ 1'd1);

assign xor_ln786_fu_470_p2 = (p_Result_5_fu_462_p3 ^ 1'd1);

assign zext_ln415_fu_581_p1 = tmp_35_reg_1004;

always @ (posedge ap_clk) begin
    OUT_addr_reg_916[31] <= 1'b0;
    M_V_addr_reg_922[31] <= 1'b0;
    M_M_addr_reg_928[31] <= 1'b0;
    GAMMA_addr_reg_934[31] <= 1'b0;
    BETA_addr_reg_940[31] <= 1'b0;
    IN_addr_reg_946[31] <= 1'b0;
end

endmodule //bn
